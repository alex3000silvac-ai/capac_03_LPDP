/**
 * SISTEMA DE NOTIFICACIONES PARA EL DPO
 * Este componente muestra todas las notificaciones y tareas pendientes del DPO
 */

import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Badge,
  IconButton,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Chip,
  Alert,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  LinearProgress,
  Divider,
  Grid,
  Popover,
  Avatar
} from '@mui/material';
import {
  Notifications as NotificationIcon,
  Warning as WarningIcon,
  Error as ErrorIcon,
  CheckCircle as CheckIcon,
  Assignment as DocumentIcon,
  Security as SecurityIcon,
  Business as BusinessIcon,
  Assessment as AssessmentIcon,
  Schedule as ScheduleIcon,
  PriorityHigh as PriorityIcon,
  Email as EmailIcon,
  Dashboard as DashboardIcon,
  Timeline as TimelineIcon
} from '@mui/icons-material';

const NotificacionesDPO = () => {
  const [notificaciones, setNotificaciones] = useState([]);
  const [anchorEl, setAnchorEl] = useState(null);
  const [selectedTask, setSelectedTask] = useState(null);
  const [showTaskDialog, setShowTaskDialog] = useState(false);
  const [notificationCount, setNotificationCount] = useState(0);

  // Simular carga de notificaciones al montar
  useEffect(() => {
    cargarNotificaciones();
    // Simular notificaciones en tiempo real
    const interval = setInterval(() => {
      checkNuevasNotificaciones();
    }, 30000); // Cada 30 segundos

    return () => clearInterval(interval);
  }, []);

  const cargarNotificaciones = () => {
    // Simulaci√≥n de notificaciones del sistema - INCLUYENDO √ÅREA SALUD
    const notificacionesNuevas = [
      {
        id: 'NOTIF-SALUD-001',
        tipo: 'urgente',
        titulo: 'üè• EIPD REQUERIDA - Datos Sensibles de Salud',
        descripcion: 'El RAT-SALUD-2024 requiere EIPD por procesamiento de datos m√©dicos y situaci√≥n socioecon√≥mica',
        fechaCreacion: new Date(Date.now() - 1 * 60 * 60 * 1000), // Hace 1 hora
        vencimiento: 2,
        documentoId: 'EIPD-SALUD-2024-001',
        ratOrigen: 'RAT-SALUD-2024',
        progreso: 15,
        area: 'salud'
      },
      {
        id: 'NOTIF-SALUD-002',
        tipo: 'critico',
        titulo: 'üö® CONSULTA PREVIA OBLIGATORIA - Alto Riesgo Salud',
        descripcion: 'Tratamiento masivo de datos m√©dicos + algoritmos IA requiere consulta a Agencia Nacional',
        fechaCreacion: new Date(Date.now() - 30 * 60 * 1000), // Hace 30 minutos
        vencimiento: 1,
        documentoId: 'CONSULTA-PREVIA-SALUD-2024',
        ratOrigen: 'RAT-SALUD-2024',
        progreso: 0,
        area: 'salud'
      },
      {
        id: 'NOTIF-001',
        tipo: 'urgente',
        titulo: 'DPIA Pendiente - Scoring Crediticio',
        descripcion: 'El RAT-2024-001 requiere DPIA por decisiones automatizadas',
        fechaCreacion: new Date(Date.now() - 2 * 60 * 60 * 1000), // Hace 2 horas
        vencimiento: 3,
        documentoId: 'DPIA-2024-001',
        ratOrigen: 'RAT-2024-001',
        progreso: 40
      },
      {
        id: 'NOTIF-002',
        tipo: 'urgente',
        titulo: 'EIPD Incompleta - Datos Sensibles',
        descripcion: 'Evaluaci√≥n de impacto al 60% para situaci√≥n socioecon√≥mica',
        fechaCreacion: new Date(Date.now() - 5 * 60 * 60 * 1000),
        vencimiento: 5,
        documentoId: 'EIPD-2024-001',
        ratOrigen: 'RAT-2024-001',
        progreso: 60
      },
      {
        id: 'NOTIF-003',
        tipo: 'advertencia',
        titulo: 'DPA Sin Firmar - AWS',
        descripcion: 'Contrato de procesamiento con AWS pendiente de firma',
        fechaCreacion: new Date(Date.now() - 24 * 60 * 60 * 1000),
        vencimiento: 10,
        documentoId: 'DPA-2024-002',
        ratOrigen: 'RAT-2024-001',
        progreso: 70
      },
      {
        id: 'NOTIF-004',
        tipo: 'advertencia',
        titulo: 'DPA Revisi√≥n - Dicom',
        descripcion: 'Contrato con Equifax Chile requiere revisi√≥n final',
        fechaCreacion: new Date(Date.now() - 48 * 60 * 60 * 1000),
        vencimiento: 15,
        documentoId: 'DPA-2024-001',
        ratOrigen: 'RAT-2024-001',
        progreso: 85
      },
      {
        id: 'NOTIF-005',
        tipo: 'success',
        titulo: 'üèÅ PROCESO LISTO PARA CERRAR',
        descripcion: 'RAT-2024-001 puede cerrarse - todos los documentos completos',
        fechaCreacion: new Date(Date.now() - 6 * 60 * 60 * 1000),
        vencimiento: 999,
        documentoId: 'PROCESO-COMPLETO',
        ratOrigen: 'RAT-2024-001',
        progreso: 100
      }
    ];

    setNotificaciones(notificacionesNuevas);
    setNotificationCount(notificacionesNuevas.filter(n => n.tipo === 'urgente').length);
  };

  const checkNuevasNotificaciones = () => {
    // Simular llegada de nueva notificaci√≥n
    const random = Math.random();
    if (random > 0.7) {
      const nuevaNotificacion = {
        id: `NOTIF-${Date.now()}`,
        tipo: 'info',
        titulo: 'Nuevo RAT Creado',
        descripcion: 'El √°rea de Marketing cre√≥ un RAT que podr√≠a requerir EIPD',
        fechaCreacion: new Date(),
        vencimiento: 30,
        documentoId: `RAT-${Date.now()}`,
        ratOrigen: `RAT-${Date.now()}`,
        progreso: 0
      };

      setNotificaciones(prev => [nuevaNotificacion, ...prev]);
      setNotificationCount(prev => prev + 1);
      
      // Mostrar notificaci√≥n del navegador si tiene permisos
      if ('Notification' in window && Notification.permission === 'granted') {
        new Notification('Sistema LPDP - Nueva Tarea', {
          body: nuevaNotificacion.titulo,
          icon: '/favicon.ico'
        });
      }
    }
  };

  const handleNotificationClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const handleTaskClick = (task) => {
    console.log('üîÑ handleTaskClick called with:', task);
    
    if (task.documentoId === 'PROCESO-COMPLETO') {
      console.log('üèÅ Redirecting to proceso-completo');
      window.location.href = '/proceso-completo';
      return;
    }
    
    console.log('üîß Setting selectedTask and opening dialog');
    setSelectedTask(task);
    setShowTaskDialog(true);
    handleClose();
  };
  
  // Nueva funci√≥n para manejar la acci√≥n de completar documento
  const handleCompletarDocumento = (task) => {
    console.log('üöÄ handleCompletarDocumento called with task:', task);
    
    const tipoDoc = task.documentoId.split('-')[0]; // EIPD, DPIA, DPA, etc.
    console.log('üìã Tipo documento:', tipoDoc);
    
    // Analizar si ya existe un documento o hay que crearlo/asociarlo
    const estadoDocumento = analizarEstadoDocumento(task);
    console.log('üìä Estado documento:', estadoDocumento);
    
    // Cerrar el dialog inmediatamente
    setShowTaskDialog(false);
    
    // Mostrar el sistema de gesti√≥n de asociaciones
    mostrarSistemaAsociaciones(task, estadoDocumento);
  };
  
  // Sistema inteligente de gesti√≥n de asociaciones
  const mostrarSistemaAsociaciones = (task, estadoDocumento) => {
    const tipoDoc = task.documentoId.split('-')[0];
    console.log('üéØ Sistema de asociaciones para:', tipoDoc, 'Estado:', estadoDocumento);

    // Crear mensaje detallado basado en el an√°lisis
    let mensaje = `üîç AN√ÅLISIS DEL SISTEMA LPDP\n\n`;
    mensaje += `üìã Documento requerido: ${tipoDoc}\n`;
    mensaje += `üè• RAT origen: ${task.ratOrigen}\n`;
    mensaje += `‚ö° Detecci√≥n autom√°tica: ${estadoDocumento.mensaje}\n\n`;

    if (estadoDocumento.accion === 'CREAR_NUEVO') {
      mensaje += `üí° RECOMENDACI√ìN: Crear nuevo documento\n\n`;
      mensaje += `¬øQu√© deseas hacer?\n\n`;
      mensaje += `‚úÖ CREAR NUEVO: Crear ${tipoDoc} desde cero\n`;
      mensaje += `üîó VER ASOCIACIONES: Ir al panel de gesti√≥n\n`;
      mensaje += `‚ùå CANCELAR: Volver al dashboard`;
      
      const respuesta = window.confirm(mensaje);
      if (respuesta) {
        crearNuevoDocumento(task);
      }
    } 
    else if (estadoDocumento.accion === 'COMPLETAR_EXISTENTE') {
      mensaje += `üéØ DOCUMENTO COMPATIBLE ENCONTRADO:\n`;
      mensaje += `üìÑ ${estadoDocumento.documento.nombre}\n`;
      mensaje += `üìä Progreso actual: ${estadoDocumento.documento.progreso}%\n\n`;
      mensaje += `üí° RECOMENDACI√ìN: Completar documento existente\n\n`;
      mensaje += `¬øQu√© deseas hacer?\n\n`;
      mensaje += `‚úÖ COMPLETAR: Abrir editor del documento existente\n`;
      mensaje += `üÜï CREAR NUEVO: Crear ${tipoDoc} diferente\n`;
      mensaje += `üîó GESTIONAR: Ver todas las opciones de asociaci√≥n`;
      
      const respuesta = window.confirm(mensaje);
      if (respuesta) {
        abrirDocumentoExistente(task);
      } else {
        // Mostrar opciones adicionales
        abrirGestionAsociaciones(task);
      }
    }
    else if (estadoDocumento.accion === 'ASOCIAR_EXISTENTE') {
      mensaje += `üìã M√öLTIPLES DOCUMENTOS ENCONTRADOS:\n\n`;
      estadoDocumento.documentos.forEach((doc, index) => {
        mensaje += `${index + 1}. ${doc.nombre} (${doc.progreso}%) ${doc.compatible ? '‚úÖ' : '‚ö†Ô∏è'}\n`;
      });
      mensaje += `\nüí° RECOMENDACI√ìN: Revisar opciones de asociaci√≥n\n\n`;
      mensaje += `Se abrir√° el panel de gesti√≥n de asociaciones para que puedas:\n`;
      mensaje += `‚Ä¢ Asociar un documento existente\n`;
      mensaje += `‚Ä¢ Crear un nuevo documento\n`;
      mensaje += `‚Ä¢ Ver compatibilidad detallada`;
      
      alert(mensaje);
      abrirGestionAsociaciones(task);
    }
  };

  const analizarEstadoDocumento = (task) => {
    const tipoDoc = task.documentoId.split('-')[0];
    
    // Base de datos simulada m√°s realista para el √°rea de SALUD
    const documentosExistentes = {
      'EIPD': [
        { 
          id: 'EIPD-SALUD-2024-001', 
          nombre: 'EIPD Datos M√©dicos Generales', 
          progreso: 85, 
          compatible: task.area === 'salud',
          descripcion: 'Evaluaci√≥n para datos m√©dicos y diagn√≥sticos',
          fecha_creacion: '2024-08-20',
          responsable: 'Dr. Juan P√©rez (DPO Salud)'
        },
        { 
          id: 'EIPD-FINANCIERO-2024', 
          nombre: 'EIPD Sistema Scoring', 
          progreso: 60, 
          compatible: task.area === 'financiero',
          descripcion: 'Evaluaci√≥n para datos financieros y crediticios',
          fecha_creacion: '2024-08-15',
          responsable: 'Mar√≠a L√≥pez (DPO)'
        }
      ],
      'DPIA': [
        { 
          id: 'DPIA-SALUD-IA-2024', 
          nombre: 'DPIA Algoritmos Diagn√≥stico M√©dico', 
          progreso: 40, 
          compatible: task.area === 'salud',
          descripcion: 'DPIA para IA en diagn√≥sticos autom√°ticos',
          fecha_creacion: '2024-08-25',
          responsable: 'Dr. Carlos Ruiz (Auditor√≠a M√©dica)'
        },
        { 
          id: 'DPIA-ALGORITMOS-GENERAL', 
          nombre: 'DPIA Scoring Crediticio', 
          progreso: 90, 
          compatible: task.area === 'financiero',
          descripcion: 'DPIA para decisiones crediticias automatizadas',
          fecha_creacion: '2024-08-10',
          responsable: 'Ana Torres (Auditor√≠a)'
        }
      ],
      'DPA': [
        {
          id: 'DPA-CLOUD-SALUD-2024',
          nombre: 'DPA Servicios Cloud M√©dicos',
          progreso: 95,
          compatible: task.area === 'salud',
          descripcion: 'Contrato para procesamiento de datos m√©dicos en la nube',
          fecha_creacion: '2024-08-12',
          responsable: 'Legal + DPO Salud'
        }
      ],
      'CONSULTA': []
    };
    
    const docsDelTipo = documentosExistentes[tipoDoc] || [];
    const docCompatible = docsDelTipo.find(d => d.compatible);
    const docsIncompatibles = docsDelTipo.filter(d => !d.compatible);
    
    console.log(`üìã An√°lisis para ${tipoDoc}:`, {
      totalDocs: docsDelTipo.length,
      compatibles: docCompatible ? 1 : 0,
      incompatibles: docsIncompatibles.length
    });
    
    if (docsDelTipo.length === 0) {
      return { 
        accion: 'CREAR_NUEVO', 
        mensaje: `No existe ning√∫n documento ${tipoDoc} en el sistema`,
        documentos: []
      };
    } else if (docCompatible && docCompatible.progreso < 100) {
      return { 
        accion: 'COMPLETAR_EXISTENTE', 
        mensaje: `Documento compatible encontrado: ${docCompatible.nombre} (${docCompatible.progreso}% completo)`,
        documento: docCompatible,
        documentos: docsDelTipo
      };
    } else if (docCompatible && docCompatible.progreso === 100) {
      return {
        accion: 'ASOCIAR_EXISTENTE',
        mensaje: `Documento compatible completo disponible: ${docCompatible.nombre}`,
        documento: docCompatible,
        documentos: docsDelTipo
      };
    } else if (docsDelTipo.length > 0) {
      return { 
        accion: 'ASOCIAR_EXISTENTE', 
        mensaje: `${docsDelTipo.length} documentos ${tipoDoc} disponibles (revisar compatibilidad)`,
        documentos: docsDelTipo
      };
    } else {
      return { accion: 'CREAR_NUEVO', mensaje: 'Crear nuevo documento' };
    }
  };
  
  // Funci√≥n para abrir el panel de gesti√≥n de asociaciones
  const abrirGestionAsociaciones = (task) => {
    console.log('üîó Abriendo gesti√≥n de asociaciones para:', task);
    const tipoDoc = task.documentoId.split('-')[0];
    const url = `/gestion-asociaciones?rat=${task.ratOrigen}&tipo=${tipoDoc}&documento=${task.documentoId}`;
    console.log('üöÄ Redirecting to:', url);
    window.location.href = url;
  };

  const crearNuevoDocumento = (task) => {
    console.log('üìù crearNuevoDocumento called with:', task);
    
    const tipoDoc = task.documentoId.split('-')[0];
    console.log('üìã Tipo documento extra√≠do:', tipoDoc);
    
    const mensajes = {
      'EIPD': 'üìã Creando nueva Evaluaci√≥n de Impacto en Protecci√≥n de Datos...',
      'DPIA': 'ü§ñ Creando nueva Evaluaci√≥n de Impacto de Algoritmos...',
      'DPA': 'üìÑ Creando nuevo Contrato de Procesamiento de Datos...',
      'CONSULTA': 'üèõÔ∏è Preparando consulta a la Agencia Nacional...'
    };
    
    const mensaje = mensajes[tipoDoc] || 'üìù Creando documento...';
    console.log('üí¨ Mostrando mensaje:', mensaje);
    
    const confirmacion = window.confirm(
      `${mensaje}\n\n` +
      `‚úÖ Se pre-llenar√° con datos del ${task.ratOrigen}\n` +
      `‚úÖ Se asociar√° autom√°ticamente al RAT\n` +
      `‚úÖ Recibir√°s notificaci√≥n cuando est√© listo\n\n` +
      `¬øContinuar con la redirecci√≥n?`
    );
    
    if (!confirmacion) {
      console.log('‚ùå Usuario cancel√≥ la redirecci√≥n');
      return;
    }
    
    // URLs de redirecci√≥n
    const urls = {
      'EIPD': '/evaluacion-impacto',
      'DPIA': '/dpia-algoritmos', 
      'DPA': '/gestion-proveedores',
      'CONSULTA': '/consulta-previa'
    };
    
    const url = urls[tipoDoc] || '/dashboard-dpo';
    const fullUrl = `${url}?rat=${task.ratOrigen}&nuevo=true`;
    
    console.log('üöÄ Redirecting to:', fullUrl);
    
    // Redirecci√≥n inmediata
    window.location.href = fullUrl;
  };
  
  const mostrarOpcionesAsociacion = (task) => {
    const estado = analizarEstadoDocumento(task);
    const tipoDoc = task.documentoId.split('-')[0];
    
    const opciones = estado.documentos.map(doc => 
      `‚Ä¢ ${doc.nombre} (${doc.progreso}% completo) ${doc.compatible ? '‚úÖ Compatible' : '‚ö†Ô∏è Revisar'}`
    ).join('\n');
    
    const respuesta = window.confirm(
      `üìã ${estado.mensaje}\n\n${opciones}\n\n` +
      `¬øQu√© deseas hacer?\n\n` +
      `‚úÖ OK = Ir a gesti√≥n de asociaciones\n` +
      `‚ùå Cancelar = Crear nuevo documento`
    );
    
    if (respuesta) {
      window.location.href = `/gestion-asociaciones?rat=${task.ratOrigen}&tipo=${tipoDoc}`;
    } else {
      crearNuevoDocumento(task);
    }
  };
  
  const abrirDocumentoExistente = (task) => {
    const estado = analizarEstadoDocumento(task);
    const doc = estado.documento;
    
    alert(`üìã Abriendo documento existente:\n\n` +
          `üìÑ ${doc.nombre}\n` +
          `üìä Progreso: ${doc.progreso}%\n` +
          `üîó Ya asociado a ${task.ratOrigen}\n\n` +
          `üöÄ Redirigiendo al editor...`);
    
    setTimeout(() => {
      const tipoDoc = task.documentoId.split('-')[0];
      const urls = {
        'EIPD': '/evaluacion-impacto',
        'DPIA': '/dpia-algoritmos',
        'DPA': '/gestion-proveedores'
      };
      
      const url = urls[tipoDoc] || '/dashboard-dpo';
      window.location.href = `${url}?documento=${doc.id}&editar=true`;
    }, 1500);
  };
  
  const mostrarOpcionesGenerales = (task) => {
    alert(`üîß Opciones disponibles para ${task.titulo}:\n\n` +
          `1. üìù Crear nuevo documento\n` +
          `2. üîó Asociar documento existente\n` +
          `3. üìã Ver detalles de la tarea\n\n` +
          `Usa el men√∫ de Gesti√≥n de Asociaciones para m√°s opciones.`);
  };
  
  // Funci√≥n auxiliar para mostrar estado en la tabla
  const getEstadoDocumento = (task) => {
    return analizarEstadoDocumento(task);
  };

  const getIconByType = (tipo) => {
    switch(tipo) {
      case 'urgente': return <ErrorIcon color="error" />;
      case 'advertencia': return <WarningIcon color="warning" />;
      case 'info': return <CheckIcon color="info" />;
      default: return <CheckIcon color="success" />;
    }
  };

  const getPriorityColor = (vencimiento) => {
    if (vencimiento <= 3) return 'error';
    if (vencimiento <= 7) return 'warning';
    return 'info';
  };

  const formatTimeAgo = (date) => {
    const hours = Math.floor((Date.now() - date) / (1000 * 60 * 60));
    if (hours < 1) return 'Hace menos de 1 hora';
    if (hours < 24) return `Hace ${hours} horas`;
    const days = Math.floor(hours / 24);
    return `Hace ${days} d√≠as`;
  };

  const open = Boolean(anchorEl);

  return (
    <Box sx={{ width: '100%' }}>
      {/* Bot√≥n de Prueba */}
      <Box sx={{ mb: 2 }}>
        <Button 
          variant="contained" 
          color="secondary"
          onClick={() => {
            console.log('üß™ BOT√ìN DE PRUEBA FUNCIONA');
            alert('üß™ Los event handlers S√ç funcionan!');
          }}
        >
          üß™ PRUEBA - Click aqu√≠ para verificar que los botones funcionan
        </Button>
      </Box>

      {/* Barra Superior con Notificaciones */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center',
        mb: 3,
        p: 2,
        bgcolor: 'background.paper',
        borderRadius: 2
      }}>
        <Typography variant="h5" fontWeight={700}>
          <DashboardIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
          Panel de Control DPO
        </Typography>
        
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
          <Chip 
            avatar={<Avatar>{notificationCount}</Avatar>}
            label="Tareas Urgentes"
            color="error"
            variant={notificationCount > 0 ? "filled" : "outlined"}
          />
          
          <IconButton onClick={handleNotificationClick}>
            <Badge badgeContent={notificationCount} color="error">
              <NotificationIcon sx={{ 
                fontSize: 28,
                animation: notificationCount > 0 ? 'ring 4s infinite' : 'none',
                '@keyframes ring': {
                  '0%, 100%': { transform: 'rotate(0)' },
                  '10%, 30%': { transform: 'rotate(14deg)' },
                  '20%, 40%': { transform: 'rotate(-14deg)' },
                  '50%': { transform: 'rotate(0)' }
                }
              }} />
            </Badge>
          </IconButton>
        </Box>
      </Box>

      {/* Panel Desplegable de Notificaciones */}
      <Popover
        open={open}
        anchorEl={anchorEl}
        onClose={handleClose}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'right',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'right',
        }}
      >
        <Box sx={{ width: 400, maxHeight: 500, overflow: 'auto' }}>
          <Box sx={{ 
            p: 2, 
            bgcolor: 'error.main', 
            color: 'error.contrastText',
            position: 'sticky',
            top: 0,
            zIndex: 1
          }}>
            <Typography variant="subtitle1" fontWeight={700} color="inherit">
              ‚ö†Ô∏è Notificaciones Pendientes
            </Typography>
          </Box>
          
          <List>
            {notificaciones.map((notif) => (
              <ListItem 
                key={notif.id}
                button
                onClick={() => {
                  console.log('üîî NOTIFICACI√ìN CLICKEADA desde Popover:', notif.documentoId);
                  // EJECUTAR DIRECTAMENTE SIN DIALOG
                  const tipoDoc = notif.documentoId.split('-')[0];
                  const estadoDocumento = analizarEstadoDocumento(notif);
                  
                  // Cerrar popover
                  handleClose();
                  
                  // Ejecutar an√°lisis directo
                  mostrarSistemaAsociaciones(notif, estadoDocumento);
                }}
                sx={{
                  borderLeft: 4,
                  borderLeftColor: notif.tipo === 'urgente' ? 'error.main' : 
                                   notif.tipo === 'advertencia' ? 'warning.main' : 'info.main'
                }}
              >
                <ListItemIcon>
                  {getIconByType(notif.tipo)}
                </ListItemIcon>
                <ListItemText
                  primary={notif.titulo}
                  secondary={
                    <>
                      <Typography variant="caption" display="block">
                        {notif.descripcion}
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        {formatTimeAgo(notif.fechaCreacion)} ‚Ä¢ Vence en {notif.vencimiento} d√≠as
                      </Typography>
                    </>
                  }
                />
              </ListItem>
            ))}
          </List>
        </Box>
      </Popover>

      {/* Alerta Principal */}
      {notificationCount > 0 && (
        <Alert 
          severity="warning" 
          icon={<PriorityIcon />}
          sx={{ mb: 3 }}
        >
          <Typography variant="subtitle1" fontWeight={600}>
            ATENCI√ìN DPO: Tienes {notificationCount} documentos cr√≠ticos pendientes de revisi√≥n
          </Typography>
          <Typography variant="body2">
            El sistema detect√≥ autom√°ticamente que los RATs requieren documentaci√≥n adicional obligatoria seg√∫n Ley 21.719
          </Typography>
        </Alert>
      )}

      {/* Estad√≠sticas */}
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="text.secondary" gutterBottom>
                üìÑ Documentos Pendientes
              </Typography>
              <Typography variant="h3" color="error">
                {notificaciones.length}
              </Typography>
              <Typography variant="caption">
                {notificaciones.filter(n => n.tipo === 'urgente').length} urgentes
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="text.secondary" gutterBottom>
                ‚è∞ Pr√≥ximo Vencimiento
              </Typography>
              <Typography variant="h3" color="warning.main">
                3 d√≠as
              </Typography>
              <Typography variant="caption">
                DPIA Sistema Scoring
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="text.secondary" gutterBottom>
                üîó Enlaces Activos
              </Typography>
              <Typography variant="h3" color="info.main">
                12
              </Typography>
              <Typography variant="caption">
                Todos sincronizados
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="text.secondary" gutterBottom>
                ‚úÖ Completados
              </Typography>
              <Typography variant="h3" color="success.main">
                8
              </Typography>
              <Typography variant="caption">
                92% cumplimiento
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Tabla de Tareas Pendientes */}
      <Card>
        <CardContent>
          <Typography variant="subtitle1" fontWeight={700} gutterBottom>
            üìã Tareas Pendientes del DPO
          </Typography>
          
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Prioridad</TableCell>
                  <TableCell>Documento</TableCell>
                  <TableCell>Descripci√≥n</TableCell>
                  <TableCell>RAT Origen</TableCell>
                  <TableCell>Progreso</TableCell>
                  <TableCell>Vencimiento</TableCell>
                  <TableCell>Acci√≥n</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {notificaciones.map((task) => (
                  <TableRow 
                    key={task.id}
                    sx={{ 
                      '&:hover': { bgcolor: 'action.hover' },
                      // DESHABILITADO: Click en fila ya no abre dialog roto
                      // onClick={() => handleTaskClick(task)},
                      // cursor: 'pointer' 
                    }}
                  >
                    <TableCell>
                      <Chip 
                        label={task.tipo.toUpperCase()}
                        color={getPriorityColor(task.vencimiento)}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      <Box>
                        <Typography variant="body2" fontWeight={600}>
                          {task.documentoId}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {getEstadoDocumento(task).mensaje}
                        </Typography>
                      </Box>
                    </TableCell>
                    <TableCell>{task.descripcion}</TableCell>
                    <TableCell>{task.ratOrigen}</TableCell>
                    <TableCell>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <LinearProgress 
                          variant="determinate" 
                          value={task.progreso} 
                          sx={{ flexGrow: 1, height: 8 }}
                        />
                        <Typography variant="caption">
                          {task.progreso}%
                        </Typography>
                      </Box>
                    </TableCell>
                    <TableCell>
                      <Typography 
                        variant="body2" 
                        color={getPriorityColor(task.vencimiento)}
                      >
                        {task.vencimiento} d√≠as
                      </Typography>
                    </TableCell>
                    <TableCell>
                      {task.documentoId === 'PROCESO-COMPLETO' ? (
                        <Button
                          variant="contained"
                          size="small"
                          color="success"
                          onClick={() => handleTaskClick(task)}
                        >
                          Cerrar Proceso
                        </Button>
                      ) : (
                        <Button
                          variant="contained"
                          size="small"
                          color={getEstadoDocumento(task).accion === 'CREAR_NUEVO' ? 'primary' : 
                                 getEstadoDocumento(task).accion === 'COMPLETAR_EXISTENTE' ? 'warning' : 'info'}
                          onClick={(e) => {
                            console.log('üéØ BOT√ìN TABLA CLICKEADO DIRECTO:', task.documentoId);
                            e.preventDefault();
                            e.stopPropagation();
                            
                            // EJECUTAR DIRECTAMENTE SIN DIALOG
                            const tipoDoc = task.documentoId.split('-')[0];
                            const estadoDocumento = analizarEstadoDocumento(task);
                            console.log('üìä Estado directo:', estadoDocumento);
                            
                            // Mostrar alert INMEDIATO
                            alert(`üîç AN√ÅLISIS SISTEMA LPDP\n\n` +
                                  `üìã Documento: ${tipoDoc}\n` +
                                  `üè• RAT: ${task.ratOrigen}\n` +
                                  `‚ö° Estado: ${estadoDocumento.mensaje}\n\n` +
                                  `üöÄ Ejecutando acci√≥n recomendada...`);
                            
                            // Ejecutar acci√≥n DIRECTA
                            if (estadoDocumento.accion === 'CREAR_NUEVO') {
                              crearNuevoDocumento(task);
                            } else if (estadoDocumento.accion === 'COMPLETAR_EXISTENTE') {
                              abrirDocumentoExistente(task);
                            } else {
                              abrirGestionAsociaciones(task);
                            }
                          }}
                        >
                          {getEstadoDocumento(task).accion === 'CREAR_NUEVO' ? 'Crear' : 
                           getEstadoDocumento(task).accion === 'COMPLETAR_EXISTENTE' ? 'Completar' : 'Asociar'}
                        </Button>
                      )}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </CardContent>
      </Card>

      {/* Timeline de Eventos */}
      <Card sx={{ mt: 3 }}>
        <CardContent>
          <Typography variant="subtitle1" fontWeight={700} gutterBottom>
            <TimelineIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
            L√≠nea de Tiempo - C√≥mo Llegaron las Notificaciones
          </Typography>
          
          <Box sx={{ mt: 2 }}>
            {[
              { time: 'Hoy 14:30', evento: 'üè• √Årea Salud crea RAT', desc: 'RAT-SALUD-2024: "Procesamiento Datos Pacientes"' },
              { time: 'Hoy 14:31', evento: 'üîç Sistema analiza contenido', desc: 'Detecta: datos_medicos + situacion_socioeconomica + algoritmos IA' },
              { time: 'Hoy 14:32', evento: '‚ö†Ô∏è Trigger de alto riesgo', desc: 'M√∫ltiples datos sensibles + tratamiento masivo' },
              { time: 'Hoy 14:33', evento: 'üö® Alerta cr√≠tica generada', desc: 'CONSULTA PREVIA OBLIGATORIA - Agencia Nacional' },
              { time: 'Hoy 14:34', evento: 'üîî Notificaci√≥n inmediata DPO', desc: 'Email + Push + Dashboard + SMS de emergencia' },
              { time: 'Hoy 15:00', evento: 'üë§ DPO debe actuar YA', desc: 'Vencimiento: 24 horas para consulta previa' }
            ].map((item, index) => (
              <Box key={index} sx={{ 
                display: 'flex', 
                mb: 2,
                pl: 2,
                borderLeft: '3px solid',
                borderLeftColor: index === 1 ? 'warning.main' : 'primary.main'
              }}>
                <Box sx={{ minWidth: 100 }}>
                  <Typography variant="caption" color="text.secondary">
                    {item.time}
                  </Typography>
                </Box>
                <Box>
                  <Typography variant="subtitle2" fontWeight={600}>
                    {item.evento}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    {item.desc}
                  </Typography>
                </Box>
              </Box>
            ))}
          </Box>
        </CardContent>
      </Card>

      {/* Dialog de Tarea Detallada */}
      <Dialog open={showTaskDialog} onClose={() => setShowTaskDialog(false)} maxWidth="md" fullWidth>
        <DialogTitle>
          üìã Detalle de Tarea Pendiente
        </DialogTitle>
        <DialogContent>
          {selectedTask && (
            <Box>
              <Alert severity={selectedTask.tipo === 'urgente' ? 'error' : selectedTask.tipo === 'critico' ? 'error' : 'warning'} sx={{ mb: 2 }}>
                <Typography variant="subtitle1" fontWeight={600}>{selectedTask.titulo}</Typography>
                <Typography variant="body2">{selectedTask.descripcion}</Typography>
              </Alert>
              
              {/* Mostrar estado del documento */}
              <Alert severity="info" sx={{ mb: 2 }}>
                <Typography variant="subtitle1" fontWeight={600}>üîç Estado del Documento</Typography>
                <Typography variant="body2">
                  {getEstadoDocumento(selectedTask).mensaje}
                </Typography>
              </Alert>
              
              <Grid container spacing={2}>
                <Grid item xs={6}>
                  <Typography variant="subtitle2">Documento ID:</Typography>
                  <Typography variant="body1" fontWeight={600}>{selectedTask.documentoId}</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="subtitle2">RAT Origen:</Typography>
                  <Typography variant="body1" fontWeight={600}>{selectedTask.ratOrigen}</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="subtitle2">Progreso Actual:</Typography>
                  <LinearProgress variant="determinate" value={selectedTask.progreso} />
                  <Typography variant="caption">{selectedTask.progreso}% completado</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="subtitle2">Vencimiento:</Typography>
                  <Chip 
                    label={`${selectedTask.vencimiento} d√≠as`} 
                    color={getPriorityColor(selectedTask.vencimiento)}
                  />
                </Grid>
              </Grid>
              
              <Divider sx={{ my: 2 }} />
              
              <Typography variant="subtitle1" fontWeight={600} gutterBottom>Pr√≥ximos Pasos:</Typography>
              <List>
                <ListItem>
                  <ListItemIcon><CheckIcon /></ListItemIcon>
                  <ListItemText primary="Revisar datos pre-llenados desde el RAT" />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckIcon /></ListItemIcon>
                  <ListItemText primary="Completar campos faltantes" />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckIcon /></ListItemIcon>
                  <ListItemText primary="Validar con equipo legal" />
                </ListItem>
                <ListItem>
                  <ListItemIcon><CheckIcon /></ListItemIcon>
                  <ListItemText primary="Firmar y archivar documento" />
                </ListItem>
              </List>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowTaskDialog(false)}>Cerrar</Button>
          <Button 
            variant="contained" 
            color="primary"
            onClick={() => {
              console.log('üî• Dialog button clicked, selectedTask:', selectedTask);
              if (selectedTask) {
                handleCompletarDocumento(selectedTask);
              } else {
                alert('‚ùå Error: No hay tarea seleccionada. Por favor cierra el dialog e intenta de nuevo.');
              }
            }}
          >
            {selectedTask ? (
              (() => {
                const estado = getEstadoDocumento(selectedTask);
                switch(estado.accion) {
                  case 'CREAR_NUEVO': return 'üìù Crear Nuevo Documento';
                  case 'COMPLETAR_EXISTENTE': return '‚úèÔ∏è Completar Documento Existente';
                  case 'ASOCIAR_EXISTENTE': return 'üîó Gestionar Asociaciones';
                  default: return 'Ir a Completar Documento';
                }
              })()
            ) : 'Ir a Completar Documento'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default NotificacionesDPO;