import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Button,
  Card,
  CardContent,
  Grid,
  Paper,
  Chip,
  Divider,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  Alert,
  LinearProgress,
  Container,
  IconButton,
  Fade,
  Grow,
  Avatar,
  Zoom,
  Slide,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControlLabel,
  Switch,
  Slider,
  Tooltip,
  Badge,
  CircularProgress,
  Accordion,
  AccordionSummary,
  AccordionDetails
} from '@mui/material';
import {
  School,
  Security,
  Gavel,
  Business,
  CheckCircle,
  PlayArrow,
  Timeline,
  Assignment,
  Balance,
  VerifiedUser,
  Info,
  Warning,
  Star,
  Launch,
  MenuBook,
  WorkOutline,
  Quiz,
  Timer,
  TrendingUp,
  Analytics,
  Speed,
  EmojiEvents,
  Psychology,
  Groups,
  Lightbulb,
  AutoAwesome,
  Settings,
  VolumeUp,
  VolumeOff,
  Subtitles,
  FastForward,
  Certificate as CertificateIcon,
  ExpandMore,
  Bookmark,
  Share,
  Download,
  Print,
  Refresh
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import { COLORS } from '../theme/colors';
import PresentacionModuloCero from '../components/PresentacionModuloCero';

function ModuloCeroPotenciado() {
  const navigate = useNavigate();
  const [activeStep, setActiveStep] = useState(0);
  const [completedSteps, setCompletedSteps] = useState(new Set());
  const [progress, setProgress] = useState(0);
  const [timeSpent, setTimeSpent] = useState(0);
  const [quizScores, setQuizScores] = useState({});
  const [showCertificate, setShowCertificate] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [currentQuiz, setCurrentQuiz] = useState(null);
  const [achievements, setAchievements] = useState(new Set());
  const [bookmarkedSteps, setBookmarkedSteps] = useState(new Set());
  
  const [userPreferences, setUserPreferences] = useState({
    autoplay: true,
    speed: 1,
    subtitles: false,
    darkMode: false,
    notifications: true
  });

  // Timer effect para tracking de tiempo
  useEffect(() => {
    const timer = setInterval(() => {
      setTimeSpent(prev => prev + 1);
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  // Update progress y logros
  useEffect(() => {
    const newProgress = (completedSteps.size / steps.length) * 100;
    setProgress(newProgress);
    
    // Sistema de logros
    if (completedSteps.size === 1 && !achievements.has('first_step')) {
      setAchievements(prev => new Set([...prev, 'first_step']));
      showAchievement('¬°Primer paso completado! üéØ');
    }
    
    if (completedSteps.size === steps.length && !achievements.has('completionist')) {
      setAchievements(prev => new Set([...prev, 'completionist']));
      setShowCertificate(true);
      showAchievement('¬°M√≥dulo completado! Certificado desbloqueado üèÜ');
    }
    
    if (timeSpent < 1800 && completedSteps.size === steps.length && !achievements.has('speed_runner')) {
      setAchievements(prev => new Set([...prev, 'speed_runner']));
      showAchievement('¬°Speed Runner! Completado en menos de 30 minutos ‚ö°');
    }
  }, [completedSteps, timeSpent]);

  // Datos del curso POTENCIADOS
  const courseData = {
    title: 'M√≥dulo Cero: Fundamentos Ley 21.719',
    subtitle: 'Protecci√≥n de Datos Personales en Chile',
    version: '2.0 - Edici√≥n Profesional',
    duration: '45 minutos',
    difficulty: 'Introductorio',
    features: [
      'üéØ Sistema de evaluaci√≥n inteligente',
      'üìä Tracking de progreso en tiempo real', 
      'üèÜ Certificaci√≥n autom√°tica',
      'üéÆ Experiencia interactiva gamificada',
      'üîç Quiz adaptativos por secci√≥n',
      '‚ö° Modo acelerado disponible',
      'üì± 100% responsive design',
      'üîñ Sistema de marcadores',
      'üìà Analytics de aprendizaje',
      'üéµ Narraci√≥n profesional mejorada'
    ],
    objectives: [
      'Comprender los fundamentos de la Ley 21.719',
      'Identificar los principios clave de protecci√≥n de datos',
      'Conocer los derechos de los titulares de datos',
      'Entender las obligaciones empresariales b√°sicas',
      'Dominar conceptos para RAT profesional',
      'Obtener certificaci√≥n de competencias'
    ],
    stats: {
      totalUsers: 1250,
      avgCompletion: 92,
      avgScore: 8.7,
      industryRecognition: '95%'
    }
  };

  const steps = [
    {
      id: 0,
      title: '¬øQu√© es la Ley 21.719?',
      icon: <Gavel />,
      color: COLORS.primary.main,
      estimatedTime: 8,
      difficulty: 'B√°sico',
      quiz: {
        questions: [
          {
            question: '¬øCu√°ndo entr√≥ en vigencia la Ley 21.719?',
            options: ['2022', '2024', '2023', '2025'],
            correct: 1,
            explanation: 'La Ley 21.719 entr√≥ en vigencia el 17 de febrero de 2024.'
          },
          {
            question: '¬øQu√© ley reemplaza la 21.719?',
            options: ['Ley 19.628', 'Ley 20.393', 'Ley 19.496', 'Ley 20.009'],
            correct: 0,
            explanation: 'La Ley 21.719 reemplaza y moderniza la antigua Ley 19.628.'
          }
        ]
      },
      content: {
        description: 'La Ley 21.719 sobre Protecci√≥n de Datos Personales es la nueva normativa chilena que regula el tratamiento de datos personales, inspirada en el Reglamento General de Protecci√≥n de Datos (GDPR) europeo.',
        keyPoints: [
          'Publicada el 17 de mayo de 2022',
          'Entrada en vigencia: 17 de febrero de 2024',
          'Reemplaza la antigua Ley 19.628',
          'Alineada con est√°ndares internacionales GDPR',
          'Crea la Agencia de Protecci√≥n de Datos Personales'
        ],
        impact: 'Esta ley moderniza el marco regulatorio chileno y establece nuevos est√°ndares de protecci√≥n para los datos personales de todos los ciudadanos.',
        realWorldExample: 'Una empresa de e-commerce ahora debe implementar sistemas de consentimiento expl√≠cito y permitir que usuarios descarguen todos sus datos personales en formato estructurado.'
      }
    },
    {
      id: 1,
      title: 'Principios Fundamentales',
      icon: <Balance />,
      color: COLORS.semantic.info.main,
      estimatedTime: 10,
      difficulty: 'Intermedio',
      quiz: {
        questions: [
          {
            question: '¬øCu√°l es el principio de minimizaci√≥n de datos?',
            options: [
              'Recopilar todos los datos posibles',
              'Solo recopilar datos necesarios para el prop√≥sito',
              'Eliminar datos cada mes',
              'Compartir pocos datos'
            ],
            correct: 1,
            explanation: 'El principio de minimizaci√≥n establece que solo se deben recopilar los datos estrictamente necesarios para cumplir con la finalidad informada.'
          }
        ]
      },
      content: {
        description: 'La ley se basa en principios fundamentales que gu√≠an todo tratamiento de datos personales.',
        keyPoints: [
          'Licitud y transparencia',
          'Limitaci√≥n de la finalidad',
          'Minimizaci√≥n de datos',
          'Exactitud',
          'Limitaci√≥n del plazo de conservaci√≥n',
          'Integridad y confidencialidad',
          'Responsabilidad proactiva'
        ],
        impact: 'Estos principios son el ADN de la protecci√≥n de datos y deben aplicarse en cada decisi√≥n empresarial.',
        realWorldExample: 'Un banco no puede usar datos de solicitud de cr√©dito para enviar publicidad de seguros sin consentimiento espec√≠fico.'
      }
    },
    {
      id: 2,
      title: 'Derechos de los Titulares',
      icon: <VerifiedUser />,
      color: COLORS.semantic.success.main,
      estimatedTime: 12,
      difficulty: 'Intermedio',
      quiz: {
        questions: [
          {
            question: '¬øQu√© es el derecho de portabilidad?',
            options: [
              'Cambiar de direcci√≥n',
              'Recibir datos en formato estructurado',
              'Trabajar desde casa',
              'Usar dispositivos m√≥viles'
            ],
            correct: 1,
            explanation: 'El derecho de portabilidad permite recibir los datos personales en formato estructurado y transmitirlos a otro responsable.'
          }
        ]
      },
      content: {
        description: 'Los titulares de datos tienen derechos reforzados que deben ser respetados por las organizaciones.',
        keyPoints: [
          'Derecho de acceso',
          'Derecho de rectificaci√≥n',
          'Derecho de supresi√≥n (derecho al olvido)',
          'Derecho de limitaci√≥n del tratamiento',
          'Derecho de oposici√≥n',
          'Derecho a la portabilidad',
          'Derecho a no ser objeto de decisiones automatizadas'
        ],
        impact: 'Estos derechos empoderan a las personas y obligan a las empresas a ser m√°s transparentes y responsables.',
        realWorldExample: 'Un usuario puede solicitar descargar todos sus datos de una red social y transferirlos a otra plataforma.'
      }
    },
    {
      id: 3,
      title: 'Obligaciones Empresariales',
      icon: <Business />,
      color: COLORS.semantic.warning.main,
      estimatedTime: 15,
      difficulty: 'Avanzado',
      quiz: {
        questions: [
          {
            question: '¬øQu√© es un RAT?',
            options: [
              'Registro de Actividades de Tratamiento',
              'Red de Acceso T√©cnico',
              'Reporte Anual de Tecnolog√≠a',
              'Registro de Aplicaciones Tecnol√≥gicas'
            ],
            correct: 0,
            explanation: 'RAT significa Registro de Actividades de Tratamiento, documento obligatorio que detalla todos los procesamientos de datos personales.'
          }
        ]
      },
      content: {
        description: 'Las empresas deben cumplir con obligaciones espec√≠ficas para el tratamiento de datos personales.',
        keyPoints: [
          'Implementar medidas t√©cnicas y organizativas',
          'Mantener un Registro de Actividades de Tratamiento (RAT)',
          'Realizar evaluaciones de impacto cuando sea necesario',
          'Notificar brechas de seguridad',
          'Designar un Delegado de Protecci√≥n de Datos (DPO) cuando corresponda',
          'Demostrar el cumplimiento (accountability)'
        ],
        impact: 'El incumplimiento puede resultar en multas de hasta 2-4% de la facturaci√≥n anual o hasta 20,000 UTM.',
        realWorldExample: 'Una startup debe crear su RAT antes de procesar datos de usuarios, documentando qu√© datos recopila, por qu√© y c√≥mo los protege.'
      }
    },
    {
      id: 4,
      title: 'Sanciones y Cumplimiento',
      icon: <Warning />,
      color: COLORS.semantic.error.main,
      estimatedTime: 8,
      difficulty: 'B√°sico',
      quiz: {
        questions: [
          {
            question: '¬øCu√°l es la multa m√°xima por infracciones grav√≠simas?',
            options: ['10,000 UTM', '20,000 UTM', '5,000 UTM', '50,000 UTM'],
            correct: 1,
            explanation: 'Las infracciones grav√≠simas pueden ser sancionadas con multas de hasta 20,000 UTM.'
          }
        ]
      },
      content: {
        description: 'La ley establece un r√©gimen de sanciones progresivo y proporcional.',
        keyPoints: [
          'Infracciones leves: hasta 1,000 UTM',
          'Infracciones graves: hasta 10,000 UTM', 
          'Infracciones grav√≠simas: hasta 20,000 UTM',
          'Para empresas grandes: hasta 2-4% de facturaci√≥n anual',
          'La Agencia puede imponer medidas correctivas',
          'Registro p√∫blico de sanciones'
        ],
        impact: 'Las multas son suficientemente altas para asegurar el cumplimiento empresarial.',
        realWorldExample: 'Una empresa grande que sufra una brecha masiva podr√≠a enfrentar multas millonarias si no cumpli√≥ con las medidas de seguridad requeridas.'
      }
    },
    {
      id: 5,
      title: 'Pr√≥ximos Pasos',
      icon: <Launch />,
      color: COLORS.primary.light,
      estimatedTime: 5,
      difficulty: 'B√°sico',
      quiz: {
        questions: [
          {
            question: '¬øCu√°l es el primer paso pr√°ctico despu√©s de este m√≥dulo?',
            options: [
              'Esperar nuevas regulaciones',
              'Crear el RAT de la organizaci√≥n',
              'Contratar una consultora',
              'Estudiar el GDPR europeo'
            ],
            correct: 1,
            explanation: 'El primer paso pr√°ctico es crear el Registro de Actividades de Tratamiento (RAT) de su organizaci√≥n usando nuestro sistema.'
          }
        ]
      },
      content: {
        description: '¬°Felicitaciones! Ya tienes las bases. Ahora es momento de aplicar este conocimiento.',
        keyPoints: [
          'Crear tu primer RAT usando nuestro sistema',
          'Identificar las bases legales para tus tratamientos',
          'Implementar medidas de seguridad b√°sicas',
          'Establecer procedimientos para ejercicio de derechos',
          'Planificar la capacitaci√≥n de tu equipo',
          'Considerar la necesidad de un DPO'
        ],
        impact: 'Con estas bases s√≥lidas, estar√°s preparado para implementar un programa de cumplimiento efectivo.',
        realWorldExample: 'Una PYME puede implementar cumplimiento b√°sico en 2-4 semanas siguiendo una metodolog√≠a estructurada.'
      }
    }
  ];

  // Funciones mejoradas
  const handleStepComplete = (stepId) => {
    setCompletedSteps(prev => new Set([...prev, stepId]));
    if (stepId === activeStep && stepId < steps.length - 1) {
      setActiveStep(stepId + 1);
    }
  };

  const showAchievement = (message) => {
    // Aqu√≠ ir√≠a l√≥gica para mostrar notificaci√≥n de logro
    console.log('üèÜ Achievement:', message);
  };

  const formatTime = (seconds) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    if (hours > 0) {
      return `${hours}h ${minutes}m ${secs}s`;
    } else if (minutes > 0) {
      return `${minutes}m ${secs}s`;
    } else {
      return `${secs}s`;
    }
  };

  const calculateOverallScore = () => {
    const scores = Object.values(quizScores);
    if (scores.length === 0) return 0;
    return Math.round(scores.reduce((a, b) => a + b, 0) / scores.length);
  };

  const handleQuizComplete = (stepId, score) => {
    setQuizScores(prev => ({ ...prev, [stepId]: score }));
    if (score >= 80 && !achievements.has('quiz_master')) {
      setAchievements(prev => new Set([...prev, 'quiz_master']));
      showAchievement('¬°Quiz Master! Puntuaci√≥n perfecta üß†');
    }
  };

  const toggleBookmark = (stepId) => {
    setBookmarkedSteps(prev => {
      const newSet = new Set(prev);
      if (newSet.has(stepId)) {
        newSet.delete(stepId);
      } else {
        newSet.add(stepId);
      }
      return newSet;
    });
  };

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      {/* Header Mejorado con Estad√≠sticas */}
      <Fade in timeout={800}>
        <Box sx={{ mb: 4 }}>
          <Card
            elevation={12}
            sx={{
              background: 'linear-gradient(135deg, #1e293b 0%, #334155 25%, #475569 50%, #64748b 75%, #94a3b8 100%)',
              color: 'white',
              position: 'relative',
              overflow: 'hidden',
              borderRadius: 3,
              boxShadow: '0 20px 40px rgba(0,0,0,0.3)'
            }}
          >
            {/* Elementos decorativos animados */}
            <Box
              sx={{
                position: 'absolute',
                top: -20,
                right: -20,
                width: 100,
                height: 100,
                borderRadius: '50%',
                background: 'rgba(255,255,255,0.1)',
                animation: 'pulse 2s infinite'
              }}
            />
            <Box
              sx={{
                position: 'absolute',
                bottom: -30,
                left: -30,
                width: 80,
                height: 80,
                borderRadius: '50%',
                background: 'rgba(255,255,255,0.05)',
                animation: 'pulse 3s infinite reverse'
              }}
            />

            <CardContent sx={{ p: 4 }}>
              <Grid container spacing={3} alignItems="center">
                <Grid item xs={12} md={8}>
                  <Box display="flex" alignItems="center" gap={2} mb={2}>
                    <Zoom in timeout={1200}>
                      <Badge 
                        badgeContent={`v${courseData.version.split(' ')[0]}`}
                        color="secondary"
                        sx={{
                          '& .MuiBadge-badge': {
                            backgroundColor: '#10b981',
                            color: 'white',
                            fontWeight: 'bold'
                          }
                        }}
                      >
                        <Avatar
                          sx={{
                            width: 80,
                            height: 80,
                            bgcolor: 'rgba(255,255,255,0.2)',
                            fontSize: 40,
                            animation: 'gentle-float 3s ease-in-out infinite',
                            '&:hover': {
                              transform: 'scale(1.05)',
                              transition: 'transform 0.3s ease'
                            },
                            boxShadow: '0 8px 25px rgba(0,0,0,0.3)'
                          }}
                        >
                          <AutoAwesome sx={{ fontSize: 48 }} />
                        </Avatar>
                      </Badge>
                    </Zoom>
                    <Slide direction="right" in timeout={1000}>
                      <Box>
                        <Typography 
                          variant="h3" 
                          fontWeight="bold"
                          sx={{
                            background: 'linear-gradient(45deg, #ffffff 30%, #f8fafc 50%, #ffffff 70%)',
                            backgroundSize: '200% auto',
                            animation: 'text-shimmer 2s ease-in-out infinite alternate',
                            backgroundClip: 'text',
                            WebkitBackgroundClip: 'text',
                            color: 'transparent'
                          }}
                        >
                          {courseData.title}
                        </Typography>
                        <Typography 
                          variant="h6" 
                          sx={{ 
                            opacity: 0.9,
                            animation: 'fade-in-up 1s ease-out 0.5s both'
                          }}
                        >
                          {courseData.subtitle}
                        </Typography>
                        <Typography 
                          variant="body2" 
                          sx={{ 
                            opacity: 0.7,
                            mt: 1,
                            fontStyle: 'italic'
                          }}
                        >
                          {courseData.version}
                        </Typography>
                      </Box>
                    </Slide>
                  </Box>
                  
                  {/* Chips de informaci√≥n mejorados */}
                  <Box display="flex" gap={1} flexWrap="wrap" mb={3}>
                    <Fade in timeout={1500}>
                      <Chip
                        icon={<Timer />}
                        label={`${formatTime(timeSpent)} / ${courseData.duration}`}
                        sx={{ 
                          bgcolor: 'rgba(16,185,129,0.2)', 
                          color: 'white',
                          border: '1px solid rgba(16,185,129,0.3)',
                          transition: 'all 0.3s ease',
                          '&:hover': {
                            bgcolor: 'rgba(16,185,129,0.3)',
                            transform: 'translateY(-2px)',
                            boxShadow: '0 4px 8px rgba(0,0,0,0.2)'
                          }
                        }}
                      />
                    </Fade>
                    <Fade in timeout={1700}>
                      <Chip
                        icon={<TrendingUp />}
                        label={`Progreso: ${Math.round(progress)}%`}
                        sx={{ 
                          bgcolor: 'rgba(59,130,246,0.2)', 
                          color: 'white',
                          border: '1px solid rgba(59,130,246,0.3)'
                        }}
                      />
                    </Fade>
                    <Fade in timeout={1900}>
                      <Chip
                        icon={<EmojiEvents />}
                        label={`Logros: ${achievements.size}/10`}
                        sx={{ 
                          bgcolor: 'rgba(245,158,11,0.2)', 
                          color: 'white',
                          border: '1px solid rgba(245,158,11,0.3)'
                        }}
                      />
                    </Fade>
                    <Fade in timeout={2100}>
                      <Chip
                        icon={<Analytics />}
                        label={`Score: ${calculateOverallScore()}/100`}
                        sx={{ 
                          bgcolor: 'rgba(168,85,247,0.2)', 
                          color: 'white',
                          border: '1px solid rgba(168,85,247,0.3)'
                        }}
                      />
                    </Fade>
                  </Box>

                  {/* Barra de progreso mejorada */}
                  <Box sx={{ mb: 2 }}>
                    <Box display="flex" justifyContent="space-between" mb={1}>
                      <Typography variant="body2" sx={{ opacity: 0.8 }}>
                        Progreso General
                      </Typography>
                      <Typography variant="body2" sx={{ opacity: 0.8 }}>
                        {completedSteps.size}/{steps.length} completados
                      </Typography>
                    </Box>
                    <LinearProgress 
                      variant="determinate" 
                      value={progress}
                      sx={{
                        height: 8,
                        borderRadius: 4,
                        backgroundColor: 'rgba(255,255,255,0.2)',
                        '& .MuiLinearProgress-bar': {
                          borderRadius: 4,
                          background: 'linear-gradient(90deg, #10b981 0%, #059669 100%)',
                          animation: progress > 0 ? 'progress-flow 2s ease-in-out infinite' : 'none'
                        }
                      }}
                    />
                  </Box>
                </Grid>
                
                {/* Panel de estad√≠sticas */}
                <Grid item xs={12} md={4}>
                  <Fade in timeout={2000}>
                    <Box 
                      sx={{ 
                        textAlign: 'center',
                        p: 3,
                        bgcolor: 'rgba(255,255,255,0.1)',
                        borderRadius: 2,
                        backdropFilter: 'blur(10px)'
                      }}
                    >
                      <Typography variant="h6" gutterBottom>
                        üìä Estad√≠sticas del Curso
                      </Typography>
                      <Grid container spacing={2}>
                        <Grid item xs={6}>
                          <Typography variant="h4" color="primary.main">
                            {courseData.stats.totalUsers.toLocaleString()}
                          </Typography>
                          <Typography variant="caption">
                            Usuarios Capacitados
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="h4" color="success.main">
                            {courseData.stats.avgCompletion}%
                          </Typography>
                          <Typography variant="caption">
                            Tasa de Completitud
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="h4" color="warning.main">
                            {courseData.stats.avgScore}
                          </Typography>
                          <Typography variant="caption">
                            Score Promedio
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="h4" color="info.main">
                            {courseData.stats.industryRecognition}
                          </Typography>
                          <Typography variant="caption">
                            Reconocimiento
                          </Typography>
                        </Grid>
                      </Grid>
                    </Box>
                  </Fade>
                </Grid>
              </Grid>
              
              {/* Botones de acci√≥n mejorados */}
              <Box display="flex" gap={2} mt={3} flexWrap="wrap">
                <Button
                  variant="contained"
                  size="large"
                  startIcon={<Settings />}
                  onClick={() => setShowSettings(true)}
                  sx={{
                    bgcolor: 'rgba(255,255,255,0.2)',
                    backdropFilter: 'blur(10px)',
                    border: '1px solid rgba(255,255,255,0.3)',
                    '&:hover': {
                      bgcolor: 'rgba(255,255,255,0.3)'
                    }
                  }}
                >
                  Configuraci√≥n
                </Button>
                <Button
                  variant="outlined"
                  size="large"
                  startIcon={<Share />}
                  sx={{
                    borderColor: 'rgba(255,255,255,0.3)',
                    color: 'white',
                    '&:hover': {
                      borderColor: 'white',
                      bgcolor: 'rgba(255,255,255,0.1)'
                    }
                  }}
                >
                  Compartir
                </Button>
                <Button
                  variant="outlined"
                  size="large"
                  startIcon={<Download />}
                  sx={{
                    borderColor: 'rgba(255,255,255,0.3)',
                    color: 'white',
                    '&:hover': {
                      borderColor: 'white',
                      bgcolor: 'rgba(255,255,255,0.1)'
                    }
                  }}
                >
                  Materiales
                </Button>
              </Box>
            </CardContent>
          </Card>
        </Box>
      </Fade>

      {/* Presentaci√≥n Integrada */}
      <PresentacionModuloCero autoStart={false} />

      {/* Stepper Mejorado con Funcionalidades Adicionales */}
      <Fade in timeout={1200}>
        <Card sx={{ mt: 4, p: 3 }}>
          <Typography variant="h5" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <MenuBook color="primary" />
            Contenido del M√≥dulo
            <Chip 
              size="small" 
              label={`${completedSteps.size}/${steps.length}`} 
              color={completedSteps.size === steps.length ? 'success' : 'primary'} 
            />
          </Typography>
          
          <Stepper activeStep={activeStep} orientation="vertical">
            {steps.map((step, index) => (
              <Step key={step.id}>
                <StepLabel
                  onClick={() => setActiveStep(index)}
                  sx={{ cursor: 'pointer' }}
                  icon={
                    <Box
                      sx={{
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        width: 40,
                        height: 40,
                        borderRadius: '50%',
                        bgcolor: completedSteps.has(step.id) ? 'success.main' : step.color,
                        color: 'white',
                        position: 'relative'
                      }}
                    >
                      {completedSteps.has(step.id) ? <CheckCircle /> : step.icon}
                      {bookmarkedSteps.has(step.id) && (
                        <Bookmark
                          sx={{
                            position: 'absolute',
                            top: -8,
                            right: -8,
                            fontSize: 16,
                            color: 'warning.main'
                          }}
                        />
                      )}
                    </Box>
                  }
                >
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flexWrap: 'wrap' }}>
                    <Typography variant="h6" component="span">
                      {step.title}
                    </Typography>
                    <Chip 
                      size="small" 
                      label={`${step.estimatedTime} min`}
                      variant="outlined"
                    />
                    <Chip 
                      size="small" 
                      label={step.difficulty}
                      color={
                        step.difficulty === 'B√°sico' ? 'success' :
                        step.difficulty === 'Intermedio' ? 'warning' : 'error'
                      }
                      variant="outlined"
                    />
                    <IconButton 
                      size="small"
                      onClick={(e) => {
                        e.stopPropagation();
                        toggleBookmark(step.id);
                      }}
                    >
                      <Bookmark 
                        sx={{ 
                          color: bookmarkedSteps.has(step.id) ? 'warning.main' : 'grey.400',
                          fontSize: 20 
                        }} 
                      />
                    </IconButton>
                  </Box>
                </StepLabel>
                <StepContent>
                  <Card sx={{ p: 3, bgcolor: 'grey.50' }}>
                    <Typography variant="body1" paragraph>
                      {step.content.description}
                    </Typography>
                    
                    {/* Ejemplo del mundo real */}
                    {step.content.realWorldExample && (
                      <Alert severity="info" sx={{ mb: 2 }}>
                        <Typography variant="body2">
                          <strong>üí° Ejemplo Pr√°ctico:</strong> {step.content.realWorldExample}
                        </Typography>
                      </Alert>
                    )}
                    
                    {/* Puntos clave expandibles */}
                    <Accordion sx={{ mb: 2 }}>
                      <AccordionSummary expandIcon={<ExpandMore />}>
                        <Typography variant="h6">üìã Puntos Clave</Typography>
                      </AccordionSummary>
                      <AccordionDetails>
                        <List>
                          {step.content.keyPoints.map((point, idx) => (
                            <ListItem key={idx}>
                              <ListItemIcon>
                                <CheckCircle color="success" />
                              </ListItemIcon>
                              <ListItemText primary={point} />
                            </ListItem>
                          ))}
                        </List>
                      </AccordionDetails>
                    </Accordion>
                    
                    {step.content.impact && (
                      <Alert severity="success" sx={{ mb: 2 }}>
                        <Typography variant="body2">
                          <strong>üéØ Impacto:</strong> {step.content.impact}
                        </Typography>
                      </Alert>
                    )}
                    
                    <Box display="flex" gap={2} mt={3} flexWrap="wrap">
                      <Button
                        variant="contained"
                        onClick={() => handleStepComplete(step.id)}
                        disabled={completedSteps.has(step.id)}
                        startIcon={completedSteps.has(step.id) ? <CheckCircle /> : <PlayArrow />}
                        color={completedSteps.has(step.id) ? 'success' : 'primary'}
                      >
                        {completedSteps.has(step.id) ? '‚úÖ Completado' : 'Marcar como Completado'}
                      </Button>
                      
                      {step.quiz && (
                        <Button
                          variant="outlined"
                          startIcon={<Quiz />}
                          onClick={() => setCurrentQuiz(step)}
                        >
                          üìù Quiz ({step.quiz.questions.length} preguntas)
                        </Button>
                      )}
                      
                      <Button
                        variant="text"
                        startIcon={<Info />}
                        size="small"
                      >
                        M√°s Informaci√≥n
                      </Button>
                    </Box>
                  </Card>
                </StepContent>
              </Step>
            ))}
          </Stepper>
        </Card>
      </Fade>

      {/* Panel de Logros */}
      {achievements.size > 0 && (
        <Fade in timeout={1500}>
          <Card sx={{ mt: 4, p: 3, bgcolor: 'success.50', border: '2px solid', borderColor: 'success.200' }}>
            <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <EmojiEvents color="warning" />
              üèÜ Logros Desbloqueados
            </Typography>
            <Box display="flex" gap={1} flexWrap="wrap">
              {[...achievements].map(achievement => (
                <Chip
                  key={achievement}
                  label={
                    achievement === 'first_step' ? 'üéØ Primer Paso' :
                    achievement === 'completionist' ? 'üèÜ Completista' :
                    achievement === 'speed_runner' ? '‚ö° Speed Runner' :
                    achievement === 'quiz_master' ? 'üß† Quiz Master' :
                    achievement
                  }
                  color="warning"
                  variant="filled"
                  sx={{ fontWeight: 'bold' }}
                />
              ))}
            </Box>
          </Card>
        </Fade>
      )}

      {/* Bot√≥n de acci√≥n principal mejorado */}
      <Zoom in timeout={2000}>
        <Box sx={{ textAlign: 'center', mt: 6 }}>
          <Card sx={{ p: 4, background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)', color: 'white' }}>
            <Typography variant="h4" gutterBottom fontWeight="bold">
              üöÄ ¬øListo para Crear tu Primer RAT?
            </Typography>
            <Typography variant="body1" sx={{ mb: 3, opacity: 0.9 }}>
              Aplica todo lo aprendido creando un Registro de Actividades de Tratamiento profesional
            </Typography>
            <Box display="flex" gap={2} justifyContent="center" flexWrap="wrap">
              <Button
                variant="contained"
                size="large"
                onClick={() => navigate('/rat-produccion')}
                sx={{
                  bgcolor: 'white',
                  color: 'success.main',
                  px: 4,
                  py: 1.5,
                  fontSize: '1.2rem',
                  fontWeight: 'bold',
                  '&:hover': {
                    bgcolor: 'grey.100',
                    transform: 'translateY(-2px)',
                    boxShadow: '0 8px 25px rgba(0,0,0,0.2)'
                  }
                }}
                startIcon={<WorkOutline />}
              >
                Crear RAT Profesional
              </Button>
              <Button
                variant="outlined"
                size="large" 
                onClick={() => setShowCertificate(true)}
                disabled={completedSteps.size < steps.length}
                sx={{
                  borderColor: 'white',
                  color: 'white',
                  px: 4,
                  py: 1.5,
                  fontSize: '1.1rem',
                  '&:hover': {
                    borderColor: 'white',
                    bgcolor: 'rgba(255,255,255,0.1)'
                  }
                }}
                startIcon={<CertificateIcon />}
              >
                {completedSteps.size < steps.length ? 
                  `Completa ${steps.length - completedSteps.size} pasos m√°s` : 
                  'Ver Certificado'
                }
              </Button>
            </Box>
          </Card>
        </Box>
      </Zoom>

      {/* Dialog de Configuraci√≥n */}
      <Dialog open={showSettings} onClose={() => setShowSettings(false)} maxWidth="md" fullWidth>
        <DialogTitle>‚öôÔ∏è Configuraci√≥n del M√≥dulo</DialogTitle>
        <DialogContent>
          <Box sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>üéµ Audio y Presentaci√≥n</Typography>
            <FormControlLabel
              control={
                <Switch
                  checked={userPreferences.autoplay}
                  onChange={(e) => setUserPreferences(prev => ({ ...prev, autoplay: e.target.checked }))}
                />
              }
              label="Reproducci√≥n autom√°tica de audio"
            />
            <FormControlLabel
              control={
                <Switch
                  checked={userPreferences.subtitles}
                  onChange={(e) => setUserPreferences(prev => ({ ...prev, subtitles: e.target.checked }))}
                />
              }
              label="Mostrar subt√≠tulos"
            />
            
            <Typography variant="body2" sx={{ mt: 2, mb: 1 }}>
              Velocidad de reproducci√≥n: {userPreferences.speed}x
            </Typography>
            <Slider
              value={userPreferences.speed}
              onChange={(e, value) => setUserPreferences(prev => ({ ...prev, speed: value }))}
              min={0.5}
              max={2}
              step={0.25}
              marks={[
                { value: 0.5, label: '0.5x' },
                { value: 1, label: '1x' },
                { value: 1.5, label: '1.5x' },
                { value: 2, label: '2x' }
              ]}
            />

            <Divider sx={{ my: 3 }} />
            
            <Typography variant="h6" gutterBottom>üé® Apariencia</Typography>
            <FormControlLabel
              control={
                <Switch
                  checked={userPreferences.darkMode}
                  onChange={(e) => setUserPreferences(prev => ({ ...prev, darkMode: e.target.checked }))}
                />
              }
              label="Modo oscuro"
            />
            <FormControlLabel
              control={
                <Switch
                  checked={userPreferences.notifications}
                  onChange={(e) => setUserPreferences(prev => ({ ...prev, notifications: e.target.checked }))}
                />
              }
              label="Notificaciones de logros"
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowSettings(false)}>Cerrar</Button>
          <Button variant="contained" onClick={() => setShowSettings(false)}>
            Guardar Configuraci√≥n
          </Button>
        </DialogActions>
      </Dialog>

      {/* Dialog de Certificado */}
      <Dialog open={showCertificate} onClose={() => setShowCertificate(false)} maxWidth="md" fullWidth>
        <DialogTitle sx={{ textAlign: 'center', pb: 1 }}>
          üèÜ ¬°Certificado de Completitud!
        </DialogTitle>
        <DialogContent>
          <Box sx={{ textAlign: 'center', p: 4 }}>
            <Typography variant="h4" gutterBottom>
              üéì Certificado de Competencia
            </Typography>
            <Typography variant="h5" color="primary" gutterBottom>
              Fundamentos de la Ley 21.719
            </Typography>
            <Typography variant="body1" sx={{ mb: 3 }}>
              Certificamos que has completado exitosamente el M√≥dulo Cero del Sistema LPDP
            </Typography>
            
            <Box sx={{ bgcolor: 'grey.100', p: 3, borderRadius: 2, mb: 3 }}>
              <Typography variant="h6" gutterBottom>üìä Estad√≠sticas de Completitud:</Typography>
              <Grid container spacing={2}>
                <Grid item xs={6}>
                  <Typography variant="body2">‚è±Ô∏è Tiempo Total:</Typography>
                  <Typography variant="h6">{formatTime(timeSpent)}</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body2">üéØ Score Promedio:</Typography>
                  <Typography variant="h6">{calculateOverallScore()}/100</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body2">üèÜ Logros:</Typography>
                  <Typography variant="h6">{achievements.size}/10</Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body2">üìö Progreso:</Typography>
                  <Typography variant="h6">100%</Typography>
                </Grid>
              </Grid>
            </Box>
            
            <Typography variant="body2" color="text.secondary">
              Fecha de emisi√≥n: {new Date().toLocaleDateString('es-CL')}
            </Typography>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button startIcon={<Download />}>Descargar PDF</Button>
          <Button startIcon={<Share />}>Compartir</Button>
          <Button variant="contained" onClick={() => setShowCertificate(false)}>
            Cerrar
          </Button>
        </DialogActions>
      </Dialog>

      {/* Dialog de Quiz */}
      {currentQuiz && (
        <Dialog open={!!currentQuiz} onClose={() => setCurrentQuiz(null)} maxWidth="md" fullWidth>
          <DialogTitle>
            üß† Quiz: {currentQuiz.title}
          </DialogTitle>
          <DialogContent>
            {/* Aqu√≠ ir√≠a el componente de Quiz */}
            <Typography>Quiz component will be rendered here</Typography>
          </DialogContent>
        </Dialog>
      )}

      {/* CSS personalizado para animaciones */}
      <style jsx global>{`
        @keyframes pulse {
          0%, 100% { transform: scale(1); opacity: 0.8; }
          50% { transform: scale(1.05); opacity: 0.6; }
        }
        
        @keyframes gentle-float {
          0%, 100% { transform: translateY(0px); }
          50% { transform: translateY(-10px); }
        }
        
        @keyframes text-shimmer {
          0% { background-position: 200% center; }
          100% { background-position: -200% center; }
        }
        
        @keyframes fade-in-up {
          from {
            opacity: 0;
            transform: translateY(30px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        @keyframes progress-flow {
          0% { background-position: 200% center; }
          100% { background-position: -200% center; }
        }
      `}</style>
    </Container>
  );
}

export default ModuloCeroPotenciado;