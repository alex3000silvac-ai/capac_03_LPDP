{
  "audit_id": "exhaustive_1756998575877",
  "started_at": "2025-09-04T15:09:35.882Z",
  "type": "EXHAUSTIVE_OFFLINE_ANALYSIS",
  "coverage": "100%",
  "modules_analyzed": {
    "/frontend/src/App.js": {
      "file_path": "/frontend/src/App.js",
      "lines_of_code": 409,
      "imports": [
        "react",
        "react-router-dom",
        "@mui/material/styles",
        "@mui/material/CssBaseline",
        "@mui/material",
        "./theme/darkTheme",
        "./contexts/AuthContext",
        "./contexts/TenantContext",
        "./components/LayoutSimple",
        "./components/auth/Login",
        "./pages/AdminPanel",
        "./components/admin/UserManagement",
        "./components/admin/IAAgentStatusPage",
        "./pages/GlosarioLPDP",
        "./components/ModuloEIPD",
        "./components/PreventiveAIController",
        "./components/GestionProveedores",
        "./components/RATFormWithCompliance",
        "./pages/DashboardDPO",
        "./pages/ProcesoCompleto",
        "./pages/GestionAsociaciones",
        "./pages/DPIAAlgoritmos",
        "./components/RATSystemProfessional",
        "./pages/RATListPage",
        "./pages/RATEditPage",
        "./pages/DPOApprovalQueue",
        "./components/ComplianceMetrics",
        "./pages/EIPDCreator",
        "./pages/EIPDListPage",
        "./pages/ProviderManager",
        "./components/AdminDashboard",
        "./components/RATSearchFilter",
        "./components/NotificationCenter",
        "./components/DPAGenerator",
        "./components/APIPartnersIntegration",
        "./components/ReportGenerator",
        "./components/EIPDTemplates",
        "./components/CalendarView",
        "./components/ImmutableAuditLog",
        "./components/DiagnosticCenter",
        "./pages/PaletaColores",
        "./pages/SistemaPrincipal"
      ],
      "exports": [
        "App"
      ],
      "functions": [
        {
          "name": "LoadingScreen",
          "type": "arrow",
          "parameters": [],
          "line": 50,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ProtectedRoute",
          "type": "arrow",
          "parameters": [
            "{ children",
            "requiredPermissions = []",
            "allowDemo = false }"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "AppContent",
          "type": "arrow",
          "parameters": [],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "TenantSelector",
          "type": "arrow",
          "parameters": [],
          "line": 335,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleTenantSelect",
          "type": "arrow",
          "parameters": [
            "tenant"
          ],
          "line": 339,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "App",
          "type": "arrow",
          "parameters": [],
          "line": 394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!user"
          ],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!currentTenant"
          ],
          "line": 76,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isRestricted() && !allowDemo"
          ],
          "line": 80,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "requiredPermissions && requiredPermissions.length > 0"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!hasPermission"
          ],
          "line": 89,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "user && currentTenant?.id"
          ],
          "line": 103,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!user"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!currentTenant && user?.tenant_id !== (process.env.REACT_APP_DEMO_TENANT_ID || 'demo')"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "LoadingScreen",
          "type": "component",
          "parameters": [],
          "line": 50,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [
        "LoadingScreen"
      ],
      "supabase_calls": [],
      "state_management": [
        "useEffect"
      ],
      "hooks_used": [
        "useEffect",
        "useAuth",
        "useTenant",
        "user",
        "users",
        "useEnter",
        "useLeave"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "@mui/material/styles",
        "@mui/material/CssBaseline",
        "@mui/material",
        "./theme/darkTheme",
        "./contexts/AuthContext",
        "./contexts/TenantContext",
        "./components/LayoutSimple",
        "./components/auth/Login",
        "./pages/AdminPanel",
        "./components/admin/UserManagement",
        "./components/admin/IAAgentStatusPage",
        "./pages/GlosarioLPDP",
        "./components/ModuloEIPD",
        "./components/PreventiveAIController",
        "./components/GestionProveedores",
        "./components/RATFormWithCompliance",
        "./pages/DashboardDPO",
        "./pages/ProcesoCompleto",
        "./pages/GestionAsociaciones",
        "./pages/DPIAAlgoritmos",
        "./components/RATSystemProfessional",
        "./pages/RATListPage",
        "./pages/RATEditPage",
        "./pages/DPOApprovalQueue",
        "./components/ComplianceMetrics",
        "./pages/EIPDCreator",
        "./pages/EIPDListPage",
        "./pages/ProviderManager",
        "./components/AdminDashboard",
        "./components/RATSearchFilter",
        "./components/NotificationCenter",
        "./components/DPAGenerator",
        "./components/APIPartnersIntegration",
        "./components/ReportGenerator",
        "./components/EIPDTemplates",
        "./components/CalendarView",
        "./components/ImmutableAuditLog",
        "./components/DiagnosticCenter",
        "./pages/PaletaColores",
        "./pages/SistemaPrincipal"
      ],
      "complexity_score": 10,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.117Z"
    },
    "/frontend/src/components/APIPartnersIntegration.js": {
      "file_path": "/frontend/src/components/APIPartnersIntegration.js",
      "lines_of_code": 664,
      "imports": [
        "react",
        "../config/supabaseClient",
        "../contexts/TenantContext",
        "../contexts/AuthContext",
        "./PageLayout"
      ],
      "exports": [
        "APIPartnersIntegration"
      ],
      "functions": [
        {
          "name": "APIPartnersIntegration",
          "type": "arrow",
          "parameters": [],
          "line": 62,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateUniqueId",
          "type": "arrow",
          "parameters": [],
          "line": 610,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateSecureSecret",
          "type": "arrow",
          "parameters": [],
          "line": 614,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateWebhookSecret",
          "type": "arrow",
          "parameters": [],
          "line": 620,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "user?.is_superuser"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 121,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "newPartner.webhook_url"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useTenant",
        "useAuth",
        "user",
        "user_id"
      ],
      "dependencies": [
        "react",
        "../config/supabaseClient",
        "../contexts/TenantContext",
        "../contexts/AuthContext",
        "./PageLayout"
      ],
      "complexity_score": 17,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.121Z"
    },
    "/frontend/src/components/AdminDashboard.js": {
      "file_path": "/frontend/src/components/AdminDashboard.js",
      "lines_of_code": 1234,
      "imports": [
        "react",
        "../config/supabaseClient",
        "react-router-dom"
      ],
      "exports": [
        "AdminDashboard"
      ],
      "functions": [
        {
          "name": "AdminDashboard",
          "type": "arrow",
          "parameters": [],
          "line": 60,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getEstadoColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRolColor",
          "type": "arrow",
          "parameters": [
            "rol"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getGravedadColor",
          "type": "arrow",
          "parameters": [
            "gravedad"
          ],
          "line": 164,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleAddHolding",
          "type": "arrow",
          "parameters": [],
          "line": 174,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleEditHolding",
          "type": "arrow",
          "parameters": [
            "holding"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleAddUser",
          "type": "arrow",
          "parameters": [],
          "line": 184,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "HoldingCard",
          "type": "arrow",
          "parameters": [
            "{ holding",
            "onEdit",
            "onView }"
          ],
          "line": 610,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "MetricasComplianceCard",
          "type": "arrow",
          "parameters": [
            "{ metricas",
            "holdings }"
          ],
          "line": 707,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "MetricasOperacionalesCard",
          "type": "arrow",
          "parameters": [
            "{ metricas }"
          ],
          "line": 765,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "MetricasTendenciasCard",
          "type": "arrow",
          "parameters": [],
          "line": 818,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "AlertCard",
          "type": "arrow",
          "parameters": [
            "{ alerta",
            "holdings }"
          ],
          "line": 869,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ConfiguracionSistema",
          "type": "arrow",
          "parameters": [
            "{ configuracion }"
          ],
          "line": 930,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "HoldingForm",
          "type": "arrow",
          "parameters": [
            "{ holding }"
          ],
          "line": 1116,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getEstadoColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 1202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRolColor",
          "type": "arrow",
          "parameters": [
            "rol"
          ],
          "line": 1213,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getGravedadColor",
          "type": "arrow",
          "parameters": [
            "gravedad"
          ],
          "line": 1224,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tenantId"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [
        {
          "file": "",
          "table": "activities",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 107,
          "context": "t, usuariosResult] = await Promise.all([\r         supabase.from('activities').select('id', { count: 'exact' }).eq('tenant_id', tenantId),\r         sup"
        },
        {
          "file": "",
          "table": "actividades_dpo",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 108,
          "context": "t: 'exact' }).eq('tenant_id', tenantId),\r         supabase.from('actividades_dpo').select('id', { count: 'exact' }).eq('tipo_actividad', 'EIPD'),"
        },
        {
          "file": "",
          "table": "usuarios",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 109,
          "context": "'exact' }).eq('tipo_actividad', 'EIPD'),\r         supabase.from('usuarios').select('id', { count: 'exact' }).eq('tenant_id', tenantId).eq('estado', 'A"
        }
      ],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useNavigate",
        "userDialog",
        "user"
      ],
      "dependencies": [
        "react",
        "../config/supabaseClient",
        "react-router-dom"
      ],
      "complexity_score": 3,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.125Z"
    },
    "/frontend/src/components/CalendarView.js": {
      "file_path": "/frontend/src/components/CalendarView.js",
      "lines_of_code": 849,
      "imports": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "exports": [
        "CalendarView"
      ],
      "functions": [
        {
          "name": "CalendarView",
          "type": "arrow",
          "parameters": [],
          "line": 58,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getViewStartDate",
          "type": "arrow",
          "parameters": [],
          "line": 167,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getViewEndDate",
          "type": "arrow",
          "parameters": [],
          "line": 182,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "eventsData"
          ],
          "line": 197,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "navegarMes",
          "type": "arrow",
          "parameters": [
            "direccion"
          ],
          "line": 224,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "filtrarEventos",
          "type": "arrow",
          "parameters": [],
          "line": 234,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getDaysInMonth",
          "type": "arrow",
          "parameters": [],
          "line": 243,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderCalendarHeader",
          "type": "arrow",
          "parameters": [],
          "line": 292,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStatsCards",
          "type": "arrow",
          "parameters": [],
          "line": 344,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderCalendarGrid",
          "type": "arrow",
          "parameters": [],
          "line": 415,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderUpcomingEvents",
          "type": "arrow",
          "parameters": [],
          "line": 554,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderEventDialog",
          "type": "arrow",
          "parameters": [],
          "line": 635,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 159,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "viewMode"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "viewMode"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "direccion === 'prev'"
          ],
          "line": 226,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = startingDayOfWeek - 1; i >= 0; i--"
          ],
          "line": 254,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let day = 1; day <= daysInMonth; day++"
          ],
          "line": 264,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let day = 1; day <= remainingDays; day++"
          ],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "recurso_tipo"
          ],
          "line": 714,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderCalendarHeader",
          "type": "component",
          "parameters": [],
          "line": 292,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStatsCards",
          "type": "component",
          "parameters": [],
          "line": 344,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderUpcomingEvents",
          "type": "component",
          "parameters": [],
          "line": 554,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderEventDialog",
          "type": "component",
          "parameters": [],
          "line": 635,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useNavigate",
        "useTenant"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "complexity_score": 19,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.129Z"
    },
    "/frontend/src/components/ComplianceDashboard.js": {
      "file_path": "/frontend/src/components/ComplianceDashboard.js",
      "lines_of_code": 449,
      "imports": [
        "react",
        "../hooks/useComplianceIntegration.js"
      ],
      "exports": [
        "ComplianceDashboard"
      ],
      "functions": [
        {
          "name": "ComplianceDashboard",
          "type": "arrow",
          "parameters": [
            "{ compact = false",
            "ratId = null }"
          ],
          "line": 45,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "toggleSection",
          "type": "arrow",
          "parameters": [
            "section"
          ],
          "line": 77,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getScoreColor",
          "type": "arrow",
          "parameters": [
            "score"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getHealthIcon",
          "type": "arrow",
          "parameters": [],
          "line": 90,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "MetricCard",
          "type": "arrow",
          "parameters": [
            "{ title",
            "value",
            "subtitle",
            "icon",
            "color",
            "alert = false }"
          ],
          "line": 377,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "CompactDashboard",
          "type": "arrow",
          "parameters": [
            "{ averageScore",
            "highRiskCount",
            "hasAlerts",
            "loading",
            "onExpand }"
          ],
          "line": 414,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "compact"
          ],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [
        "MetricCard",
        "CompactDashboard"
      ],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useComplianceDashboard",
        "useComplianceIntegration"
      ],
      "dependencies": [
        "react",
        "../hooks/useComplianceIntegration.js"
      ],
      "complexity_score": 6,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.133Z"
    },
    "/frontend/src/components/ComplianceMetrics.js": {
      "file_path": "/frontend/src/components/ComplianceMetrics.js",
      "lines_of_code": 807,
      "imports": [
        "react",
        "../config/supabaseClient",
        "../services/ratService",
        "../contexts/TenantContext"
      ],
      "exports": [
        "ComplianceMetrics"
      ],
      "functions": [
        {
          "name": "ComplianceMetrics",
          "type": "arrow",
          "parameters": [],
          "line": 44,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularMetricasGenerales",
          "type": "arrow",
          "parameters": [
            "ratsData"
          ],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getComplianceColor",
          "type": "arrow",
          "parameters": [
            "score"
          ],
          "line": 340,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskSeverityColor",
          "type": "arrow",
          "parameters": [
            "severity"
          ],
          "line": 346,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getPriorityColor",
          "type": "arrow",
          "parameters": [
            "priority"
          ],
          "line": 355,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 90,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratsCompletados.length > 0"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosSensiblesSinEIPD > 0"
          ],
          "line": 182,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "transferenciasInternacionales > 0"
          ],
          "line": 190,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "baseJuridicaUnclear > 0"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "plazosIndefinidos > 0"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 211,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratsError && ratsNoCertificados?.length > 0"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!dpoError && actividadesDPO?.length > 0"
          ],
          "line": 246,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!plazoError && sinPlazoConservacion?.length > 0"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "transferenciasConRiesgo.length > 0"
          ],
          "line": 282,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "severity"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "priority"
          ],
          "line": 356,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 364,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useTenant"
      ],
      "dependencies": [
        "react",
        "../config/supabaseClient",
        "../services/ratService",
        "../contexts/TenantContext"
      ],
      "complexity_score": 28,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.136Z"
    },
    "/frontend/src/components/DPAGenerator.js": {
      "file_path": "/frontend/src/components/DPAGenerator.js",
      "lines_of_code": 1202,
      "imports": [
        "react",
        "react-router-dom",
        "../contexts/TenantContext",
        "../config/supabaseClient"
      ],
      "exports": [
        "DPAGenerator"
      ],
      "functions": [
        {
          "name": "DPAGenerator",
          "type": "arrow",
          "parameters": [],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "seleccionarProveedor",
          "type": "arrow",
          "parameters": [
            "proveedor"
          ],
          "line": 268,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarContenidoDPA",
          "type": "arrow",
          "parameters": [],
          "line": 354,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "descargarDPA",
          "type": "arrow",
          "parameters": [],
          "line": 465,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStepContent",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 475,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderContratoInfo",
          "type": "arrow",
          "parameters": [],
          "line": 496,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderResponsableInfo",
          "type": "arrow",
          "parameters": [],
          "line": 581,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderEncargadoInfo",
          "type": "arrow",
          "parameters": [],
          "line": 657,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTratamientoInfo",
          "type": "arrow",
          "parameters": [],
          "line": 751,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderSeguridadInfo",
          "type": "arrow",
          "parameters": [],
          "line": 864,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTransferenciasDerechos",
          "type": "arrow",
          "parameters": [],
          "line": 907,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderGenerarDPA",
          "type": "arrow",
          "parameters": [],
          "line": 991,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTextFieldStyles",
          "type": "arrow",
          "parameters": [],
          "line": 1069,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 159,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentTenant"
          ],
          "line": 193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 227,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!dpaData.contrato.nombre_acuerdo"
          ],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!dpaData.responsable.nombre_empresa || !dpaData.encargado.nombre_empresa"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 327,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "dbError"
          ],
          "line": 333,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 476,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderContratoInfo",
          "type": "component",
          "parameters": [],
          "line": 496,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderResponsableInfo",
          "type": "component",
          "parameters": [],
          "line": 581,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderEncargadoInfo",
          "type": "component",
          "parameters": [],
          "line": 657,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTratamientoInfo",
          "type": "component",
          "parameters": [],
          "line": 751,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderSeguridadInfo",
          "type": "component",
          "parameters": [],
          "line": 864,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTransferenciasDerechos",
          "type": "component",
          "parameters": [],
          "line": 907,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderGenerarDPA",
          "type": "component",
          "parameters": [],
          "line": 991,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTextFieldStyles",
          "type": "component",
          "parameters": [],
          "line": 1069,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useNavigate",
        "useTenant",
        "used"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../contexts/TenantContext",
        "../config/supabaseClient"
      ],
      "complexity_score": 18,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.141Z"
    },
    "/frontend/src/components/DiagnosticCenter.js": {
      "file_path": "/frontend/src/components/DiagnosticCenter.js",
      "lines_of_code": 851,
      "imports": [
        "react",
        "../utils/frontendValidator",
        "../config/supabaseClient"
      ],
      "exports": [
        "DiagnosticCenter"
      ],
      "functions": [
        {
          "name": "DiagnosticCenter",
          "type": "arrow",
          "parameters": [],
          "line": 58,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupErrorCapture",
          "type": "arrow",
          "parameters": [],
          "line": 91,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "toggleContinuousTesting",
          "type": "arrow",
          "parameters": [],
          "line": 197,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusIcon",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusColor",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 228,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "intervalRef.current"
          ],
          "line": 85,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const module of criticalModules"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 134,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 175,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 190,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "continuousTesting"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "intervalRef.current"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status?.toLowerCase()"
          ],
          "line": 215,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status?.toLowerCase()"
          ],
          "line": 229,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useRef"
      ],
      "dependencies": [
        "react",
        "../utils/frontendValidator",
        "../config/supabaseClient"
      ],
      "complexity_score": 20,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.144Z"
    },
    "/frontend/src/components/EIPDTemplates.js": {
      "file_path": "/frontend/src/components/EIPDTemplates.js",
      "lines_of_code": 863,
      "imports": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "exports": [
        "EIPDTemplates"
      ],
      "functions": [
        {
          "name": "EIPDTemplates",
          "type": "arrow",
          "parameters": [],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "templatesData"
          ],
          "line": 327,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "usarTemplate",
          "type": "arrow",
          "parameters": [
            "template"
          ],
          "line": 340,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "filtrarTemplates",
          "type": "arrow",
          "parameters": [],
          "line": 381,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskChip",
          "type": "arrow",
          "parameters": [
            "nivel"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getIndustryInfo",
          "type": "arrow",
          "parameters": [
            "industryId"
          ],
          "line": 401,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTemplateCards",
          "type": "arrow",
          "parameters": [],
          "line": 405,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderPreviewDialog",
          "type": "arrow",
          "parameters": [],
          "line": 568,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 292,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 320,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 375,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "renderTemplateCards",
          "type": "component",
          "parameters": [],
          "line": 405,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderPreviewDialog",
          "type": "component",
          "parameters": [],
          "line": 568,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useNavigate",
        "useTenant"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "complexity_score": 9,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.148Z"
    },
    "/frontend/src/components/EmpresaDataManager.js": {
      "file_path": "/frontend/src/components/EmpresaDataManager.js",
      "lines_of_code": 464,
      "imports": [
        "react"
      ],
      "exports": [
        "EmpresaDataManager"
      ],
      "functions": [
        {
          "name": "EmpresaDataManager",
          "type": "arrow",
          "parameters": [
            "{ onDataUpdate",
            "existingData = {} }"
          ],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleSave",
          "type": "arrow",
          "parameters": [],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleAddPlataforma",
          "type": "arrow",
          "parameters": [
            "plataforma"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "onDataUpdate"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!nuevasPlataformas.find(p => p.nombre === plataforma.nombre)"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect"
      ],
      "dependencies": [
        "react"
      ],
      "complexity_score": 2,
      "potential_issues": [
        "localStorage_usage"
      ],
      "analyzed_at": "2025-09-04T15:09:36.151Z"
    },
    "/frontend/src/components/FundamentosTecnicos.js": {
      "file_path": "/frontend/src/components/FundamentosTecnicos.js",
      "lines_of_code": 404,
      "imports": [
        "react",
        "./PageLayout"
      ],
      "exports": [
        "FundamentosTecnicos"
      ],
      "functions": [
        {
          "name": "FundamentosTecnicos",
          "type": "arrow",
          "parameters": [],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleDownloadReport",
          "type": "arrow",
          "parameters": [],
          "line": 59,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState"
      ],
      "hooks_used": [
        "useState"
      ],
      "dependencies": [
        "react",
        "./PageLayout"
      ],
      "complexity_score": 0,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.153Z"
    },
    "/frontend/src/components/GestionProveedores.js": {
      "file_path": "/frontend/src/components/GestionProveedores.js",
      "lines_of_code": 1584,
      "imports": [
        "react",
        "react-router-dom",
        "../contexts/AuthContext",
        "../services/proveedoresService",
        "../config/supabaseClient"
      ],
      "exports": [
        "GestionProveedores"
      ],
      "functions": [
        {
          "name": "GestionProveedores",
          "type": "arrow",
          "parameters": [],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleAddProveedor",
          "type": "arrow",
          "parameters": [],
          "line": 318,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskColor",
          "type": "arrow",
          "parameters": [
            "riesgo"
          ],
          "line": 376,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateDPATemplate",
          "type": "arrow",
          "parameters": [
            "proveedor"
          ],
          "line": 385,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleDownloadDPATemplate",
          "type": "arrow",
          "parameters": [
            "tipo"
          ],
          "line": 417,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderProveedoresTab",
          "type": "arrow",
          "parameters": [],
          "line": 537,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDPATemplatesTab",
          "type": "arrow",
          "parameters": [],
          "line": 727,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 195,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "response.success && response.data.length > 0"
          ],
          "line": 209,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "retryResponse.success"
          ],
          "line": 219,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validacion.secure"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 291,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "user"
          ],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dialogType === 'add'"
          ],
          "line": 329,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "response.success"
          ],
          "line": 334,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dialogType === 'edit'"
          ],
          "line": 342,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "response.success"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 370,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "riesgo"
          ],
          "line": 377,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "plantilla"
          ],
          "line": 524,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderProveedoresTab",
          "type": "component",
          "parameters": [],
          "line": 537,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDPATemplatesTab",
          "type": "component",
          "parameters": [],
          "line": 727,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [
        {
          "file": "",
          "table": "proveedores",
          "operation": "insert",
          "parameters": "defaultProviders",
          "line": 193,
          "context": "e().toISOString()         }       ];        await supabase.from('proveedores').insert(defaultProviders);       // //console.log('✅ Proveedores predete"
        }
      ],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useSearchParams",
        "useAuth",
        "user"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../contexts/AuthContext",
        "../services/proveedoresService",
        "../config/supabaseClient"
      ],
      "complexity_score": 19,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.158Z"
    },
    "/frontend/src/components/ImmutableAuditLog.js": {
      "file_path": "/frontend/src/components/ImmutableAuditLog.js",
      "lines_of_code": 884,
      "imports": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "exports": [
        "ImmutableAuditLog"
      ],
      "functions": [
        {
          "name": "ImmutableAuditLog",
          "type": "arrow",
          "parameters": [],
          "line": 70,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateHash",
          "type": "arrow",
          "parameters": [
            "data"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "logsData"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "exportarAuditLogs",
          "type": "arrow",
          "parameters": [
            "formato"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getActionChip",
          "type": "arrow",
          "parameters": [
            "accion"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStatsCards",
          "type": "arrow",
          "parameters": [],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderAuditTable",
          "type": "arrow",
          "parameters": [],
          "line": 400,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderIntegrityPanel",
          "type": "arrow",
          "parameters": [],
          "line": 509,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDetailDialog",
          "type": "arrow",
          "parameters": [],
          "line": 603,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < str.length; i++"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 152,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filters.usuario !== 'TODOS'"
          ],
          "line": 177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filters.accion !== 'TODAS'"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filters.fechaInicio"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filters.fechaFin"
          ],
          "line": 186,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < auditLogs.length; i++"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStatsCards",
          "type": "component",
          "parameters": [],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderAuditTable",
          "type": "component",
          "parameters": [],
          "line": 400,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderIntegrityPanel",
          "type": "component",
          "parameters": [],
          "line": 509,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDetailDialog",
          "type": "component",
          "parameters": [],
          "line": 603,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useNavigate",
        "useTenant"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "complexity_score": 14,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.161Z"
    },
    "/frontend/src/components/Layout.js": {
      "file_path": "/frontend/src/components/Layout.js",
      "lines_of_code": 534,
      "imports": [
        "react",
        "react-router-dom",
        "../contexts/AuthContext"
      ],
      "exports": [
        "Layout"
      ],
      "functions": [
        {
          "name": "Layout",
          "type": "declaration",
          "parameters": [
            "{ children }"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleDrawerToggle",
          "type": "arrow",
          "parameters": [],
          "line": 132,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleNavigation",
          "type": "arrow",
          "parameters": [
            "path"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleLogoutClick",
          "type": "arrow",
          "parameters": [],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleLogoutConfirm",
          "type": "arrow",
          "parameters": [],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleLogoutCancel",
          "type": "arrow",
          "parameters": [],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "Layout",
          "type": "method",
          "parameters": [
            "{ children }"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isMobile"
          ],
          "line": 138,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState"
      ],
      "hooks_used": [
        "useState",
        "useNavigate",
        "useLocation",
        "useAuth",
        "useTheme",
        "useMediaQuery"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../contexts/AuthContext"
      ],
      "complexity_score": 1,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.164Z"
    },
    "/frontend/src/components/LayoutSimple.js": {
      "file_path": "/frontend/src/components/LayoutSimple.js",
      "lines_of_code": 307,
      "imports": [
        "react",
        "react-router-dom",
        "../contexts/AuthContext"
      ],
      "exports": [
        "LayoutSimple"
      ],
      "functions": [
        {
          "name": "LayoutSimple",
          "type": "declaration",
          "parameters": [
            "{ children }"
          ],
          "line": 32,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleMenu",
          "type": "arrow",
          "parameters": [
            "event"
          ],
          "line": 38,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleClose",
          "type": "arrow",
          "parameters": [],
          "line": 42,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleNavigation",
          "type": "arrow",
          "parameters": [
            "path"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleLogout",
          "type": "arrow",
          "parameters": [],
          "line": 51,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "NavigationButtons",
          "type": "arrow",
          "parameters": [
            "{ currentPath",
            "navigate }"
          ],
          "line": 217,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "LayoutSimple",
          "type": "method",
          "parameters": [
            "{ children }"
          ],
          "line": 32,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentPath === '/login' || currentPath.includes('/select-')"
          ],
          "line": 231,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState"
      ],
      "hooks_used": [
        "useState",
        "useNavigate",
        "useLocation",
        "useAuth"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../contexts/AuthContext"
      ],
      "complexity_score": 1,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.166Z"
    },
    "/frontend/src/components/ModuloEIPD.js": {
      "file_path": "/frontend/src/components/ModuloEIPD.js",
      "lines_of_code": 1208,
      "imports": [
        "react",
        "react-router-dom",
        "../contexts/AuthContext"
      ],
      "exports": [
        "ModuloEIPD"
      ],
      "functions": [
        {
          "name": "ModuloEIPD",
          "type": "arrow",
          "parameters": [],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleNext",
          "type": "arrow",
          "parameters": [],
          "line": 272,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleBack",
          "type": "arrow",
          "parameters": [],
          "line": 276,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularNivelRiesgo",
          "type": "arrow",
          "parameters": [],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "exportarEIPD",
          "type": "arrow",
          "parameters": [],
          "line": 289,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStepContent",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 419,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "esNuevo && ratOrigen"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "esEdicion && documentoId"
          ],
          "line": 184,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 420,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useSearchParams",
        "useAuth",
        "user"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../contexts/AuthContext"
      ],
      "complexity_score": 7,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.170Z"
    },
    "/frontend/src/components/NotificationCenter.js": {
      "file_path": "/frontend/src/components/NotificationCenter.js",
      "lines_of_code": 956,
      "imports": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "exports": [
        "NotificationCenter"
      ],
      "functions": [
        {
          "name": "NotificationCenter",
          "type": "arrow",
          "parameters": [],
          "line": 69,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "notificationsData"
          ],
          "line": 255,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "filtrarNotificaciones",
          "type": "arrow",
          "parameters": [],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getNotificationIcon",
          "type": "arrow",
          "parameters": [
            "tipo",
            "prioridad"
          ],
          "line": 335,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getPriorityChip",
          "type": "arrow",
          "parameters": [
            "prioridad"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "navigateToResource",
          "type": "arrow",
          "parameters": [
            "notification"
          ],
          "line": 359,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStatsCards",
          "type": "arrow",
          "parameters": [],
          "line": 382,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderNotificationsList",
          "type": "arrow",
          "parameters": [],
          "line": 466,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderSettingsTab",
          "type": "arrow",
          "parameters": [],
          "line": 631,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDetailDialog",
          "type": "arrow",
          "parameters": [],
          "line": 790,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 169,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 319,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "recurso_tipo"
          ],
          "line": 362,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStatsCards",
          "type": "component",
          "parameters": [],
          "line": 382,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderNotificationsList",
          "type": "component",
          "parameters": [],
          "line": 466,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderSettingsTab",
          "type": "component",
          "parameters": [],
          "line": 631,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDetailDialog",
          "type": "component",
          "parameters": [],
          "line": 790,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useNavigate",
        "useTenant"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "complexity_score": 18,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.174Z"
    },
    "/frontend/src/components/PageLayout.js": {
      "file_path": "/frontend/src/components/PageLayout.js",
      "lines_of_code": 78,
      "imports": [
        "react",
        "@mui/material"
      ],
      "exports": [
        "PageLayout"
      ],
      "functions": [],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "react",
        "@mui/material"
      ],
      "complexity_score": 0,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.176Z"
    },
    "/frontend/src/components/PresentacionModuloCero.js": {
      "file_path": "/frontend/src/components/PresentacionModuloCero.js",
      "lines_of_code": 205,
      "imports": [
        "react"
      ],
      "exports": [
        "PresentacionModuloCero"
      ],
      "functions": [
        {
          "name": "PresentacionModuloCero",
          "type": "arrow",
          "parameters": [
            "{ autoStart = false }"
          ],
          "line": 24,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleOpenPresentation",
          "type": "arrow",
          "parameters": [],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleClosePresentation",
          "type": "arrow",
          "parameters": [],
          "line": 31,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "openInNewWindow",
          "type": "arrow",
          "parameters": [],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!newWindow || newWindow.closed"
          ],
          "line": 42,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState"
      ],
      "hooks_used": [
        "useState"
      ],
      "dependencies": [
        "react"
      ],
      "complexity_score": 1,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.179Z"
    },
    "/frontend/src/components/PreventiveAIController.js": {
      "file_path": "/frontend/src/components/PreventiveAIController.js",
      "lines_of_code": 54,
      "imports": [
        "react",
        "../contexts/TenantContext",
        "../contexts/AuthContext",
        "../utils/preventiveAI",
        "../utils/logicAuditor"
      ],
      "exports": [
        "PreventiveAIController"
      ],
      "functions": [
        {
          "name": "PreventiveAIController",
          "type": "arrow",
          "parameters": [],
          "line": 8,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "initialAudit.summary.failed_rules > 0"
          ],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 37,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useEffect"
      ],
      "hooks_used": [
        "useEffect",
        "useTenant",
        "useAuth",
        "user"
      ],
      "dependencies": [
        "react",
        "../contexts/TenantContext",
        "../contexts/AuthContext",
        "../utils/preventiveAI",
        "../utils/logicAuditor"
      ],
      "complexity_score": 4,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.181Z"
    },
    "/frontend/src/components/ProcesoCompleto.js": {
      "file_path": "/frontend/src/components/ProcesoCompleto.js",
      "lines_of_code": 466,
      "imports": [
        "react"
      ],
      "exports": [
        "ProcesoCompleto"
      ],
      "functions": [
        {
          "name": "ProcesoCompleto",
          "type": "arrow",
          "parameters": [],
          "line": 45,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "iniciarCierre",
          "type": "arrow",
          "parameters": [],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getIconByType",
          "type": "arrow",
          "parameters": [
            "tipo"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "prev >= 4"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "tipo"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState"
      ],
      "hooks_used": [
        "useState"
      ],
      "dependencies": [
        "react"
      ],
      "complexity_score": 4,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.183Z"
    },
    "/frontend/src/components/ProviderManager.js": {
      "file_path": "/frontend/src/components/ProviderManager.js",
      "lines_of_code": 1219,
      "imports": [
        "react",
        "react-router-dom"
      ],
      "exports": [
        "ProviderManager"
      ],
      "functions": [
        {
          "name": "ProviderManager",
          "type": "arrow",
          "parameters": [],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTipoColor",
          "type": "arrow",
          "parameters": [
            "tipo"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getEstadoColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 226,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiesgoColor",
          "type": "arrow",
          "parameters": [
            "riesgo"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getDPAStatusColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 247,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleAddProvider",
          "type": "arrow",
          "parameters": [],
          "line": 257,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleEditProvider",
          "type": "arrow",
          "parameters": [
            "provider"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleViewDPA",
          "type": "arrow",
          "parameters": [
            "provider"
          ],
          "line": 267,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleAuditProvider",
          "type": "arrow",
          "parameters": [
            "provider"
          ],
          "line": 272,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiesgoColorHelper",
          "type": "arrow",
          "parameters": [
            "riesgo"
          ],
          "line": 886,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ProviderAuditCard",
          "type": "arrow",
          "parameters": [
            "{ provider",
            "onAudit }"
          ],
          "line": 897,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ProviderRiskCard",
          "type": "arrow",
          "parameters": [
            "{ provider }"
          ],
          "line": 996,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "DPAManagementView",
          "type": "arrow",
          "parameters": [
            "{ provider }"
          ],
          "line": 1081,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "provider.dpa_vigente.estado === 'VENCIDO'"
          ],
          "line": 999,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!provider.ultima_auditoria"
          ],
          "line": 1008,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "provider.incidentes.filter(i => !i.resuelto).length > 0"
          ],
          "line": 1017,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "provider.nivel_riesgo === 'CRITICO'"
          ],
          "line": 1026,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useNavigate",
        "used"
      ],
      "dependencies": [
        "react",
        "react-router-dom"
      ],
      "complexity_score": 6,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.187Z"
    },
    "/frontend/src/components/RATEditPage.js": {
      "file_path": "/frontend/src/components/RATEditPage.js",
      "lines_of_code": 1566,
      "imports": [
        "react",
        "../config/supabaseClient",
        "../hooks/useAuth",
        "../utils/preventiveAI",
        "react-router-dom"
      ],
      "exports": [
        "RATEditPage"
      ],
      "functions": [
        {
          "name": "RATEditPage",
          "type": "arrow",
          "parameters": [],
          "line": 59,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleFieldChange",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 181,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleArrayFieldAdd",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 197,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleArrayFieldRemove",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateStep",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleNext",
          "type": "arrow",
          "parameters": [],
          "line": 268,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleBack",
          "type": "arrow",
          "parameters": [],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "DataTypesSelector",
          "type": "arrow",
          "parameters": [
            "{ selectedTypes",
            "onTypesChange",
            "error }"
          ],
          "line": 992,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "toggleTipo",
          "type": "arrow",
          "parameters": [
            "tipo"
          ],
          "line": 1006,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "RecipientsSection",
          "type": "arrow",
          "parameters": [
            "{ rat",
            "onFieldChange",
            "onArrayAdd",
            "onArrayRemove",
            "validationErrors }"
          ],
          "line": 1051,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "InternationalTransfersSection",
          "type": "arrow",
          "parameters": [
            "{ rat",
            "onFieldChange",
            "onArrayAdd",
            "onArrayRemove }"
          ],
          "line": 1179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "SecurityMeasuresSection",
          "type": "arrow",
          "parameters": [
            "{ rat",
            "onArrayAdd",
            "onArrayRemove",
            "validationErrors }"
          ],
          "line": 1248,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "CategoriasDataSelector",
          "type": "arrow",
          "parameters": [
            "{ categoriasData",
            "onCategoriasChange",
            "error }"
          ],
          "line": 1386,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleCategoryToggle",
          "type": "arrow",
          "parameters": [
            "categoria",
            "subcategoria",
            "valor"
          ],
          "line": 1387,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isSelected",
          "type": "arrow",
          "parameters": [
            "categoria",
            "subcategoria",
            "valor"
          ],
          "line": 1408,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratId && ratId !== 'new'"
          ],
          "line": 125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validationErrors[field]"
          ],
          "line": 188,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && !rat[field].includes(value)"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 216,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.base_licitud === 'interes_legitimo' && !rat.base_legal"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!hasAnyCategory"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rat.destinatarios_internos || rat.destinatarios_internos.length === 0"
          ],
          "line": 248,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rat.medidas_seguridad_tecnicas || rat.medidas_seguridad_tecnicas.length === 0"
          ],
          "line": 258,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validateStep(activeStep)"
          ],
          "line": 269,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "preventiveCheck.alerts && Array.isArray(preventiveCheck.alerts) && preventiveCheck.alerts.length > 0"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "criticalAlerts.length > 0"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "warnings.length > 0"
          ],
          "line": 314,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!confirmContinue"
          ],
          "line": 317,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rat.nombre_actividad || !rat.finalidad_principal || !rat.area_responsable"
          ],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratId && ratId !== 'new'"
          ],
          "line": 361,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!verification"
          ],
          "line": 404,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 413,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 421,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "selectedTypes.includes(tipo)"
          ],
          "line": 1007,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!newCategorias[categoria]"
          ],
          "line": 1390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!newCategorias[categoria][subcategoria]"
          ],
          "line": 1394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentValues.includes(valor)"
          ],
          "line": 1399,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useAuth",
        "useParams",
        "useNavigate",
        "user",
        "used"
      ],
      "dependencies": [
        "react",
        "../config/supabaseClient",
        "../hooks/useAuth",
        "../utils/preventiveAI",
        "react-router-dom"
      ],
      "complexity_score": 38,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.192Z"
    },
    "/frontend/src/components/RATFormWithCompliance.js": {
      "file_path": "/frontend/src/components/RATFormWithCompliance.js",
      "lines_of_code": 392,
      "imports": [
        "react",
        "../services/ratIntelligenceEngine"
      ],
      "exports": [
        "RATFormWithCompliance"
      ],
      "functions": [
        {
          "name": "RATFormWithCompliance",
          "type": "arrow",
          "parameters": [],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleInputChange",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 91,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleCategoriaDataChange",
          "type": "arrow",
          "parameters": [
            "categoria"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getAlertIcon",
          "type": "arrow",
          "parameters": [
            "severity"
          ],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getDocumentIcon",
          "type": "arrow",
          "parameters": [
            "tipo"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.nombre_actividad"
          ],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "alertasCriticas.length > 0"
          ],
          "line": 82,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "alertas.some(a => a.severity === 'error')"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "severity"
          ],
          "line": 120,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "tipo"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect"
      ],
      "dependencies": [
        "react",
        "../services/ratIntelligenceEngine"
      ],
      "complexity_score": 11,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.195Z"
    },
    "/frontend/src/components/RATListPage.js": {
      "file_path": "/frontend/src/components/RATListPage.js",
      "lines_of_code": 529,
      "imports": [
        "react",
        "react-router-dom"
      ],
      "exports": [
        "RATListPage",
        "const"
      ],
      "functions": [
        {
          "name": "RATListPage",
          "type": "arrow",
          "parameters": [],
          "line": 44,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getEstadoColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 85,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiesgoColor",
          "type": "arrow",
          "parameters": [
            "riesgo"
          ],
          "line": 96,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getEstadoIcon",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleEdit",
          "type": "arrow",
          "parameters": [
            "rat"
          ],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleView",
          "type": "arrow",
          "parameters": [
            "rat"
          ],
          "line": 121,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleDelete",
          "type": "arrow",
          "parameters": [
            "rat"
          ],
          "line": 125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "handleActionMenu",
          "type": "arrow",
          "parameters": [
            "event",
            "ratId"
          ],
          "line": 150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "closeActionMenu",
          "type": "arrow",
          "parameters": [],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 77,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useNavigate"
      ],
      "dependencies": [
        "react",
        "react-router-dom"
      ],
      "complexity_score": 7,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.197Z"
    },
    "/frontend/src/components/RATSearchFilter.js": {
      "file_path": "/frontend/src/components/RATSearchFilter.js",
      "lines_of_code": 758,
      "imports": [
        "react"
      ],
      "exports": [
        "RATSearchFilter"
      ],
      "functions": [
        {
          "name": "handleFilterChange",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 145,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleMultiSelectChange",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 152,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "clearAllFilters",
          "type": "arrow",
          "parameters": [],
          "line": 159,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "saveCurrentFilter",
          "type": "arrow",
          "parameters": [],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "loadSavedFilter",
          "type": "arrow",
          "parameters": [
            "savedFilter"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "deleteSavedFilter",
          "type": "arrow",
          "parameters": [
            "filterId"
          ],
          "line": 203,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getActiveFiltersCount",
          "type": "arrow",
          "parameters": [],
          "line": 209,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "exportFilters",
          "type": "arrow",
          "parameters": [],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "used"
      ],
      "dependencies": [
        "react"
      ],
      "complexity_score": 16,
      "potential_issues": [
        "localStorage_usage"
      ],
      "analyzed_at": "2025-09-04T15:09:36.200Z"
    },
    "/frontend/src/components/RATSystemProfessional.js": {
      "file_path": "/frontend/src/components/RATSystemProfessional.js",
      "lines_of_code": 3980,
      "imports": [
        "react",
        "react-router-dom",
        "../utils/preventiveAI",
        "../constants/estados",
        "../utils/supabaseErrorLogger",
        "@mui/material/styles",
        "../services/ratService",
        "../services/ratIntelligenceEngine",
        "../services/riskCalculationEngine",
        "../services/testBalancingEngine",
        "../services/categoryAnalysisEngine",
        "../services/specificCasesEngine",
        "../services/industryStandardsService",
        "./EmpresaDataManager",
        "./PageLayout",
        "../config/supabaseClient",
        "../contexts/TenantContext",
        "../contexts/AuthContext"
      ],
      "exports": [
        "RATSystemProfessional"
      ],
      "functions": [
        {
          "name": "RATSystemProfessional",
          "type": "arrow",
          "parameters": [],
          "line": 276,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "checkStepComplete",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 593,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleNext",
          "type": "arrow",
          "parameters": [],
          "line": 622,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleBack",
          "type": "arrow",
          "parameters": [],
          "line": 628,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "mostrarGestionEmpresa",
          "type": "arrow",
          "parameters": [],
          "line": 677,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "volverAInicio",
          "type": "arrow",
          "parameters": [],
          "line": 683,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "mapearCategorias",
          "type": "arrow",
          "parameters": [
            "rat"
          ],
          "line": 700,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validarDatosRATCompletos",
          "type": "arrow",
          "parameters": [
            "ratData",
            "tenant"
          ],
          "line": 862,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "PasoIdentificacion",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "setRatData }"
          ],
          "line": 1815,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validarRUT",
          "type": "arrow",
          "parameters": [
            "rut"
          ],
          "line": 1819,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "PasoCategorias",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "setRatData",
            "currentTenant",
            "setAlertas }"
          ],
          "line": 2122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleIdentificacion",
          "type": "arrow",
          "parameters": [
            "event"
          ],
          "line": 2125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleSensibles",
          "type": "arrow",
          "parameters": [
            "event"
          ],
          "line": 2155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskColor",
          "type": "arrow",
          "parameters": [
            "risk"
          ],
          "line": 2345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskIcon",
          "type": "arrow",
          "parameters": [
            "risk"
          ],
          "line": 2355,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSelectedCount",
          "type": "arrow",
          "parameters": [
            "categoryId"
          ],
          "line": 2365,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "PasoBaseLegal",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "setRatData }"
          ],
          "line": 2590,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleChange",
          "type": "arrow",
          "parameters": [
            "event"
          ],
          "line": 2591,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "PasoFinalidad",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "setRatData }"
          ],
          "line": 2931,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "PasoTransferencias",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "setRatData }"
          ],
          "line": 3218,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleDestinatarioChange",
          "type": "arrow",
          "parameters": [
            "area"
          ],
          "line": 3222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "PasoRevision",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "guardarRAT }"
          ],
          "line": 3564,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "RATViewComponent",
          "type": "arrow",
          "parameters": [
            "{ ratData }"
          ],
          "line": 3664,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tieneAlgunDato"
          ],
          "line": 345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 351,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "resultado.success"
          ],
          "line": 352,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 367,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 368,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 381,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentTenant"
          ],
          "line": 394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosYaIngresados"
          ],
          "line": 400,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosGuardados.success && datosGuardados.datos"
          ],
          "line": 411,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 413,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 445,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 454,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 456,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 480,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && ultimoRAT"
          ],
          "line": 485,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 558,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!datosYaIngresados"
          ],
          "line": 561,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "result.success && Array.isArray(result.data)"
          ],
          "line": 581,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 586,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 595,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 616,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentStep < steps.length - 1"
          ],
          "line": 623,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentStep > 0"
          ],
          "line": 629,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 667,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratToEdit"
          ],
          "line": 695,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.categoriasDatos"
          ],
          "line": 708,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categoriasDatos.identificacion)"
          ],
          "line": 709,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categoriasDatos.sensibles)"
          ],
          "line": 712,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.categorias_datos"
          ],
          "line": 718,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categorias_datos.identificacion)"
          ],
          "line": 719,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categorias_datos.sensibles)"
          ],
          "line": 722,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.categorias"
          ],
          "line": 728,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categorias.identificacion)"
          ],
          "line": 729,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categorias.sensibles)"
          ],
          "line": 732,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.datos_identificacion && Array.isArray(rat.datos_identificacion)"
          ],
          "line": 738,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.datos_sensibles && Array.isArray(rat.datos_sensibles)"
          ],
          "line": 741,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 781,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratToView"
          ],
          "line": 790,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 795,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "window.confirm('¿Está seguro de eliminar este RAT? Esta acción no se puede deshacer.')"
          ],
          "line": 802,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "result.success && Array.isArray(result.data)"
          ],
          "line": 807,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 813,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 823,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 853,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable?.nombre || ratData.responsable.nombre.trim().length === 0"
          ],
          "line": 867,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable?.email || ratData.responsable.email.trim().length === 0"
          ],
          "line": 873,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable?.razonSocial || ratData.responsable.razonSocial.trim().length === 0"
          ],
          "line": 879,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable?.rut || ratData.responsable.rut.trim().length === 0"
          ],
          "line": 885,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.nombreActividad || ratData.nombreActividad.trim().length === 0"
          ],
          "line": 892,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.finalidad || ratData.finalidad.trim().length === 0"
          ],
          "line": 898,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.baseLegal || ratData.baseLegal.trim().length === 0"
          ],
          "line": 904,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tieneCategorias"
          ],
          "line": 915,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tenant || !tenant.id"
          ],
          "line": 922,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!validacionResult.valido"
          ],
          "line": 942,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 944,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 969,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.baseLegal === 'interes_legitimo'"
          ],
          "line": 1033,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!testBalancing.resultado || testBalancing.resultado === 'DESFAVORABLE'"
          ],
          "line": 1038,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "casuisticasEspecificas.requiere_atencion_especial"
          ],
          "line": 1046,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "viewMode === 'edit'"
          ],
          "line": 1053,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "resultado && resultado.id"
          ],
          "line": 1059,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "viewMode !== 'edit' && ratData.categorias?.sensibles?.length > 0"
          ],
          "line": 1063,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const subcategoria of ratData.categorias.sensibles"
          ],
          "line": 1070,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 1074,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratCompleto.metadata.requiereEIPD || ratCompleto.metadata.requiereDPIA"
          ],
          "line": 1081,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!eipdError && eipdGuardado"
          ],
          "line": 1125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 1208,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 1210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "showEmpresaManager"
          ],
          "line": 1238,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "viewMode === 'view'"
          ],
          "line": 1263,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "viewMode === 'list' || (!isCreatingRAT && showRATList)"
          ],
          "line": 1287,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = cuerpo.length - 1; i >= 0; i--"
          ],
          "line": 1826,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rut.length > 8"
          ],
          "line": 1845,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!validarRUT(rut)"
          ],
          "line": 1846,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "duplicado"
          ],
          "line": 1854,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "event.target.checked"
          ],
          "line": 2131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 2150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "event.target.checked"
          ],
          "line": 2161,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentTenant?.id"
          ],
          "line": 2172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "analisis.alertas?.length > 0"
          ],
          "line": 2177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 2193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isArray",
          "type": "method",
          "parameters": [
            "ratData.categorias.sensibles)"
          ],
          "line": 2201,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "risk"
          ],
          "line": 2346,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "risk"
          ],
          "line": 2356,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoryId === 'sensibles'"
          ],
          "line": 2366,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "value"
          ],
          "line": 2595,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [
        "PasoFinalidad"
      ],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect",
        "useCallback"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useCallback",
        "useNavigate",
        "useTenant",
        "useAuth",
        "used",
        "user",
        "user_id",
        "useos"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../utils/preventiveAI",
        "../constants/estados",
        "../utils/supabaseErrorLogger",
        "@mui/material/styles",
        "../services/ratService",
        "../services/ratIntelligenceEngine",
        "../services/riskCalculationEngine",
        "../services/testBalancingEngine",
        "../services/categoryAnalysisEngine",
        "../services/specificCasesEngine",
        "../services/industryStandardsService",
        "./EmpresaDataManager",
        "./PageLayout",
        "../config/supabaseClient",
        "../contexts/TenantContext",
        "../contexts/AuthContext"
      ],
      "complexity_score": 111,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.214Z"
    },
    "/frontend/src/components/ReportGenerator.js": {
      "file_path": "/frontend/src/components/ReportGenerator.js",
      "lines_of_code": 624,
      "imports": [
        "react",
        "../config/supabaseClient",
        "../contexts/TenantContext",
        "../contexts/AuthContext",
        "./PageLayout"
      ],
      "exports": [
        "ReportGenerator"
      ],
      "functions": [
        {
          "name": "ReportGenerator",
          "type": "arrow",
          "parameters": [],
          "line": 48,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarCSVConsolidado",
          "type": "arrow",
          "parameters": [
            "reportData"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "reportConfig.incluirAuditoria"
          ],
          "line": 137,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "formato === 'pdf'"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "formato === 'excel'"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 185,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 278,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.categorias_datos"
          ],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(categorias)"
          ],
          "line": 344,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "e"
          ],
          "line": 353,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.transferencias_internacionales"
          ],
          "line": 364,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(transferencias)"
          ],
          "line": 370,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "e"
          ],
          "line": 379,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useTenant",
        "useAuth",
        "user"
      ],
      "dependencies": [
        "react",
        "../config/supabaseClient",
        "../contexts/TenantContext",
        "../contexts/AuthContext",
        "./PageLayout"
      ],
      "complexity_score": 25,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.217Z"
    },
    "/frontend/src/components/VideoAnimado.js": {
      "file_path": "/frontend/src/components/VideoAnimado.js",
      "lines_of_code": 303,
      "imports": [
        "react"
      ],
      "exports": [
        "VideoAnimado"
      ],
      "functions": [
        {
          "name": "handlePlayPause",
          "type": "arrow",
          "parameters": [],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleMuteToggle",
          "type": "arrow",
          "parameters": [],
          "line": 56,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleFrameClick",
          "type": "arrow",
          "parameters": [
            "frameIndex"
          ],
          "line": 60,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isPlaying && frames.length > 0"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "next === 0 && !loop"
          ],
          "line": 40,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!frames || frames.length === 0"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect"
      ],
      "dependencies": [
        "react"
      ],
      "complexity_score": 3,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.220Z"
    },
    "/frontend/src/components/__tests__/AdminDashboard.test.js": {
      "file_path": "/frontend/src/components/__tests__/AdminDashboard.test.js",
      "lines_of_code": 58,
      "imports": [
        "react",
        "@testing-library/react",
        "react-router-dom",
        "@mui/material/styles",
        "../AdminDashboard"
      ],
      "exports": [],
      "functions": [
        {
          "name": "TestWrapper",
          "type": "arrow",
          "parameters": [
            "{ children }"
          ],
          "line": 13,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [
        "TestWrapper"
      ],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "react",
        "@testing-library/react",
        "react-router-dom",
        "@mui/material/styles",
        "../AdminDashboard"
      ],
      "complexity_score": 0,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.222Z"
    },
    "/frontend/src/components/admin/AdminPanel.js": {
      "file_path": "/frontend/src/components/admin/AdminPanel.js",
      "lines_of_code": 213,
      "imports": [
        "react",
        "./AdminDashboard",
        "./TenantManagement",
        "./UserManagement",
        "./SystemAudit",
        "./SystemReports"
      ],
      "exports": [
        "AdminPanel"
      ],
      "functions": [
        {
          "name": "TabPanel",
          "type": "declaration",
          "parameters": [
            "{ children",
            "value",
            "index",
            "...other }"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "a11yProps",
          "type": "declaration",
          "parameters": [
            "index"
          ],
          "line": 51,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "AdminPanel",
          "type": "declaration",
          "parameters": [],
          "line": 58,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleTabChange",
          "type": "arrow",
          "parameters": [
            "event",
            "newValue"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSystemStatusColor",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 67,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSystemStatusText",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 76,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "TabPanel",
          "type": "method",
          "parameters": [
            "{ children",
            "value",
            "index",
            "...other }"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "a11yProps",
          "type": "method",
          "parameters": [
            "index"
          ],
          "line": 51,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "AdminPanel",
          "type": "method",
          "parameters": [],
          "line": 58,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status"
          ],
          "line": 77,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState"
      ],
      "hooks_used": [
        "useState"
      ],
      "dependencies": [
        "react",
        "./AdminDashboard",
        "./TenantManagement",
        "./UserManagement",
        "./SystemAudit",
        "./SystemReports"
      ],
      "complexity_score": 6,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.225Z"
    },
    "/frontend/src/components/admin/IAAgentStatusPage.js": {
      "file_path": "/frontend/src/components/admin/IAAgentStatusPage.js",
      "lines_of_code": 629,
      "imports": [
        "react",
        "../../contexts/AuthContext",
        "../../config/supabaseClient",
        "../../utils/iaAgentReporter"
      ],
      "exports": [
        "IAAgentStatusPage"
      ],
      "functions": [
        {
          "name": "IAAgentStatusPage",
          "type": "arrow",
          "parameters": [],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusColor",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 126,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusIcon",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!authLoading && user"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!authLoading && !user"
          ],
          "line": 57,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isAdmin"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!user"
          ],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "userProfile"
          ],
          "line": 94,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "dbError"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 107,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status?.toLowerCase()"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status?.toLowerCase()"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "authChecking"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!isAdmin"
          ],
          "line": 163,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading && !report"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useAuth",
        "user",
        "userProfile",
        "user_stats"
      ],
      "dependencies": [
        "react",
        "../../contexts/AuthContext",
        "../../config/supabaseClient",
        "../../utils/iaAgentReporter"
      ],
      "complexity_score": 20,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.228Z"
    },
    "/frontend/src/components/admin/UsageDashboard.js": {
      "file_path": "/frontend/src/components/admin/UsageDashboard.js",
      "lines_of_code": 319,
      "imports": [
        "react",
        "../../config/supabaseClient"
      ],
      "exports": [
        "UsageDashboard"
      ],
      "functions": [
        {
          "name": "UsageDashboard",
          "type": "arrow",
          "parameters": [],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getUtilizationColor",
          "type": "arrow",
          "parameters": [
            "percentage"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getUtilizationLabel",
          "type": "arrow",
          "parameters": [
            "percentage"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTotalStats",
          "type": "arrow",
          "parameters": [],
          "line": 100,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "usageError || limitsError"
          ],
          "line": 54,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "users"
      ],
      "dependencies": [
        "react",
        "../../config/supabaseClient"
      ],
      "complexity_score": 10,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.232Z"
    },
    "/frontend/src/components/admin/UserManagement.js": {
      "file_path": "/frontend/src/components/admin/UserManagement.js",
      "lines_of_code": 187,
      "imports": [
        "react",
        "../../config/supabaseClient"
      ],
      "exports": [
        "UserManagement"
      ],
      "functions": [
        {
          "name": "UserManagement",
          "type": "declaration",
          "parameters": [],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "UserManagement",
          "type": "method",
          "parameters": [],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 57,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 62,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 79,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "users",
        "user",
        "userData"
      ],
      "dependencies": [
        "react",
        "../../config/supabaseClient"
      ],
      "complexity_score": 5,
      "potential_issues": [
        "localStorage_usage"
      ],
      "analyzed_at": "2025-09-04T15:09:36.234Z"
    },
    "/frontend/src/components/auth/Login.js": {
      "file_path": "/frontend/src/components/auth/Login.js",
      "lines_of_code": 355,
      "imports": [
        "react",
        "@mui/icons-material",
        "../../contexts/AuthContext"
      ],
      "exports": [
        "Login"
      ],
      "functions": [
        {
          "name": "Login",
          "type": "arrow",
          "parameters": [],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleInputChange",
          "type": "arrow",
          "parameters": [
            "e"
          ],
          "line": 31,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!formData.email || !formData.password"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "err"
          ],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState"
      ],
      "hooks_used": [
        "useState",
        "useTheme",
        "useAuth",
        "used"
      ],
      "dependencies": [
        "react",
        "@mui/icons-material",
        "../../contexts/AuthContext"
      ],
      "complexity_score": 3,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.237Z"
    },
    "/frontend/src/config/industries.config.js": {
      "file_path": "/frontend/src/config/industries.config.js",
      "lines_of_code": 132,
      "imports": [],
      "exports": [
        "INDUSTRIES_CONFIG",
        "const",
        "const",
        "const",
        "const",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "getIndustryById",
          "type": "arrow",
          "parameters": [
            "id"
          ],
          "line": 108,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getIndustryRegulations",
          "type": "arrow",
          "parameters": [
            "industryId"
          ],
          "line": 112,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getIndustryRiskLevel",
          "type": "arrow",
          "parameters": [
            "industryId"
          ],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getIndustryRetention",
          "type": "arrow",
          "parameters": [
            "industryId"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "requiresEIPD",
          "type": "arrow",
          "parameters": [
            "industryId"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [],
      "complexity_score": 0,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.239Z"
    },
    "/frontend/src/config/supabaseClient.js": {
      "file_path": "/frontend/src/config/supabaseClient.js",
      "lines_of_code": 127,
      "imports": [
        "@supabase/supabase-js"
      ],
      "exports": [
        "supabase",
        "const",
        "const",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "supabaseWithTenant",
          "type": "arrow",
          "parameters": [
            "tenantId"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!supabaseUrl || !supabaseKey"
          ],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!supabaseUrl.includes('supabase.co')"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!supabaseKey.startsWith('eyJ') && !supabaseKey.startsWith('sb_publishable_')"
          ],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "user?.id"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && session"
          ],
          "line": 73,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "user",
        "user_sessions",
        "user_id"
      ],
      "dependencies": [
        "@supabase/supabase-js"
      ],
      "complexity_score": 10,
      "potential_issues": [
        "debug_statements",
        "localStorage_usage"
      ],
      "analyzed_at": "2025-09-04T15:09:36.242Z"
    },
    "/frontend/src/config.js": {
      "file_path": "/frontend/src/config.js",
      "lines_of_code": 5,
      "imports": [],
      "exports": [
        "const",
        "const"
      ],
      "functions": [],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [],
      "complexity_score": 0,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.243Z"
    },
    "/frontend/src/constants/estados.js": {
      "file_path": "/frontend/src/constants/estados.js",
      "lines_of_code": 122,
      "imports": [],
      "exports": [
        "const",
        "const",
        "const",
        "const",
        "const",
        "const",
        "const",
        "const",
        "const",
        "const",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "getRAT_EstadoLabel",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 80,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRAT_EstadoColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isRAT_EstadoValido",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 89,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "canRAT_TransitionTo",
          "type": "arrow",
          "parameters": [
            "estadoActual",
            "estadoDestino"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [],
      "complexity_score": 0,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.246Z"
    },
    "/frontend/src/contexts/AuthContext.js": {
      "file_path": "/frontend/src/contexts/AuthContext.js",
      "lines_of_code": 206,
      "imports": [
        "react",
        "../config/supabaseClient"
      ],
      "exports": [
        "AuthContext",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "useAuth",
          "type": "arrow",
          "parameters": [],
          "line": 9,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "AuthProvider",
          "type": "arrow",
          "parameters": [
            "{ children }"
          ],
          "line": 17,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "updateUser",
          "type": "arrow",
          "parameters": [
            "userData"
          ],
          "line": 163,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isAuthenticated",
          "type": "arrow",
          "parameters": [],
          "line": 167,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasPermission",
          "type": "arrow",
          "parameters": [
            "permission"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isRestricted",
          "type": "arrow",
          "parameters": [],
          "line": 177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!context"
          ],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "session?.user"
          ],
          "line": 31,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "session?.user"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect",
        "useContext"
      ],
      "hooks_used": [
        "useContext",
        "useState",
        "useEffect",
        "useAuth",
        "user",
        "userData",
        "username",
        "user_metadata"
      ],
      "dependencies": [
        "react",
        "../config/supabaseClient"
      ],
      "complexity_score": 10,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.248Z"
    },
    "/frontend/src/contexts/TenantContext.js": {
      "file_path": "/frontend/src/contexts/TenantContext.js",
      "lines_of_code": 332,
      "imports": [
        "react",
        "./AuthContext",
        "../services/ratService",
        "../config/supabaseClient"
      ],
      "exports": [
        "TenantContext",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "useTenant",
          "type": "arrow",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "TenantProvider",
          "type": "arrow",
          "parameters": [
            "{ children }"
          ],
          "line": 19,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!context"
          ],
          "line": 13,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!isAuthenticated || !user"
          ],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!data || data.length === 0"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 56,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!user?.id"
          ],
          "line": 67,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isAuthenticated && user"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tenants && tenants.length > 0"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "savedTenantResult.success && savedTenantResult.data"
          ],
          "line": 120,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!selectedTenant"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!isAuthenticated && user?.id"
          ],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "savedTenantResult.success && savedTenantResult.data"
          ],
          "line": 150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 211,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 228,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentTenant?.id === tenantId"
          ],
          "line": 239,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 247,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentTenant?.id === tenantId"
          ],
          "line": 271,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filteredTenants.length > 0"
          ],
          "line": 272,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "defaultOrg"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 290,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "user?.id"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 307,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect",
        "useContext"
      ],
      "hooks_used": [
        "useContext",
        "useState",
        "useEffect",
        "useAuth",
        "useTenant",
        "user",
        "user_id",
        "user_sessions"
      ],
      "dependencies": [
        "react",
        "./AuthContext",
        "../services/ratService",
        "../config/supabaseClient"
      ],
      "complexity_score": 36,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.251Z"
    },
    "/frontend/src/debug_rat_id.js": {
      "file_path": "/frontend/src/debug_rat_id.js",
      "lines_of_code": 78,
      "imports": [],
      "exports": [],
      "functions": [
        {
          "name": "testRatIdColumns",
          "type": "declaration",
          "parameters": [],
          "line": 6,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "testRatIdColumns",
          "type": "method",
          "parameters": [],
          "line": 6,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of tablesToTest"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 29,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.code === '42P01'"
          ],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.code === '42703'"
          ],
          "line": 32,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "err"
          ],
          "line": 42,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 59,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "err"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [],
      "complexity_score": 11,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.253Z"
    },
    "/frontend/src/hooks/useDataSync.js": {
      "file_path": "/frontend/src/hooks/useDataSync.js",
      "lines_of_code": 158,
      "imports": [
        "react",
        "../contexts/TenantContext",
        "../services/dataSync"
      ],
      "exports": [
        "useDataSync",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "useDataSync",
          "type": "arrow",
          "parameters": [
            "moduleName"
          ],
          "line": 6,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "useConsistentCounts",
          "type": "arrow",
          "parameters": [],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "changeType"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect",
        "useCallback"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useCallback",
        "useTenant",
        "useDataSync",
        "useConsistentCounts"
      ],
      "dependencies": [
        "react",
        "../contexts/TenantContext",
        "../services/dataSync"
      ],
      "complexity_score": 12,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.255Z"
    },
    "/frontend/src/index.js": {
      "file_path": "/frontend/src/index.js",
      "lines_of_code": 12,
      "imports": [
        "react",
        "react-dom/client",
        "./App"
      ],
      "exports": [],
      "functions": [],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "react",
        "react-dom/client",
        "./App"
      ],
      "complexity_score": 0,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.257Z"
    },
    "/frontend/src/pages/AdminDashboard.js": {
      "file_path": "/frontend/src/pages/AdminDashboard.js",
      "lines_of_code": 788,
      "imports": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../config/supabaseClient"
      ],
      "exports": [
        "AdminDashboard"
      ],
      "functions": [
        {
          "name": "AdminDashboard",
          "type": "arrow",
          "parameters": [],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTenantsTab",
          "type": "arrow",
          "parameters": [],
          "line": 288,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderUsersTab",
          "type": "arrow",
          "parameters": [],
          "line": 394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderAuditTab",
          "type": "arrow",
          "parameters": [],
          "line": 506,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 145,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 162,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 187,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 227,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 252,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 282,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTenantsTab",
          "type": "component",
          "parameters": [],
          "line": 288,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderUsersTab",
          "type": "component",
          "parameters": [],
          "line": 394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderAuditTab",
          "type": "component",
          "parameters": [],
          "line": 506,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useNavigate",
        "users",
        "userDialog",
        "usersData",
        "user"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../config/supabaseClient"
      ],
      "complexity_score": 24,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.261Z"
    },
    "/frontend/src/pages/AdminPanel.js": {
      "file_path": "/frontend/src/pages/AdminPanel.js",
      "lines_of_code": 1337,
      "imports": [
        "react",
        "../components/admin/IAAgentStatusPage"
      ],
      "exports": [
        "AdminPanel"
      ],
      "functions": [
        {
          "name": "AdminPanel",
          "type": "arrow",
          "parameters": [],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "resetFormOrg",
          "type": "arrow",
          "parameters": [],
          "line": 275,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "resetFormUser",
          "type": "arrow",
          "parameters": [],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "mostrarMensaje",
          "type": "arrow",
          "parameters": [
            "message",
            "severity"
          ],
          "line": 391,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getPlanChip",
          "type": "arrow",
          "parameters": [
            "plan"
          ],
          "line": 395,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRolChip",
          "type": "arrow",
          "parameters": [
            "rol"
          ],
          "line": 405,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "Dashboard",
          "type": "arrow",
          "parameters": [],
          "line": 416,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "OrganizacionesTab",
          "type": "arrow",
          "parameters": [],
          "line": 590,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "UsuariosTab",
          "type": "arrow",
          "parameters": [],
          "line": 712,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ConfiguracionTab",
          "type": "arrow",
          "parameters": [],
          "line": 830,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "NotificationSnackbar",
          "type": "arrow",
          "parameters": [
            "{ open",
            "autoHideDuration",
            "onClose",
            "children }"
          ],
          "line": 1331,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "orgActual.id"
          ],
          "line": 248,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 258,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 269,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!userActual.id && userActual.password !== userActual.confirmar_password"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "userActual.id"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 322,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 333,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 343,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 370,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 382,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "Dashboard",
          "type": "component",
          "parameters": [],
          "line": 416,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "OrganizacionesTab",
          "type": "component",
          "parameters": [],
          "line": 590,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "UsuariosTab",
          "type": "component",
          "parameters": [],
          "line": 712,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ConfiguracionTab",
          "type": "component",
          "parameters": [],
          "line": 830,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [
        "Dashboard",
        "OrganizacionesTab",
        "UsuariosTab",
        "ConfiguracionTab"
      ],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "userActual",
        "username",
        "usersData",
        "userId",
        "user"
      ],
      "dependencies": [
        "react",
        "../components/admin/IAAgentStatusPage"
      ],
      "complexity_score": 20,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.264Z"
    },
    "/frontend/src/pages/DPIAAlgoritmos.js": {
      "file_path": "/frontend/src/pages/DPIAAlgoritmos.js",
      "lines_of_code": 439,
      "imports": [
        "react",
        "react-router-dom"
      ],
      "exports": [
        "DPIAAlgoritmos"
      ],
      "functions": [
        {
          "name": "DPIAAlgoritmos",
          "type": "arrow",
          "parameters": [],
          "line": 42,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "preLlenarDesdeRAT",
          "type": "arrow",
          "parameters": [],
          "line": 74,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "cargarDPIA",
          "type": "arrow",
          "parameters": [],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleInputChange",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularProgreso",
          "type": "arrow",
          "parameters": [],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "enviarParaRevision",
          "type": "arrow",
          "parameters": [],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "esNuevo && ratId"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "documentoId"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dpiaData.progreso < 100"
          ],
          "line": 156,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useSearchParams"
      ],
      "dependencies": [
        "react",
        "react-router-dom"
      ],
      "complexity_score": 5,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.267Z"
    },
    "/frontend/src/pages/DPOApprovalQueue.js": {
      "file_path": "/frontend/src/pages/DPOApprovalQueue.js",
      "lines_of_code": 724,
      "imports": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../services/ratIntelligenceEngine",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "exports": [
        "DPOApprovalQueue"
      ],
      "functions": [
        {
          "name": "DPOApprovalQueue",
          "type": "arrow",
          "parameters": [],
          "line": 56,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculatePriority",
          "type": "arrow",
          "parameters": [
            "rat",
            "analysis",
            "daysSinceCreation"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "ratsData"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getPriorityChip",
          "type": "arrow",
          "parameters": [
            "priority"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskChip",
          "type": "arrow",
          "parameters": [
            "riskLevel"
          ],
          "line": 224,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTimeChip",
          "type": "arrow",
          "parameters": [
            "days"
          ],
          "line": 235,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "filtrarRATs",
          "type": "arrow",
          "parameters": [],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 126,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useNavigate",
        "useTenant"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../services/ratIntelligenceEngine",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "complexity_score": 13,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.270Z"
    },
    "/frontend/src/pages/Dashboard.js": {
      "file_path": "/frontend/src/pages/Dashboard.js",
      "lines_of_code": 194,
      "imports": [
        "react",
        "react-router-dom",
        "../contexts/AuthContext"
      ],
      "exports": [
        "Dashboard"
      ],
      "functions": [
        {
          "name": "Dashboard",
          "type": "declaration",
          "parameters": [],
          "line": 23,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "Dashboard",
          "type": "method",
          "parameters": [],
          "line": 23,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "useNavigate",
        "useAuth",
        "user",
        "username"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../contexts/AuthContext"
      ],
      "complexity_score": 0,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.272Z"
    },
    "/frontend/src/pages/DashboardDPO.js": {
      "file_path": "/frontend/src/pages/DashboardDPO.js",
      "lines_of_code": 221,
      "imports": [
        "react",
        "react-router-dom",
        "../config/supabaseClient",
        "../contexts/TenantContext",
        "../hooks/useDataSync",
        "@mui/material",
        "../components/PageLayout"
      ],
      "exports": [
        "DashboardDPO"
      ],
      "functions": [
        {
          "name": "DashboardDPO",
          "type": "arrow",
          "parameters": [],
          "line": 19,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useNavigate",
        "useTenant",
        "useDataSync"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../config/supabaseClient",
        "../contexts/TenantContext",
        "../hooks/useDataSync",
        "@mui/material",
        "../components/PageLayout"
      ],
      "complexity_score": 1,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.274Z"
    },
    "/frontend/src/pages/EIPDCreator.js": {
      "file_path": "/frontend/src/pages/EIPDCreator.js",
      "lines_of_code": 1205,
      "imports": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../services/ratIntelligenceEngine",
        "../contexts/TenantContext"
      ],
      "exports": [
        "EIPDCreator"
      ],
      "functions": [
        {
          "name": "EIPDCreator",
          "type": "arrow",
          "parameters": [],
          "line": 59,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluarNecesidadEIPD",
          "type": "arrow",
          "parameters": [],
          "line": 184,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularNivelRiesgo",
          "type": "arrow",
          "parameters": [],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStepContent",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 253,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderInformacionGeneral",
          "type": "arrow",
          "parameters": [],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderCriteriosNecesidad",
          "type": "arrow",
          "parameters": [],
          "line": 339,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDescripcionSistematica",
          "type": "arrow",
          "parameters": [],
          "line": 522,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderEvaluacionRiesgos",
          "type": "arrow",
          "parameters": [],
          "line": 610,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderNecesidadProporcionalidad",
          "type": "arrow",
          "parameters": [],
          "line": 750,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderMedidasMitigacion",
          "type": "arrow",
          "parameters": [],
          "line": 811,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderConclusiones",
          "type": "arrow",
          "parameters": [],
          "line": 928,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTextFieldStyles",
          "type": "arrow",
          "parameters": [],
          "line": 1031,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratId"
          ],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratId"
          ],
          "line": 234,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 245,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 254,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 1118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderInformacionGeneral",
          "type": "component",
          "parameters": [],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderCriteriosNecesidad",
          "type": "component",
          "parameters": [],
          "line": 339,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDescripcionSistematica",
          "type": "component",
          "parameters": [],
          "line": 522,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderEvaluacionRiesgos",
          "type": "component",
          "parameters": [],
          "line": 610,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderNecesidadProporcionalidad",
          "type": "component",
          "parameters": [],
          "line": 750,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderMedidasMitigacion",
          "type": "component",
          "parameters": [],
          "line": 811,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderConclusiones",
          "type": "component",
          "parameters": [],
          "line": 928,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTextFieldStyles",
          "type": "component",
          "parameters": [],
          "line": 1031,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useNavigate",
        "useParams",
        "useTenant",
        "used"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../services/ratIntelligenceEngine",
        "../contexts/TenantContext"
      ],
      "complexity_score": 16,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.278Z"
    },
    "/frontend/src/pages/EIPDListPage.js": {
      "file_path": "/frontend/src/pages/EIPDListPage.js",
      "lines_of_code": 345,
      "imports": [
        "react",
        "react-router-dom",
        "../constants/estados",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "exports": [
        "EIPDListPage"
      ],
      "functions": [
        {
          "name": "EIPDListPage",
          "type": "arrow",
          "parameters": [],
          "line": 36,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "eipdData"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskColor",
          "type": "arrow",
          "parameters": [
            "riesgo"
          ],
          "line": 114,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "descargarEIPD",
          "type": "arrow",
          "parameters": [
            "eipd"
          ],
          "line": 132,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 96,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "riesgo"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "estado"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useNavigate",
        "useTenant"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../constants/estados",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "complexity_score": 9,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.281Z"
    },
    "/frontend/src/pages/GestionAsociaciones.js": {
      "file_path": "/frontend/src/pages/GestionAsociaciones.js",
      "lines_of_code": 59,
      "imports": [
        "react",
        "react-router-dom",
        "@mui/material",
        "@mui/icons-material"
      ],
      "exports": [
        "GestionAsociaciones"
      ],
      "functions": [
        {
          "name": "GestionAsociaciones",
          "type": "arrow",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "useSearchParams"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "@mui/material",
        "@mui/icons-material"
      ],
      "complexity_score": 0,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.283Z"
    },
    "/frontend/src/pages/GlosarioLPDP.js": {
      "file_path": "/frontend/src/pages/GlosarioLPDP.js",
      "lines_of_code": 2578,
      "imports": [
        "react",
        "../components/PageLayout"
      ],
      "exports": [
        "GlosarioLPDP"
      ],
      "functions": [
        {
          "name": "GlosarioLPDP",
          "type": "arrow",
          "parameters": [],
          "line": 81,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleExpandTerm",
          "type": "arrow",
          "parameters": [
            "key"
          ],
          "line": 1874,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "copyToClipboard",
          "type": "arrow",
          "parameters": [
            "text"
          ],
          "line": 1878,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!termino || typeof termino !== 'object' || !termino.termino || !termino.definicion"
          ],
          "line": 1835,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!termino.categoria || !categorias[termino.categoria]"
          ],
          "line": 1857,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "selectedCategory === 'criticos'"
          ],
          "line": 1863,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "selectedCategory === 'novedades_chile'"
          ],
          "line": 1866,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState"
      ],
      "hooks_used": [
        "useState",
        "usencia"
      ],
      "dependencies": [
        "react",
        "../components/PageLayout"
      ],
      "complexity_score": 4,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.289Z"
    },
    "/frontend/src/pages/ModuloCero_SAFE.js": {
      "file_path": "/frontend/src/pages/ModuloCero_SAFE.js",
      "lines_of_code": 87,
      "imports": [
        "react",
        "@mui/material",
        "react-router-dom"
      ],
      "exports": [
        "ModuloCero"
      ],
      "functions": [
        {
          "name": "ModuloCero",
          "type": "declaration",
          "parameters": [],
          "line": 6,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ModuloCero",
          "type": "method",
          "parameters": [],
          "line": 6,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useEffect"
      ],
      "hooks_used": [
        "useNavigate",
        "useEffect"
      ],
      "dependencies": [
        "react",
        "@mui/material",
        "react-router-dom"
      ],
      "complexity_score": 0,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.291Z"
    },
    "/frontend/src/pages/PaletaColores.js": {
      "file_path": "/frontend/src/pages/PaletaColores.js",
      "lines_of_code": 323,
      "imports": [
        "react"
      ],
      "exports": [
        "PaletaColores"
      ],
      "functions": [
        {
          "name": "PaletaColores",
          "type": "arrow",
          "parameters": [],
          "line": 67,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "react"
      ],
      "complexity_score": 0,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.294Z"
    },
    "/frontend/src/pages/ProcesoCompleto.js": {
      "file_path": "/frontend/src/pages/ProcesoCompleto.js",
      "lines_of_code": 33,
      "imports": [
        "react",
        "@mui/material",
        "../components/ProcesoCompleto"
      ],
      "exports": [
        "ProcesoCompletoPage"
      ],
      "functions": [
        {
          "name": "ProcesoCompletoPage",
          "type": "arrow",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "react",
        "@mui/material",
        "../components/ProcesoCompleto"
      ],
      "complexity_score": 0,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.296Z"
    },
    "/frontend/src/pages/ProviderManager.js": {
      "file_path": "/frontend/src/pages/ProviderManager.js",
      "lines_of_code": 790,
      "imports": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "exports": [
        "ProviderManager"
      ],
      "functions": [
        {
          "name": "ProviderManager",
          "type": "arrow",
          "parameters": [],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "providersData"
          ],
          "line": 216,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskChip",
          "type": "arrow",
          "parameters": [
            "riskLevel"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusChip",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 273,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getContractStatusChip",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "filtrarProveedores",
          "type": "arrow",
          "parameters": [],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderProveedoresTab",
          "type": "arrow",
          "parameters": [],
          "line": 308,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderContratosTab",
          "type": "arrow",
          "parameters": [],
          "line": 453,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTransferenciasTab",
          "type": "arrow",
          "parameters": [],
          "line": 523,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluarRiesgoProveedor",
          "type": "arrow",
          "parameters": [
            "provider"
          ],
          "line": 599,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 159,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 209,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderProveedoresTab",
          "type": "component",
          "parameters": [],
          "line": 308,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderContratosTab",
          "type": "component",
          "parameters": [],
          "line": 453,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTransferenciasTab",
          "type": "component",
          "parameters": [],
          "line": 523,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useNavigate",
        "useTenant"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "complexity_score": 14,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.299Z"
    },
    "/frontend/src/pages/RATEditPage.js": {
      "file_path": "/frontend/src/pages/RATEditPage.js",
      "lines_of_code": 965,
      "imports": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../services/ratIntelligenceEngine"
      ],
      "exports": [
        "RATEditPage"
      ],
      "functions": [
        {
          "name": "RATEditPage",
          "type": "arrow",
          "parameters": [],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusChip",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 290,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStepContent",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 309,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderResponsableStep",
          "type": "arrow",
          "parameters": [],
          "line": 328,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderCategoriasDatosStep",
          "type": "arrow",
          "parameters": [],
          "line": 417,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderBaseJuridicaStep",
          "type": "arrow",
          "parameters": [],
          "line": 463,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderFinalidadStep",
          "type": "arrow",
          "parameters": [],
          "line": 499,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDestinatariosStep",
          "type": "arrow",
          "parameters": [],
          "line": 530,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderConfirmacionStep",
          "type": "arrow",
          "parameters": [],
          "line": 588,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTextFieldStyles",
          "type": "arrow",
          "parameters": [],
          "line": 709,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratExistente"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 145,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "JSON.stringify(ratData) === JSON.stringify(originalRATData)"
          ],
          "line": 158,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 249,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "analysisResults?.riskLevel === 'ALTO'"
          ],
          "line": 268,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 721,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderResponsableStep",
          "type": "component",
          "parameters": [],
          "line": 328,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderCategoriasDatosStep",
          "type": "component",
          "parameters": [],
          "line": 417,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderBaseJuridicaStep",
          "type": "component",
          "parameters": [],
          "line": 463,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderFinalidadStep",
          "type": "component",
          "parameters": [],
          "line": 499,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDestinatariosStep",
          "type": "component",
          "parameters": [],
          "line": 530,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderConfirmacionStep",
          "type": "component",
          "parameters": [],
          "line": 588,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTextFieldStyles",
          "type": "component",
          "parameters": [],
          "line": 709,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useParams",
        "useNavigate",
        "used"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../services/ratIntelligenceEngine"
      ],
      "complexity_score": 17,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.302Z"
    },
    "/frontend/src/pages/RATListPage.js": {
      "file_path": "/frontend/src/pages/RATListPage.js",
      "lines_of_code": 989,
      "imports": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../contexts/TenantContext",
        "../config/supabaseClient"
      ],
      "exports": [
        "RATListPage"
      ],
      "functions": [
        {
          "name": "RATListPage",
          "type": "arrow",
          "parameters": [],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "ratsData"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusChip",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskChip",
          "type": "arrow",
          "parameters": [
            "riskLevel"
          ],
          "line": 160,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "filtrarRATs",
          "type": "arrow",
          "parameters": [],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleEditRAT",
          "type": "arrow",
          "parameters": [
            "ratId"
          ],
          "line": 188,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "handleViewRAT",
          "type": "arrow",
          "parameters": [
            "ratId"
          ],
          "line": 192,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rats.length > 0"
          ],
          "line": 81,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "child",
          "type": "method",
          "parameters": [
            "even"
          ],
          "line": 325,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 483,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 521,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useNavigate",
        "useTenant",
        "used"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../services/ratService",
        "../contexts/TenantContext",
        "../config/supabaseClient"
      ],
      "complexity_score": 18,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.306Z"
    },
    "/frontend/src/pages/SistemaPrincipal.js": {
      "file_path": "/frontend/src/pages/SistemaPrincipal.js",
      "lines_of_code": 251,
      "imports": [
        "react",
        "react-router-dom",
        "../config/industries.config"
      ],
      "exports": [
        "SistemaPrincipal"
      ],
      "functions": [
        {
          "name": "SistemaPrincipal",
          "type": "arrow",
          "parameters": [],
          "line": 34,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState"
      ],
      "hooks_used": [
        "useState",
        "useNavigate"
      ],
      "dependencies": [
        "react",
        "react-router-dom",
        "../config/industries.config"
      ],
      "complexity_score": 0,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.309Z"
    },
    "/frontend/src/sdk/LPDPHubSDK.js": {
      "file_path": "/frontend/src/sdk/LPDPHubSDK.js",
      "lines_of_code": 583,
      "imports": [],
      "exports": [
        "LPDPHubSDK",
        " \n  RATEvaluation, \n  ComplianceDashboard, \n  EIPDocument, \n  DPAContract, \n  WebhookRegistration, \n  RegulatoryUpdate, \n  LPDPHubError \n"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "config = {}"
          ],
          "line": 8,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.apiKey"
          ],
          "line": 17,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.debug"
          ],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluateRAT",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 39,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "response.data.automation_triggers.length > 0"
          ],
          "line": 48,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 54,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getDashboard",
          "type": "method",
          "parameters": [
            "filters = {}"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 73,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "generateEIPD",
          "type": "method",
          "parameters": [
            "ratId",
            "options = {}"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 108,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "generateDPA",
          "type": "method",
          "parameters": [
            "ratId",
            "providerInfo",
            "options = {}"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "registerWebhook",
          "type": "method",
          "parameters": [
            "webhookUrl",
            "events = []",
            "secret = null"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getRegulatoryUpdates",
          "type": "method",
          "parameters": [
            "since = null"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "batchEvaluateRATs",
          "type": "method",
          "parameters": [
            "ratsData",
            "options = {}"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const batch of batches"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "batches.indexOf(batch) < batches.length - 1"
          ],
          "line": 220,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "healthCheck",
          "type": "method",
          "parameters": [],
          "line": 242,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "on",
          "type": "method",
          "parameters": [
            "event",
            "callback"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.eventListeners.has(event)"
          ],
          "line": 271,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "emit",
          "type": "method",
          "parameters": [
            "event",
            "data"
          ],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.eventListeners.has(event)"
          ],
          "line": 281,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "makeRequest",
          "type": "method",
          "parameters": [
            "method",
            "endpoint",
            "data = null"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data && (method === 'POST' || method === 'PUT')"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let attempt = 1; attempt <= this.retryAttempts; attempt++"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!response.success"
          ],
          "line": 317,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 323,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "attempt < this.retryAttempts && this.isRetryableError(error)"
          ],
          "line": 326,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "simulateHTTPCall",
          "type": "method",
          "parameters": [
            "method",
            "endpoint",
            "data"
          ],
          "line": 340,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "`${method} ${endpoint}`"
          ],
          "line": 348,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "normalizeRATData",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 380,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "normalizeProviderInfo",
          "type": "method",
          "parameters": [
            "providerInfo"
          ],
          "line": 393,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "buildQueryParams",
          "type": "method",
          "parameters": [
            "filters"
          ],
          "line": 403,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value !== undefined && value !== null"
          ],
          "line": 406,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "chunkArray",
          "type": "method",
          "parameters": [
            "array",
            "size"
          ],
          "line": 413,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < array.length; i += size"
          ],
          "line": 415,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isRetryableError",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 421,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateSecret",
          "type": "method",
          "parameters": [],
          "line": 426,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "sleep",
          "type": "method",
          "parameters": [
            "ms"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "log",
          "type": "method",
          "parameters": [
            "...args"
          ],
          "line": 434,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.debug"
          ],
          "line": 435,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logError",
          "type": "method",
          "parameters": [
            "...args"
          ],
          "line": 440,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 448,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isHighRisk",
          "type": "method",
          "parameters": [],
          "line": 459,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "requiresEIPD",
          "type": "method",
          "parameters": [],
          "line": 463,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "requiresDPA",
          "type": "method",
          "parameters": [],
          "line": 467,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getComplianceScore",
          "type": "method",
          "parameters": [],
          "line": 471,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 477,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getHealthStatus",
          "type": "method",
          "parameters": [],
          "line": 485,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTotalActivities",
          "type": "method",
          "parameters": [],
          "line": 489,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getAverageScore",
          "type": "method",
          "parameters": [],
          "line": 493,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 499,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isComplete",
          "type": "method",
          "parameters": [],
          "line": 508,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getNextRequiredAction",
          "type": "method",
          "parameters": [],
          "line": 512,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 518,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isReadyForSigning",
          "type": "method",
          "parameters": [],
          "line": 529,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRequiredActions",
          "type": "method",
          "parameters": [],
          "line": 533,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 539,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 548,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isHighImpact",
          "type": "method",
          "parameters": [],
          "line": 559,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "code",
            "message",
            "originalError = null"
          ],
          "line": 566,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "uses"
      ],
      "dependencies": [],
      "complexity_score": 41,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.312Z"
    },
    "/frontend/src/services/api.js": {
      "file_path": "/frontend/src/services/api.js",
      "lines_of_code": 321,
      "imports": [
        "../config/supabaseClient",
        "../utils/smartSupabaseClient"
      ],
      "exports": [
        "const",
        "const",
        "const",
        "const",
        "const",
        "const",
        "const",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "getInventario",
          "type": "method",
          "parameters": [],
          "line": 13,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 23,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "createItem",
          "type": "method",
          "parameters": [
            "item"
          ],
          "line": 29,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 40,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getUsuarios",
          "type": "method",
          "parameters": [],
          "line": 49,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 59,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getRoles",
          "type": "method",
          "parameters": [],
          "line": 65,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "getOrganizaciones",
          "type": "method",
          "parameters": [],
          "line": 76,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 80,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getDashboard",
          "type": "method",
          "parameters": [],
          "line": 85,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getConfiguracion",
          "type": "method",
          "parameters": [],
          "line": 97,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "getLogs",
          "type": "method",
          "parameters": [],
          "line": 101,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 105,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "actualizarOrganizacion",
          "type": "method",
          "parameters": [
            "id",
            "data"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearOrganizacion",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 114,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "desactivarOrganizacion",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "actualizarUsuario",
          "type": "method",
          "parameters": [
            "id",
            "data"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearUsuario",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 126,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "desactivarUsuario",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "resetPassword",
          "type": "method",
          "parameters": [
            "userId"
          ],
          "line": 134,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "actualizarConfiguracion",
          "type": "method",
          "parameters": [
            "config"
          ],
          "line": 138,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearRespaldo",
          "type": "method",
          "parameters": [],
          "line": 142,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getOrganizaciones",
          "type": "method",
          "parameters": [],
          "line": 152,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getUsuarios",
          "type": "method",
          "parameters": [],
          "line": 189,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getDashboard",
          "type": "method",
          "parameters": [],
          "line": 205,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getConfiguracion",
          "type": "method",
          "parameters": [],
          "line": 218,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getLogs",
          "type": "method",
          "parameters": [
            "filtros = {}"
          ],
          "line": 236,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "actualizarOrganizacion",
          "type": "method",
          "parameters": [
            "id",
            "data"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearOrganizacion",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 261,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "desactivarOrganizacion",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 266,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "actualizarUsuario",
          "type": "method",
          "parameters": [
            "id",
            "data"
          ],
          "line": 271,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearUsuario",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 276,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "desactivarUsuario",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 281,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "resetPassword",
          "type": "method",
          "parameters": [
            "userId"
          ],
          "line": 286,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "actualizarConfiguracion",
          "type": "method",
          "parameters": [
            "config"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearRespaldo",
          "type": "method",
          "parameters": [],
          "line": 299,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [
        {
          "file": "",
          "table": "organizaciones",
          "operation": "select",
          "parameters": "'*'",
          "line": 78,
          "context": "{\r     try {\r       const { data, error } = await supabase.from('organizaciones').select('*');\r       return { success: true, data: data || [] };"
        },
        {
          "file": "",
          "table": "agent_activity_log",
          "operation": "select",
          "parameters": "'*'",
          "line": 103,
          "context": "{\r     try {\r       const { data, error } = await supabase.from('agent_activity_log').select('*').limit(100);\r       return { success: true, data: dat"
        }
      ],
      "state_management": [],
      "hooks_used": [
        "user",
        "userId",
        "username"
      ],
      "dependencies": [
        "../config/supabaseClient",
        "../utils/smartSupabaseClient"
      ],
      "complexity_score": 15,
      "potential_issues": [
        "debug_statements",
        "localStorage_usage"
      ],
      "analyzed_at": "2025-09-04T15:09:36.315Z"
    },
    "/frontend/src/services/categoryAnalysisEngine.js": {
      "file_path": "/frontend/src/services/categoryAnalysisEngine.js",
      "lines_of_code": 435,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "new"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analizarCategoriaSeleccionada",
          "type": "method",
          "parameters": [
            "categoria",
            "subcategoria",
            "ratData",
            "tenantId"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "categoria"
          ],
          "line": 116,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.id"
          ],
          "line": 138,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 146,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analizarDatosSalud",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "resultado"
          ],
          "line": 158,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!esAutorizado"
          ],
          "line": 161,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.base_licitud === 'interes_legitimo'"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analizarDatosBiometricos",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "resultado"
          ],
          "line": 197,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!necesidadJustificada"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.base_licitud !== 'consentimiento'"
          ],
          "line": 209,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analizarMenores14",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "resultado"
          ],
          "line": 239,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.base_licitud !== 'consentimiento'"
          ],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analizarGeolocalizacion",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "resultado"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadValidacion.restricciones"
          ],
          "line": 287,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.transferencias_internacionales?.length > 0 && precision === 'gps_exacto'"
          ],
          "line": 292,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "guardarAnalisisCategoria",
          "type": "method",
          "parameters": [
            "resultado",
            "ratId",
            "tenantId"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratId || ratId === 'undefined'"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "verificarProfesionalSalud",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 356,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tenantId || tenantId === 'undefined'"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 372,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluarNecesidadBiometricos",
          "type": "method",
          "parameters": [
            "finalidad"
          ],
          "line": 378,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "determinarPrecisionGeo",
          "type": "method",
          "parameters": [
            "descripcion"
          ],
          "line": 388,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "desc.includes('gps') || desc.includes('coordenadas exactas')"
          ],
          "line": 391,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "desc.includes('ciudad') || desc.includes('región')"
          ],
          "line": 394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "desc.includes('país')"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validarFinalidadGeo",
          "type": "method",
          "parameters": [
            "finalidad"
          ],
          "line": 403,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('seguridad')"
          ],
          "line": 406,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('marketing')"
          ],
          "line": 409,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('estadístico')"
          ],
          "line": 415,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('tracking') || finalidadLower.includes('seguimiento')"
          ],
          "line": 421,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 26,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.318Z"
    },
    "/frontend/src/services/dataSync.js": {
      "file_path": "/frontend/src/services/dataSync.js",
      "lines_of_code": 249,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "dataSyncService"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 5,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getMasterData",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 13,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.cache.has(cacheKey)"
          ],
          "line": 18,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Date.now() - cached.timestamp < 30000"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "subscribe",
          "type": "method",
          "parameters": [
            "componentName",
            "tenantId",
            "callback"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "notifySubscribers",
          "type": "method",
          "parameters": [
            "tenantId",
            "masterData"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "key.includes(tenantId)"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 132,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "invalidateAndRefresh",
          "type": "method",
          "parameters": [
            "tenantId",
            "changeType = 'general'"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "onRATCreated",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 156,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "onRATUpdated",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 161,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "onEIPDGenerated",
          "type": "method",
          "parameters": [
            "eipdData",
            "tenantId"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "onDPOTaskCreated",
          "type": "method",
          "parameters": [
            "taskData",
            "tenantId"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "startAutoSync",
          "type": "method",
          "parameters": [
            "tenantId",
            "intervalMs = 60000"
          ],
          "line": 177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.syncInterval"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 185,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "stopAutoSync",
          "type": "method",
          "parameters": [],
          "line": 193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.syncInterval"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getDataForModule",
          "type": "method",
          "parameters": [
            "moduleName",
            "tenantId"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "moduleName"
          ],
          "line": 205,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 14,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.320Z"
    },
    "/frontend/src/services/industryStandardsService.js": {
      "file_path": "/frontend/src/services/industryStandardsService.js",
      "lines_of_code": 363,
      "imports": [],
      "exports": [
        "const",
        "const",
        "const",
        "function",
        "function"
      ],
      "functions": [
        {
          "name": "obtenerInformacionSectorial",
          "type": "declaration",
          "parameters": [
            "industria",
            "incluirFundamentos = true"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarReporteFundamentos",
          "type": "declaration",
          "parameters": [
            "industrias = null"
          ],
          "line": 340,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "obtenerInformacionSectorial",
          "type": "method",
          "parameters": [
            "industria",
            "incluirFundamentos = true"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!info"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "incluirFundamentos"
          ],
          "line": 322,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarReporteFundamentos",
          "type": "method",
          "parameters": [
            "industrias = null"
          ],
          "line": 340,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [],
      "complexity_score": 2,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.323Z"
    },
    "/frontend/src/services/partnerSyncEngine.js": {
      "file_path": "/frontend/src/services/partnerSyncEngine.js",
      "lines_of_code": 320,
      "imports": [
        "../config/supabaseClient",
        "./riskCalculationEngine",
        "../constants/estados"
      ],
      "exports": [
        "new"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 12,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analizarClientePartner",
          "type": "method",
          "parameters": [
            "partnerData"
          ],
          "line": 17,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!partnerValido"
          ],
          "line": 23,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 50,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ejecutarAnalisisIA",
          "type": "method",
          "parameters": [
            "clienteData"
          ],
          "line": 60,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "mapearCategoriasPartner",
          "type": "method",
          "parameters": [
            "categoriasPartner"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const categoria of categoriasPartner"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "categoria"
          ],
          "line": 107,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "determinarDocumentosObligatorios",
          "type": "method",
          "parameters": [
            "riesgoCalculado",
            "tratamiento"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "riesgoCalculado.clasificacion?.requiere_eipd"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tratamiento.decisiones_automatizadas"
          ],
          "line": 141,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarAlertasCriticas",
          "type": "method",
          "parameters": [
            "tratamiento",
            "riesgoCalculado"
          ],
          "line": 156,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tratamiento.destinos_transferencia?.some(d => d.includes('Estados Unidos'))"
          ],
          "line": 159,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tratamiento.decisiones_automatizadas"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "enviarWebhookRATCompletado",
          "type": "method",
          "parameters": [
            "ratId",
            "partnerIds = []"
          ],
          "line": 181,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const partnerId of partnerIds"
          ],
          "line": 203,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 215,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "obtenerDatosCompletosRAT",
          "type": "method",
          "parameters": [
            "ratId"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "generarUUID",
          "type": "method",
          "parameters": [],
          "line": 278,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "replace",
          "type": "method",
          "parameters": [
            "/[xy]/g",
            "function(c"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarSignatureHMAC",
          "type": "method",
          "parameters": [
            "datos"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarHashIntegridad",
          "type": "method",
          "parameters": [
            "documento"
          ],
          "line": 290,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "determinarEtapasCompletadas",
          "type": "method",
          "parameters": [
            "actividades"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "actividades?.some(a => a.tipo_actividad.includes('RAT'))"
          ],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "actividades?.some(a => a.tipo_actividad.includes('EIPD'))"
          ],
          "line": 300,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "actividades?.some(a => a.estado === ACTIVIDAD_DPO_ESTADOS.COMPLETADA)"
          ],
          "line": 303,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularScoreCompliance",
          "type": "method",
          "parameters": [
            "ratData",
            "documentos"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [
        {
          "file": "",
          "table": "mapeo_datos_rat",
          "operation": "select",
          "parameters": "'*'",
          "line": 225,
          "context": "await Promise.all([       // RAT principal       supabase.from('mapeo_datos_rat').select('*').eq('id', ratId).single(),              // Datos empresa"
        },
        {
          "file": "",
          "table": "organizaciones",
          "operation": "select",
          "parameters": "'*'",
          "line": 228,
          "context": "Id).single(),              // Datos empresa       supabase.from('organizaciones').select('*').limit(1).single(),              // Documentos generados"
        },
        {
          "file": "",
          "table": "generated_documents",
          "operation": "select",
          "parameters": "'*'",
          "line": 231,
          "context": "gle(),              // Documentos generados       supabase.from('generated_documents').select('*').eq('rat_id', ratId),              // Actividades DP"
        },
        {
          "file": "",
          "table": "actividades_dpo",
          "operation": "select",
          "parameters": "'*'",
          "line": 234,
          "context": "d', ratId),              // Actividades DPO       supabase.from('actividades_dpo').select('*').eq('rat_id', ratId),              // Proveedores asocia"
        },
        {
          "file": "",
          "table": "rat_proveedores",
          "operation": "select",
          "parameters": "'*, proveedores(*",
          "line": 237,
          "context": "tId),              // Proveedores asociados       supabase.from('rat_proveedores').select('*, proveedores(*)').eq('rat_id', ratId)     ]);      return"
        }
      ],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "../config/supabaseClient",
        "./riskCalculationEngine",
        "../constants/estados"
      ],
      "complexity_score": 21,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.325Z"
    },
    "/frontend/src/services/proveedoresService.js": {
      "file_path": "/frontend/src/services/proveedoresService.js",
      "lines_of_code": 453,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "proveedoresService"
      ],
      "functions": [
        {
          "name": "getCurrentTenant",
          "type": "method",
          "parameters": [],
          "line": 8,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data?.tenant_id"
          ],
          "line": 21,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 34,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getSupabaseClient",
          "type": "method",
          "parameters": [],
          "line": 41,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "createProveedor",
          "type": "method",
          "parameters": [
            "proveedorData"
          ],
          "line": 48,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 74,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getProveedores",
          "type": "method",
          "parameters": [],
          "line": 81,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && (!data || data.length === 0)"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const variant of tenantVariants"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "variant !== tenantId"
          ],
          "line": 105,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!variantResult.error && variantResult.data && variantResult.data.length > 0"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && (!data || data.length === 0)"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && data && data.length > 0"
          ],
          "line": 137,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "updateProveedor",
          "type": "method",
          "parameters": [
            "proveedorId",
            "updates"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "deleteProveedor",
          "type": "method",
          "parameters": [
            "proveedorId"
          ],
          "line": 187,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "createDPA",
          "type": "method",
          "parameters": [
            "proveedorId",
            "dpaData"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dpaError"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 252,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "createEvaluacionSeguridad",
          "type": "method",
          "parameters": [
            "proveedorId",
            "evaluacionData"
          ],
          "line": 259,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 296,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "asociarProveedorRAT",
          "type": "method",
          "parameters": [
            "proveedorId",
            "ratId"
          ],
          "line": 303,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 321,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 329,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getProveedoresByRAT",
          "type": "method",
          "parameters": [
            "ratId"
          ],
          "line": 336,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 350,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validarAislacionTenant",
          "type": "method",
          "parameters": [],
          "line": 365,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "otroTenant && otroTenant.length > 0"
          ],
          "line": 379,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tenantsUnicos.length > 1"
          ],
          "line": 392,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tenantsUnicos.length === 1 && tenantsUnicos[0] !== tenantId"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 405,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "calcularNivelRiesgo",
          "type": "method",
          "parameters": [
            "puntuacion"
          ],
          "line": 413,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getEstadisticasTenant",
          "type": "method",
          "parameters": [],
          "line": 420,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 444,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "user",
        "user_sessions",
        "user_id"
      ],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 45,
      "potential_issues": [
        "debug_statements",
        "localStorage_usage"
      ],
      "analyzed_at": "2025-09-04T15:09:36.328Z"
    },
    "/frontend/src/services/ratIntelligenceEngine.js": {
      "file_path": "/frontend/src/services/ratIntelligenceEngine.js",
      "lines_of_code": 674,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "ratIntelligenceEngine"
      ],
      "functions": [
        {
          "name": "createDPOActivities",
          "type": "method",
          "parameters": [
            "alerts",
            "ratId",
            "tenantId"
          ],
          "line": 11,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "authError"
          ],
          "line": 24,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!alerts || alerts.length === 0"
          ],
          "line": 34,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "fallbackError"
          ],
          "line": 89,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "function",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosSensiblesDetectados.length > 0"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.decisiones_automatizadas === true || ratData.decisiones_automatizadas === 'si'"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.destinatarios_externos?.length > 0"
          ],
          "line": 160,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "proveedoresInternacionales.length > 0"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "factoresRiesgo.length >= 2"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "detectArea",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "text",
            "keywords"
          ],
          "line": 288,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "detectSensitiveData",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 292,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['médic'",
            "'salud'",
            "'enfermedad'",
            "'diagnóstic'",
            "'tratamiento'])"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['socioeconómic'",
            "'económic'",
            "'scoring'",
            "'creditici'",
            "'ingresos'",
            "'renta'])"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['biométric'",
            "'huella'",
            "'facial'",
            "'iris'",
            "'reconocimiento'])"
          ],
          "line": 311,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['menor'",
            "'niño'",
            "'estudiante'",
            "'escolar'",
            "'adolescente'])"
          ],
          "line": 317,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['penal'",
            "'judicial'",
            "'antecedente'",
            "'criminal'",
            "'delito'])"
          ],
          "line": 323,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['racial'",
            "'étnico'",
            "'origen'",
            "'etnia'",
            "'raza'])"
          ],
          "line": 329,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['polític'",
            "'ideología'",
            "'partido'",
            "'voto'",
            "'elección'])"
          ],
          "line": 335,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['religios'",
            "'fe'",
            "'credo'",
            "'iglesia'",
            "'creencia'])"
          ],
          "line": 341,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['sexual'",
            "'orientación'",
            "'intimidad'",
            "'género'])"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluateRiskFactors",
          "type": "method",
          "parameters": [
            "ratData",
            "datosSensibles",
            "area"
          ],
          "line": 354,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosSensibles.length >= 2"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.volumen_datos === 'masivo' || parseInt(ratData.cantidad_titulares) > 10000"
          ],
          "line": 363,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.decisiones_automatizadas && datosSensibles.length > 0"
          ],
          "line": 368,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.destinatarios_externos?.length > 0 && datosSensibles.length > 0"
          ],
          "line": 373,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "['salud'",
            "'financiero'",
            "'educacion'",
            "'gobierno'].includes(area)"
          ],
          "line": 378,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "toLowerCase",
          "type": "method",
          "parameters": [
            ").includes('segment')"
          ],
          "line": 384,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "parseInt",
          "type": "method",
          "parameters": [
            "ratData.tiempo_retencion) > 5"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getIndustrySpecificAlerts",
          "type": "method",
          "parameters": [
            "area",
            "ratData",
            "checks"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "area"
          ],
          "line": 401,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checks.tienePacientes && !ratData.consentimiento_explicito"
          ],
          "line": 403,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checks.tieneMenores"
          ],
          "line": 422,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checks.evaluaCredito"
          ],
          "line": 441,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checks.tieneDatosPublicos"
          ],
          "line": 460,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeDataVolume",
          "type": "method",
          "parameters": [
            "ratData",
            "area"
          ],
          "line": 482,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "cantidad > 100000"
          ],
          "line": 488,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "cantidad > 10000"
          ],
          "line": 503,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeLegitimation",
          "type": "method",
          "parameters": [
            "ratData",
            "area"
          ],
          "line": 523,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.base_licitud || ratData.base_licitud === ''"
          ],
          "line": 527,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeRetention",
          "type": "method",
          "parameters": [
            "ratData",
            "area"
          ],
          "line": 547,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.tiempo_retencion || ratData.tiempo_retencion === 'indefinido'"
          ],
          "line": 551,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getIndustrySpecificChecks",
          "type": "method",
          "parameters": [
            "area",
            "ratData"
          ],
          "line": 573,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "area"
          ],
          "line": 576,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSectorDisplayName",
          "type": "method",
          "parameters": [
            "area"
          ],
          "line": 620,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSectorEmoji",
          "type": "method",
          "parameters": [
            "area"
          ],
          "line": 637,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isInternationalProvider",
          "type": "method",
          "parameters": [
            "nombre"
          ],
          "line": 642,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "function",
          "type": "method",
          "parameters": [
            "notificaciones"
          ],
          "line": 651,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "user"
      ],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 53,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.333Z"
    },
    "/frontend/src/services/ratService.js": {
      "file_path": "/frontend/src/services/ratService.js",
      "lines_of_code": 184,
      "imports": [
        "../config/supabaseClient",
        "../constants/estados"
      ],
      "exports": [
        "ratService",
        " ratService "
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 12,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getRats",
          "type": "method",
          "parameters": [
            "options = {}"
          ],
          "line": 17,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "createRAT",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 43,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "updateRAT",
          "type": "method",
          "parameters": [
            "id",
            "ratData"
          ],
          "line": 50,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 61,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "deleteRAT",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 77,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getRATById",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 94,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "setCurrentTenant",
          "type": "method",
          "parameters": [
            "tenant",
            "userId"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!userId || !tenant"
          ],
          "line": 105,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getCurrentTenant",
          "type": "method",
          "parameters": [
            "userId"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!userId"
          ],
          "line": 138,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 149,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getCompletedRATs",
          "type": "method",
          "parameters": [],
          "line": 162,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "userId",
        "user_id",
        "user_sessions"
      ],
      "dependencies": [
        "../config/supabaseClient",
        "../constants/estados"
      ],
      "complexity_score": 26,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.335Z"
    },
    "/frontend/src/services/riskCalculationEngine.js": {
      "file_path": "/frontend/src/services/riskCalculationEngine.js",
      "lines_of_code": 553,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "new"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularRiesgoTotal",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 90,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 132,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularPuntosCategorias",
          "type": "method",
          "parameters": [
            "categoriasDatos"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.identificacion"
          ],
          "line": 149,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.sensibles_art14"
          ],
          "line": 157,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.especiales"
          ],
          "line": 164,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.tecnicas"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularPuntosFinalidad",
          "type": "method",
          "parameters": [
            "finalidad"
          ],
          "line": 181,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('decisiones automáticas') || finalidadLower.includes('algoritmo')"
          ],
          "line": 186,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('perfilado') || finalidadLower.includes('segmentación')"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('comportamiento') || finalidadLower.includes('análisis usuario')"
          ],
          "line": 192,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('marketing') && finalidadLower.includes('dirigido')"
          ],
          "line": 195,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('marketing')"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('contrato') || finalidadLower.includes('comercial')"
          ],
          "line": 201,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('legal') || finalidadLower.includes('cumplimiento')"
          ],
          "line": 204,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularPuntosTransferencias",
          "type": "method",
          "parameters": [
            "transferencias",
            "tenantId"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const transferencia of transferencias"
          ],
          "line": 217,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!pais || pais === 'chile'"
          ],
          "line": 220,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "['alemania'",
            "'francia'",
            "'españa'",
            "'italia'",
            "'holanda'].includes(pais)"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "['reino unido'",
            "'suiza'",
            "'canadá'",
            "'japón'",
            "'argentina'].includes(pais)"
          ],
          "line": 224,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "pais === 'estados unidos'"
          ],
          "line": 226,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "['brasil'",
            "'méxico'].includes(pais)"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "verificarPrivacyShield",
          "type": "method",
          "parameters": [
            "proveedorId"
          ],
          "line": 243,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "calcularPuntosVolumen",
          "type": "method",
          "parameters": [
            "volumen"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularPuntosTecnologia",
          "type": "method",
          "parameters": [
            "tecnologia"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('decisiones automáticas') || tecLower.includes('algoritmo decisional')"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('deep learning') || tecLower.includes('neural')"
          ],
          "line": 282,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('machine learning') || tecLower.includes('ml')"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('inteligencia artificial') || tecLower.includes('ia')"
          ],
          "line": 288,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('automatización') || tecLower.includes('procesos automáticos')"
          ],
          "line": 291,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('base datos') || tecLower.includes('sql')"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('manual') || tecLower.includes('revisión humana')"
          ],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "clasificarRiesgo",
          "type": "method",
          "parameters": [
            "puntuacionTotal"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "puntuacionTotal <= 5"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "puntuacionTotal <= 12"
          ],
          "line": 319,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "puntuacionTotal <= 20"
          ],
          "line": 331,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "puntuacionTotal <= 30"
          ],
          "line": 344,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "aplicarAutoEfectos",
          "type": "method",
          "parameters": [
            "clasificacion",
            "ratData",
            "tenantId"
          ],
          "line": 374,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.nivel === 'ALTO' || clasificacion.nivel === 'CRITICO'"
          ],
          "line": 377,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.nivel === 'CRITICO'"
          ],
          "line": 391,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarEIPDAutomatica",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "clasificacion"
          ],
          "line": 404,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearActividadDPO",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "clasificacion"
          ],
          "line": 432,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearNotificacionDPO",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "clasificacion"
          ],
          "line": 457,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "generarDPIAAutomatica",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 479,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearAlertaSistema",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 500,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "generarMedidasMitigacion",
          "type": "method",
          "parameters": [
            "clasificacion"
          ],
          "line": 530,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.requiere_eipd"
          ],
          "line": 533,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.requiere_dpia"
          ],
          "line": 536,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.consulta_previa_agencia"
          ],
          "line": 539,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.medidas_excepcionales"
          ],
          "line": 542,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.monitoreo_continuo"
          ],
          "line": 545,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 55,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.338Z"
    },
    "/frontend/src/services/specificCasesEngine.js": {
      "file_path": "/frontend/src/services/specificCasesEngine.js",
      "lines_of_code": 554,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "new"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "procesarCasuisticaEspecifica",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const casuistica of casuisticasDetectadas"
          ],
          "line": 116,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "detectarCasuisticas",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.contieneCategoria(ratData.categorias_datos",
            "'datos_geneticos')"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.esDecisionFinanciera(ratData)"
          ],
          "line": 149,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.esInvestigacionAcademica(ratData",
            "tenantId)"
          ],
          "line": 158,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "procesarCasuistica",
          "type": "method",
          "parameters": [
            "casuistica",
            "ratData",
            "tenantId"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "tipo"
          ],
          "line": 173,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "procesarCasoGeneticos",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "config"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!autorizacionISP"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [efecto",
            "valor] of Object.entries(config.auto_efectos)"
          ],
          "line": 210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "procesarCasoFinanciero",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "config"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!autorizacionCMF"
          ],
          "line": 233,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.decisiones_automatizadas"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [efecto",
            "valor] of Object.entries(config.auto_efectos_regulatorios)"
          ],
          "line": 251,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "procesarCasoAcademico",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "config"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!comiteEtica"
          ],
          "line": 271,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [efecto",
            "valor] of Object.entries(config.auto_efectos_academicos)"
          ],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "contieneCategoria",
          "type": "method",
          "parameters": [
            "categorias",
            "categoria"
          ],
          "line": 289,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "esDecisionFinanciera",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "esInvestigacionAcademica",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 308,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "aplicarAutoEfecto",
          "type": "method",
          "parameters": [
            "ratId",
            "tenantId",
            "efecto",
            "valor"
          ],
          "line": 331,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "efecto"
          ],
          "line": 333,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "valor"
          ],
          "line": 343,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "valor"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 363,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarDocumentosGeneticos",
          "type": "method",
          "parameters": [
            "ratId",
            "tenantId"
          ],
          "line": 369,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const doc of tiposDocumentos"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 410,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "verificarAutorizacionISP",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 419,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "verificarAutorizacionCMF",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 434,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "verificarComiteEtica",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 449,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "programarAuditoriasPeriodicas",
          "type": "method",
          "parameters": [
            "ratId",
            "tenantId",
            "frecuencia"
          ],
          "line": 464,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 1; i <= 4; i++"
          ],
          "line": 473,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "obtenerContextoFinanciero",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 495,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 512,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "obtenerContextoAcademico",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 523,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 541,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 44,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.342Z"
    },
    "/frontend/src/services/testBalancingEngine.js": {
      "file_path": "/frontend/src/services/testBalancingEngine.js",
      "lines_of_code": 467,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "new"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ejecutarTestBalancing",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 58,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluarInteresEmpresa",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 112,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('seguridad') || finalidad.includes('fraude')"
          ],
          "line": 120,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('mejorar') || finalidad.includes('optimizar')"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('marketing') || finalidad.includes('comercial')"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('investigación') || finalidad.includes('análisis')"
          ],
          "line": 132,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.descripcion && ratData.descripcion.length > 50"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tipoInteres === 'seguridad_empresa' || tipoInteres === 'cumplimiento_contractual'"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluarNecesidadTratamiento",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 164,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "totalCategorias <= 2"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "totalCategorias > 5"
          ],
          "line": 175,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "includes",
          "type": "method",
          "parameters": [
            "'alternativa disponible'))"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.length > 100 && finalidad.includes('específicamente')"
          ],
          "line": 193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.descripcion?.includes('imposible') || ratData.descripcion?.includes('imprescindible')"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluarImpactoDerechos",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriaEspecial"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularBalanzaFinal",
          "type": "method",
          "parameters": [
            "evaluacionInteres",
            "evaluacionNecesidad",
            "evaluacionImpacto"
          ],
          "line": 247,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "balance >= 3"
          ],
          "line": 255,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "balance >= 0"
          ],
          "line": 257,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "documentarResultado",
          "type": "method",
          "parameters": [
            "ratData",
            "evaluacionInteres",
            "evaluacionNecesidad",
            "evaluacionImpacto",
            "resultadoBalanza"
          ],
          "line": 276,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "aplicarEfectosBalancing",
          "type": "method",
          "parameters": [
            "resultadoBalanza",
            "ratData",
            "tenantId"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!resultadoBalanza.permitir_continuar"
          ],
          "line": 341,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "resultadoBalanza.requiere_medidas"
          ],
          "line": 362,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 383,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "determinarRelacionTitular",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "relacionExistente?.length > 0"
          ],
          "line": 401,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('empleado') || finalidad.includes('trabajador')"
          ],
          "line": 406,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('público') || finalidad.includes('gobierno')"
          ],
          "line": 409,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('comercial') || finalidad.includes('venta')"
          ],
          "line": 412,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "determinarNivelPrivacidad",
          "type": "method",
          "parameters": [
            "categoriasDatos"
          ],
          "line": 423,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.sensibles_art14 || categoriasDatos.biometricos || categoriasDatos.geneticos"
          ],
          "line": 427,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.financieros || categoriasDatos.salud || categoriasDatos.ubicacion"
          ],
          "line": 432,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.laborales || categoriasDatos.comerciales"
          ],
          "line": 437,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "determinarCategoriaEspecialTitular",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 446,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('empleado') || finalidad.includes('trabajador')"
          ],
          "line": 453,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('vulnerable') || finalidad.includes('discapacidad')"
          ],
          "line": 456,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('cliente frecuente') || finalidad.includes('fidelización')"
          ],
          "line": 459,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [
        {
          "file": "",
          "table": "actividades_dpo",
          "operation": "insert",
          "parameters": "errorCritico",
          "line": 357,
          "context": "o contrato'           }         };          await supabase.from('actividades_dpo').insert(errorCritico);         efectos.push('ERROR: Balancing desfav"
        },
        {
          "file": "",
          "table": "actividades_dpo",
          "operation": "insert",
          "parameters": "medidasAdicionales",
          "line": 377,
          "context": "_requeridas           }         };          await supabase.from('actividades_dpo').insert(medidasAdicionales);         efectos.push('Medidas adicional"
        }
      ],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 33,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.345Z"
    },
    "/frontend/src/tests/userSimulation.test.js": {
      "file_path": "/frontend/src/tests/userSimulation.test.js",
      "lines_of_code": 615,
      "imports": [],
      "exports": [],
      "functions": [
        {
          "name": "iniciarTestAutomatizado",
          "type": "declaration",
          "parameters": [],
          "line": 584,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 13,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "typeText",
          "type": "method",
          "parameters": [
            "selector",
            "text",
            "speed = 50"
          ],
          "line": 18,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!element"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let char of text"
          ],
          "line": 28,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "clickButton",
          "type": "method",
          "parameters": [
            "selector"
          ],
          "line": 39,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!element"
          ],
          "line": 41,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "selectOption",
          "type": "method",
          "parameters": [
            "selector",
            "value"
          ],
          "line": 61,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!element"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "toggleCheckbox",
          "type": "method",
          "parameters": [
            "selector",
            "checked = true"
          ],
          "line": 76,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!element"
          ],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "element.checked !== checked"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "navigateTo",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "waitForElement",
          "type": "method",
          "parameters": [
            "selector",
            "timeout = 5000"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "Date.now() - startTime < timeout"
          ],
          "line": 103,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "document.querySelector(selector)"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "scrollToElement",
          "type": "method",
          "parameters": [
            "selector"
          ],
          "line": 116,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "crearRATBasico",
          "type": "method",
          "parameters": [],
          "line": 136,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearEIPD",
          "type": "method",
          "parameters": [
            "ratId"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearProveedor",
          "type": "method",
          "parameters": [],
          "line": 282,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearRATConEIPD",
          "type": "method",
          "parameters": [
            "eipdId"
          ],
          "line": 320,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearRATCompleto",
          "type": "method",
          "parameters": [
            "proveedorId",
            "eipdId"
          ],
          "line": 375,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "editarRegistros",
          "type": "method",
          "parameters": [
            "ratId",
            "proveedorId",
            "eipdId"
          ],
          "line": 445,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "ejecutarPruebaCompleta",
          "type": "method",
          "parameters": [],
          "line": 520,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 569,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "iniciarTestAutomatizado",
          "type": "method",
          "parameters": [],
          "line": 584,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "resultado.success"
          ],
          "line": 592,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof module !== 'undefined' && module.exports"
          ],
          "line": 602,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 607,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "useEvent",
        "useenter",
        "usedown",
        "useup",
        "user"
      ],
      "dependencies": [],
      "complexity_score": 16,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.348Z"
    },
    "/frontend/src/theme/colors.js": {
      "file_path": "/frontend/src/theme/colors.js",
      "lines_of_code": 96,
      "imports": [],
      "exports": [
        "COLORS",
        "const",
        "const",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "rgba",
          "type": "arrow",
          "parameters": [
            "color",
            "opacity"
          ],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [],
      "complexity_score": 0,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.350Z"
    },
    "/frontend/src/theme/darkTheme.js": {
      "file_path": "/frontend/src/theme/darkTheme.js",
      "lines_of_code": 466,
      "imports": [],
      "exports": [
        "darkTheme",
        "const"
      ],
      "functions": [],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "used"
      ],
      "dependencies": [],
      "complexity_score": 0,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.353Z"
    },
    "/frontend/src/utils/aiSupervisor.js": {
      "file_path": "/frontend/src/utils/aiSupervisor.js",
      "lines_of_code": 756,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "aiSupervisor"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 4,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "initialize",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && config"
          ],
          "line": 18,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isActive"
          ],
          "line": 22,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "superviseRATCreation",
          "type": "method",
          "parameters": [
            "ratData",
            "userId",
            "tenantId"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!businessLogicCheck.valid"
          ],
          "line": 45,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!legalComplianceCheck.compliant"
          ],
          "line": 57,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dataQualityCheck.score < 80"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "duplicateCheck.hasDuplicates"
          ],
          "line": 79,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "duplicateCheck.severity === 'critical'"
          ],
          "line": 87,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dpoTasksCheck.tasksRequired.length > 0"
          ],
          "line": 96,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supervision.interventions.length > 0"
          ],
          "line": 108,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateBusinessLogic",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "validateLegalCompliance",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 159,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 176,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "assessDataQuality",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 185,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable?.nombre || ratData.responsable.nombre.length < 5"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.finalidad?.descripcion || ratData.finalidad.descripcion.length < 50"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.categorias_datos || ratData.categorias_datos.length === 0"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.plazos_retencion || ratData.plazos_retencion === 'indefinido'"
          ],
          "line": 204,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "checkForIntelligentDuplicates",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 225,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "performIntelligentDuplicateAnalysis",
          "type": "method",
          "parameters": [
            "newRAT",
            "existingRATs"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const existingRAT of existingRATs"
          ],
          "line": 235,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity.score > maxSimilarity"
          ],
          "line": 238,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity.score > 0.7"
          ],
          "line": 243,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "maxSimilarity > 0.95"
          ],
          "line": 252,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "maxSimilarity > 0.8"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "maxSimilarity > 0.6"
          ],
          "line": 272,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateIntelligentSimilarity",
          "type": "method",
          "parameters": [
            "ratA",
            "ratB"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "compareRUT",
          "type": "method",
          "parameters": [
            "rutA",
            "rutB"
          ],
          "line": 311,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "compareSemanticContent",
          "type": "method",
          "parameters": [
            "textA",
            "textB"
          ],
          "line": 316,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "extractKeywords",
          "type": "method",
          "parameters": [
            "text"
          ],
          "line": 328,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "compareArraySimilarity",
          "type": "method",
          "parameters": [
            "arrA",
            "arrB"
          ],
          "line": 336,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRecommendation",
          "type": "method",
          "parameters": [
            "similarityScore"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "assessRequiredDPOTasks",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 356,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasSensitiveData || hasAutomatedDecisions || isHighVolume"
          ],
          "line": 369,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasInternationalTransfers"
          ],
          "line": 379,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.base_juridica?.tipo === 'consentimiento'"
          ],
          "line": 389,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "checkExistingEIPD",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 402,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const eipd of existingEIPDs"
          ],
          "line": 412,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity > 0.8"
          ],
          "line": 414,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 425,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "compareEIPDRelevance",
          "type": "method",
          "parameters": [
            "ratData",
            "eipd"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkExistingDPA",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 443,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.transferencias_internacionales?.paises"
          ],
          "line": 444,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "existingDPAs.length > 0"
          ],
          "line": 460,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 470,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "autoAssignDPOTasks",
          "type": "method",
          "parameters": [
            "tasks",
            "ratId",
            "tenantId"
          ],
          "line": 475,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const task of tasks"
          ],
          "line": 483,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "task.auto_assignable?.assignable"
          ],
          "line": 485,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "assignmentResult.success"
          ],
          "line": 492,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "creationResult.success"
          ],
          "line": 505,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 516,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "assignExistingDocument",
          "type": "method",
          "parameters": [
            "task",
            "assignmentInfo",
            "ratId"
          ],
          "line": 524,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 540,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "createNewDPOTask",
          "type": "method",
          "parameters": [
            "task",
            "ratId",
            "tenantId"
          ],
          "line": 545,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 564,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "logSupervision",
          "type": "method",
          "parameters": [
            "supervision",
            "userId",
            "tenantId"
          ],
          "line": 569,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 582,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "notifyInterventions",
          "type": "method",
          "parameters": [
            "interventions",
            "userId"
          ],
          "line": 587,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const intervention of interventions"
          ],
          "line": 588,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 602,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getInterventionTitle",
          "type": "method",
          "parameters": [
            "type"
          ],
          "line": 608,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "performPeriodicSupervision",
          "type": "method",
          "parameters": [],
          "line": 620,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rat of recentRATs"
          ],
          "line": 630,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 643,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getSupervisionDashboard",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 649,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "stats.length > 0"
          ],
          "line": 667,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 691,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "startSupervision",
          "type": "method",
          "parameters": [],
          "line": 696,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "enableAISupervisor",
          "type": "method",
          "parameters": [
            "userId"
          ],
          "line": 704,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 721,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getInstructions",
          "type": "method",
          "parameters": [],
          "line": 726,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "userId",
        "user",
        "user_id",
        "user_notifications"
      ],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 83,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.356Z"
    },
    "/frontend/src/utils/completeSystemTester.js": {
      "file_path": "/frontend/src/utils/completeSystemTester.js",
      "lines_of_code": 633,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "completeSystemTester"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "executeCompleteTest",
          "type": "method",
          "parameters": [],
          "line": 19,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 47,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testDatabaseConnections",
          "type": "method",
          "parameters": [],
          "line": 63,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of tables"
          ],
          "line": 70,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 79,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testBasicDatabaseOperations",
          "type": "method",
          "parameters": [],
          "line": 93,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "updateError"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "selectError"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "deleteError"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testAllForms",
          "type": "method",
          "parameters": [],
          "line": 162,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "forms.length === 0"
          ],
          "line": 165,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < forms.length; i++"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testSingleForm",
          "type": "method",
          "parameters": [
            "form",
            "formId"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let j = 0; j < requiredFields.length; j++"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!field.value && field.hasAttribute('required')"
          ],
          "line": 195,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "field.value && !this.isValidEmail(field.value)"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "field.value"
          ],
          "line": 208,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "field.value && !pattern.test(field.value)"
          ],
          "line": 219,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "field.value"
          ],
          "line": 221,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 226,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testAllButtons",
          "type": "method",
          "parameters": [],
          "line": 234,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "buttons.length === 0"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < buttons.length; i++"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testSingleButton",
          "type": "method",
          "parameters": [
            "button",
            "index"
          ],
          "line": 248,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!isVisible"
          ],
          "line": 257,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isDisabled"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "button.type === 'submit'"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!form"
          ],
          "line": 276,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 283,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testNavigation",
          "type": "method",
          "parameters": [],
          "line": 291,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "navLinks.length === 0"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const expectedRoute of expectedRoutes"
          ],
          "line": 304,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "linkExists"
          ],
          "line": 309,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < Math.min(navLinks.length",
            "10); i++"
          ],
          "line": 317,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!href"
          ],
          "line": 322,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "href.startsWith('#')"
          ],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testCRUDOperations",
          "type": "method",
          "parameters": [],
          "line": 335,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of tables"
          ],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testTableCRUD",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 343,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "listError"
          ],
          "line": 351,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "listData && listData.length > 0"
          ],
          "line": 359,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "singleError"
          ],
          "line": 367,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "testData"
          ],
          "line": 376,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "createError"
          ],
          "line": 383,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "updateError"
          ],
          "line": 395,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "deleteError"
          ],
          "line": 407,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 415,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testValidations",
          "type": "method",
          "parameters": [],
          "line": 423,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "aiAgentActive"
          ],
          "line": 440,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testModuleInteractions",
          "type": "method",
          "parameters": [],
          "line": 450,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "testOrganizationRATRelation",
          "type": "method",
          "parameters": [],
          "line": 461,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!orgs || orgs.length === 0"
          ],
          "line": 469,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 480,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 486,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testRATProviderRelation",
          "type": "method",
          "parameters": [],
          "line": 491,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "testDPONotifications",
          "type": "method",
          "parameters": [],
          "line": 495,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 502,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 508,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "addResult",
          "type": "method",
          "parameters": [
            "prueba",
            "resultado",
            "motivo"
          ],
          "line": 514,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTestDataForTable",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 523,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getUpdateDataForTable",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 548,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isValidEmail",
          "type": "method",
          "parameters": [
            "email"
          ],
          "line": 558,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateSimpleReport",
          "type": "method",
          "parameters": [
            "executionTime"
          ],
          "line": 565,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "displayReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 586,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.failed > 0"
          ],
          "line": 613,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.warnings > 0"
          ],
          "line": 615,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "user_sessions",
        "useEvent",
        "useenter",
        "useleave"
      ],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 63,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.361Z"
    },
    "/frontend/src/utils/dataIntegrityValidator.js": {
      "file_path": "/frontend/src/utils/dataIntegrityValidator.js",
      "lines_of_code": 639,
      "imports": [
        "./fileErrorLogger"
      ],
      "exports": [
        "dataIntegrityValidator"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 17,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupValidationRules",
          "type": "method",
          "parameters": [],
          "line": 28,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateBeforeInsert",
          "type": "method",
          "parameters": [
            "tableName",
            "data"
          ],
          "line": 79,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rules"
          ],
          "line": 94,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < records.length; i++"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules.field_validations"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules.referential_integrity"
          ],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules.business_rules"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateBeforeUpdate",
          "type": "method",
          "parameters": [
            "tableName",
            "data",
            "whereClause"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!whereValidation.valid"
          ],
          "line": 165,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!existenceValidation.exists"
          ],
          "line": 173,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules.field_validations"
          ],
          "line": 182,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules.referential_integrity"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateRequiredFields",
          "type": "method",
          "parameters": [
            "record",
            "requiredFields",
            "recordIndex = 0"
          ],
          "line": 211,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value === undefined || value === null || value === ''"
          ],
          "line": 217,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof value === 'string' && value.trim() === ''"
          ],
          "line": 219,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateFieldFormats",
          "type": "method",
          "parameters": [
            "record",
            "fieldValidations",
            "recordIndex = 0"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rules.required && (value === undefined || value === null)"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "rules.type"
          ],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && !this.isValidEmail(value)"
          ],
          "line": 243,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && !this.isValidRUT(value)"
          ],
          "line": 249,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && !this.isValidPhone(value)"
          ],
          "line": 255,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && rules.minLength && value.length < rules.minLength"
          ],
          "line": 261,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && rules.maxLength && value.length > rules.maxLength"
          ],
          "line": 264,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateReferentialIntegrity",
          "type": "method",
          "parameters": [
            "record",
            "refRules",
            "recordIndex = 0"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [fieldName",
            "refRule] of Object.entries(refRules)"
          ],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "refRule.nullable && (!value || value === null)"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value"
          ],
          "line": 288,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "count === 0"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 303,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateBusinessRules",
          "type": "method",
          "parameters": [
            "tableName",
            "record",
            "businessRules",
            "recordIndex = 0"
          ],
          "line": 315,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rule of businessRules"
          ],
          "line": 318,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!result.valid"
          ],
          "line": 322,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rule.critical"
          ],
          "line": 323,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 330,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "applyBusinessRule",
          "type": "method",
          "parameters": [
            "tableName",
            "record",
            "ruleName",
            "recordIndex"
          ],
          "line": 341,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "ruleName"
          ],
          "line": 342,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateUniqueRUT",
          "type": "method",
          "parameters": [
            "record",
            "recordIndex"
          ],
          "line": 363,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!record.rut"
          ],
          "line": 364,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "count > 0"
          ],
          "line": 375,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 381,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateUniqueRATPerActivity",
          "type": "method",
          "parameters": [
            "record",
            "recordIndex"
          ],
          "line": 389,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!record.nombre_actividad || !record.tenant_id"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "count > 0"
          ],
          "line": 402,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 408,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateCompleteDPOInfo",
          "type": "method",
          "parameters": [
            "record",
            "recordIndex"
          ],
          "line": 416,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missingFields.length > 0"
          ],
          "line": 420,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateRiskLevel",
          "type": "method",
          "parameters": [
            "record",
            "recordIndex"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "record.nivel_riesgo"
          ],
          "line": 431,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!validLevels.includes(record.nivel_riesgo)"
          ],
          "line": 433,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateWhereClause",
          "type": "method",
          "parameters": [
            "whereClause"
          ],
          "line": 444,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!whereClause || typeof whereClause !== 'object'"
          ],
          "line": 447,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!hasUniqueField"
          ],
          "line": 459,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value === undefined || value === 'undefined'"
          ],
          "line": 466,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateRecordExists",
          "type": "method",
          "parameters": [
            "tableName",
            "whereClause"
          ],
          "line": 478,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 491,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 497,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "sanitizeDataForLog",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 505,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "sanitized[field]"
          ],
          "line": 511,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof sanitized[key] === 'string' && sanitized[key].length > 100"
          ],
          "line": 518,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logValidationResults",
          "type": "method",
          "parameters": [
            "validation"
          ],
          "line": 529,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.valid"
          ],
          "line": 530,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.warnings.length > 0"
          ],
          "line": 547,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!validation.valid"
          ],
          "line": 557,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.integrityChecks.length > 200"
          ],
          "line": 562,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.validationErrors.length > 100"
          ],
          "line": 565,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isValidEmail",
          "type": "method",
          "parameters": [
            "email"
          ],
          "line": 573,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isValidRUT",
          "type": "method",
          "parameters": [
            "rut"
          ],
          "line": 578,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isValidPhone",
          "type": "method",
          "parameters": [
            "phone"
          ],
          "line": 584,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateIntegrityReport",
          "type": "method",
          "parameters": [],
          "line": 593,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "summarizeErrors",
          "type": "method",
          "parameters": [],
          "line": 607,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!summary[table]"
          ],
          "line": 612,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "operation === 'INSERT'"
          ],
          "line": 632,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "operation === 'UPDATE'"
          ],
          "line": 634,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "./fileErrorLogger"
      ],
      "complexity_score": 70,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.365Z"
    },
    "/frontend/src/utils/databaseHealthMonitor.js": {
      "file_path": "/frontend/src/utils/databaseHealthMonitor.js",
      "lines_of_code": 725,
      "imports": [
        "../config/supabaseClient",
        "./fileErrorLogger"
      ],
      "exports": [
        "dbHealthMonitor"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 18,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "startMonitoring",
          "type": "method",
          "parameters": [],
          "line": 37,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isMonitoring"
          ],
          "line": 38,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 58,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "performInitialHealthCheck",
          "type": "method",
          "parameters": [],
          "line": 67,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testConnectivity",
          "type": "method",
          "parameters": [],
          "line": 113,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.message.includes('timeout')"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.message.includes('network')"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "responseTime > 3000"
          ],
          "line": 149,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testMainTables",
          "type": "method",
          "parameters": [],
          "line": 166,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const tableName of mainTables"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.message.includes('does not exist')"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.message.includes('permission')"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "failedTables === 0"
          ],
          "line": 225,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "failedTables < mainTables.length / 2"
          ],
          "line": 227,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testReferentialIntegrity",
          "type": "method",
          "parameters": [],
          "line": 245,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratError && orphanRATs"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rat of orphanRATs"
          ],
          "line": 257,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!orgExists"
          ],
          "line": 264,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!provError && orphanProviders"
          ],
          "line": 283,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const provider of orphanProviders"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratExists"
          ],
          "line": 291,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.issues.length > 0"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 313,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testRLSPermissions",
          "type": "method",
          "parameters": [],
          "line": 325,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const testCase of testCases"
          ],
          "line": 336,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "withFilterError && withFilterError.message.includes('406')"
          ],
          "line": 357,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 366,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testDataConsistency",
          "type": "method",
          "parameters": [],
          "line": 385,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "incompleteRATs && incompleteRATs.length > 0"
          ],
          "line": 396,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "duplicateOrgs"
          ],
          "line": 418,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "count > 1"
          ],
          "line": 425,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.inconsistencies.length > 0"
          ],
          "line": 439,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 446,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateOverallStatus",
          "type": "method",
          "parameters": [
            "checks"
          ],
          "line": 458,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logCriticalIssue",
          "type": "method",
          "parameters": [
            "type",
            "details"
          ],
          "line": 470,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "logConnectionIssue",
          "type": "method",
          "parameters": [
            "type",
            "error",
            "responseTime"
          ],
          "line": 495,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "issue.severity === 'CRITICAL'"
          ],
          "line": 509,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logConsistencyError",
          "type": "method",
          "parameters": [
            "category",
            "details"
          ],
          "line": 529,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.severity === 'HIGH' || error.severity === 'CRITICAL'"
          ],
          "line": 542,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupPeriodicChecks",
          "type": "method",
          "parameters": [],
          "line": 562,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 567,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupRealtimeErrorDetection",
          "type": "method",
          "parameters": [],
          "line": 576,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "message.includes('Supabase') || message.includes('PostgreSQL')"
          ],
          "line": 584,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeRealTimeError",
          "type": "method",
          "parameters": [
            "message",
            "args"
          ],
          "line": 595,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "lowerMessage.includes('406') || lowerMessage.includes('not acceptable')"
          ],
          "line": 598,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "lowerMessage.includes('timeout') || lowerMessage.includes('network')"
          ],
          "line": 602,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "lowerMessage.includes('undefined') && lowerMessage.includes('id')"
          ],
          "line": 606,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateHealthReport",
          "type": "method",
          "parameters": [],
          "line": 614,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateDBRecommendations",
          "type": "method",
          "parameters": [],
          "line": 640,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.criticalIssues.length > 3"
          ],
          "line": 643,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rls406Errors.length > 1"
          ],
          "line": 655,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.consistencyErrors.length > 5"
          ],
          "line": 663,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "printHealthReport",
          "type": "method",
          "parameters": [],
          "line": 677,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.latest_check"
          ],
          "line": 684,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.recommendations.length > 0"
          ],
          "line": 691,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "stopMonitoring",
          "type": "method",
          "parameters": [],
          "line": 707,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 721,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "uses"
      ],
      "dependencies": [
        "../config/supabaseClient",
        "./fileErrorLogger"
      ],
      "complexity_score": 59,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.368Z"
    },
    "/frontend/src/utils/dynamicLegalRules.js": {
      "file_path": "/frontend/src/utils/dynamicLegalRules.js",
      "lines_of_code": 601,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "dynamicLegalRules"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 4,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "loadRules",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRulesByCategory",
          "type": "method",
          "parameters": [
            "category"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rule of this.rules.values()"
          ],
          "line": 37,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rule.category === category"
          ],
          "line": 38,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluateRAT",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rule of this.rules.values()"
          ],
          "line": 57,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "result.triggered"
          ],
          "line": 60,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "result.severity"
          ],
          "line": 61,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "applyRule",
          "type": "method",
          "parameters": [
            "rule",
            "ratData"
          ],
          "line": 87,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "conditionMet"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "evaluateCondition",
          "type": "method",
          "parameters": [
            "condition",
            "ratData"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "executeCondition",
          "type": "method",
          "parameters": [
            "condition",
            "context"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "e"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasSensitiveData",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasInternationalTransfers",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isHighVolume",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 158,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "usesAutomatedDecisions",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 163,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "extractContext",
          "type": "method",
          "parameters": [
            "rule",
            "ratData"
          ],
          "line": 167,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rule.context_fields"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getNestedValue",
          "type": "method",
          "parameters": [
            "obj",
            "path"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "logRuleExecution",
          "type": "method",
          "parameters": [
            "ruleId",
            "ratId",
            "triggered"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "ensureRulesLoaded",
          "type": "method",
          "parameters": [],
          "line": 198,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "needsRefresh || this.rules.size === 0"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "createRule",
          "type": "method",
          "parameters": [
            "ruleData",
            "userId"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 229,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "updateRule",
          "type": "method",
          "parameters": [
            "ruleId",
            "updates",
            "userId"
          ],
          "line": 235,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "deactivateRule",
          "type": "method",
          "parameters": [
            "ruleId",
            "userId"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "getArticleDetails",
          "type": "method",
          "parameters": [
            "articleNumber"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 271,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateRuleCondition",
          "type": "method",
          "parameters": [
            "condition"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 298,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "invalidVariables.length > 0"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "extractVariables",
          "type": "method",
          "parameters": [
            "condition"
          ],
          "line": 315,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRuleExecutionStats",
          "type": "method",
          "parameters": [],
          "line": 321,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ruleStats[stat.rule_id]"
          ],
          "line": 337,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "stat.triggered"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "syncWithLatestLaw",
          "type": "method",
          "parameters": [],
          "line": 364,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const update of updates"
          ],
          "line": 375,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 380,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "processLawUpdate",
          "type": "method",
          "parameters": [
            "update"
          ],
          "line": 386,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "update.update_type === 'new_article'"
          ],
          "line": 388,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "update.update_type === 'modified_article'"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "update.update_type === 'new_requirement'"
          ],
          "line": 392,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 401,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "createRuleFromArticle",
          "type": "method",
          "parameters": [
            "update"
          ],
          "line": 406,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "updateRulesForArticle",
          "type": "method",
          "parameters": [
            "update"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getComplianceGuidance",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 444,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "alert.action?.includes('EIPD')"
          ],
          "line": 463,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "alert.action?.includes('DPA')"
          ],
          "line": 471,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateDeadline",
          "type": "method",
          "parameters": [
            "action"
          ],
          "line": 483,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ensureRulesLoaded",
          "type": "method",
          "parameters": [],
          "line": 498,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "needsRefresh || this.rules.size === 0"
          ],
          "line": 502,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getArticleText",
          "type": "method",
          "parameters": [
            "articleNumber"
          ],
          "line": 507,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 518,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "suggestBestPractices",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 524,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 536,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "inferCategory",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 542,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('marketing') || finalidad.includes('publicidad')"
          ],
          "line": 545,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('empleado') || finalidad.includes('nomina')"
          ],
          "line": 548,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('cliente') || finalidad.includes('venta')"
          ],
          "line": 551,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('salud') || finalidad.includes('medico')"
          ],
          "line": 554,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "recordCompliance",
          "type": "method",
          "parameters": [
            "ratId",
            "complianceLevel",
            "userId"
          ],
          "line": 561,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 571,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getComplianceTrend",
          "type": "method",
          "parameters": [
            "tenantId",
            "days = 30"
          ],
          "line": 576,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 592,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "usesAutomatedDecisions",
        "userId",
        "usedVariables",
        "uses"
      ],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 71,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.372Z"
    },
    "/frontend/src/utils/errorMonitoringOnly.js": {
      "file_path": "/frontend/src/utils/errorMonitoringOnly.js",
      "lines_of_code": 461,
      "imports": [
        "./fileErrorLogger"
      ],
      "exports": [
        "errorMonitor",
        "const",
        "const",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 12,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupErrorPatterns",
          "type": "method",
          "parameters": [],
          "line": 25,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "init",
          "type": "method",
          "parameters": [],
          "line": 60,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 70,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupGlobalErrorCapture",
          "type": "method",
          "parameters": [],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupConsoleMonitoring",
          "type": "method",
          "parameters": [],
          "line": 103,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupFetchMonitoring",
          "type": "method",
          "parameters": [],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!response.ok"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "duration > 5000"
          ],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 157,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "logError",
          "type": "method",
          "parameters": [
            "type",
            "errorData",
            "context = {}"
          ],
          "line": 174,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorEntry.severity === 'CRITICAL'"
          ],
          "line": 193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.errorLog.length > 500"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeConsoleMessage",
          "type": "method",
          "parameters": [
            "level",
            "args"
          ],
          "line": 210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [patternType",
            "config] of this.patterns"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "config.patterns.some(pattern => message.includes(pattern.toLowerCase()))"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "determineSeverity",
          "type": "method",
          "parameters": [
            "type",
            "errorData"
          ],
          "line": 228,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [patternType",
            "config] of this.patterns"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "config.patterns.some(pattern => errorText.includes(pattern.toLowerCase()))"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "type.includes('CRITICAL') || type.includes('406') || type.includes('undefined')"
          ],
          "line": 238,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "type.includes('HTTP_ERROR') || type.includes('MISSING')"
          ],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "createCriticalAlert",
          "type": "method",
          "parameters": [
            "errorEntry"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateAlertMessage",
          "type": "method",
          "parameters": [
            "errorEntry"
          ],
          "line": 276,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "errorEntry.type"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logSpecificError",
          "type": "method",
          "parameters": [
            "errorEntry"
          ],
          "line": 298,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorEntry.severity === 'CRITICAL'"
          ],
          "line": 308,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorEntry.severity === 'HIGH'"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "fileError"
          ],
          "line": 316,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "startPeriodicReporting",
          "type": "method",
          "parameters": [],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generatePeriodicReport",
          "type": "method",
          "parameters": [],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getFullReport",
          "type": "method",
          "parameters": [],
          "line": 362,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeErrorPatterns",
          "type": "method",
          "parameters": [],
          "line": 386,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [],
          "line": 403,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rls406Count > 3"
          ],
          "line": 410,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "undefinedIdCount > 2"
          ],
          "line": 418,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "criticalCount > 5"
          ],
          "line": 426,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "stop",
          "type": "method",
          "parameters": [],
          "line": 440,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 456,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "userAgent"
      ],
      "dependencies": [
        "./fileErrorLogger"
      ],
      "complexity_score": 28,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.376Z"
    },
    "/frontend/src/utils/errorPreventionMonitor.js": {
      "file_path": "/frontend/src/utils/errorPreventionMonitor.js",
      "lines_of_code": 384,
      "imports": [
        "./smartSupabaseClient",
        "./supabaseRLSGuard"
      ],
      "exports": [
        "errorMonitor",
        "const",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 12,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "init",
          "type": "method",
          "parameters": [],
          "line": 38,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "registerErrorPatterns",
          "type": "method",
          "parameters": [],
          "line": 60,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "detectErrorType",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [type",
            "config] of this.errorPatterns"
          ],
          "line": 96,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "config.patterns.some(pattern => errorMsg.includes(pattern))"
          ],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupGlobalErrorHandlers",
          "type": "method",
          "parameters": [],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!response.ok && this.isSupabaseRequest(args[0])"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isSupabaseRequest(args[0])"
          ],
          "line": 134,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isSupabaseError(event.reason)"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isSupabaseError({ message: errorMsg })"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isSupabaseRequest",
          "type": "method",
          "parameters": [
            "url"
          ],
          "line": 163,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isSupabaseError",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleSupabaseHttpError",
          "type": "method",
          "parameters": [
            "status",
            "url",
            "response"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "parseError"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleSupabaseNetworkError",
          "type": "method",
          "parameters": [
            "error",
            "url"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "preventError",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorType.autoFix"
          ],
          "line": 224,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "applyAutoFix",
          "type": "method",
          "parameters": [
            "errorType"
          ],
          "line": 236,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "errorType.solution"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "retryWithBackoff",
          "type": "method",
          "parameters": [
            "originalError",
            "maxRetries = 3"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let attempt = 1; attempt <= maxRetries; attempt++"
          ],
          "line": 261,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logErrorForAnalysis",
          "type": "method",
          "parameters": [
            "errorType"
          ],
          "line": 273,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "startPeriodicHealthCheck",
          "type": "method",
          "parameters": [],
          "line": 287,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "performHealthCheck",
          "type": "method",
          "parameters": [],
          "line": 296,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "successRate < 80"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 316,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getHealthReport",
          "type": "method",
          "parameters": [],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.preventedErrors.length > 10"
          ],
          "line": 341,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.healthMetrics.fallbacksUsed > this.healthMetrics.totalQueries * 0.3"
          ],
          "line": 345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "recentRLSErrors.length > 5"
          ],
          "line": 353,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "stop",
          "type": "method",
          "parameters": [],
          "line": 363,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 380,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "use_smart_client_fallback"
      ],
      "dependencies": [
        "./smartSupabaseClient",
        "./supabaseRLSGuard"
      ],
      "complexity_score": 27,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.379Z"
    },
    "/frontend/src/utils/fileErrorLogger.js": {
      "file_path": "/frontend/src/utils/fileErrorLogger.js",
      "lines_of_code": 511,
      "imports": [],
      "exports": [
        "fileErrorLogger"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 9,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupErrorDirectory",
          "type": "method",
          "parameters": [],
          "line": 21,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 38,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "logCriticalError",
          "type": "method",
          "parameters": [
            "type",
            "details",
            "source = 'UNKNOWN'"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "logHighError",
          "type": "method",
          "parameters": [
            "type",
            "details",
            "source = 'UNKNOWN'"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "logMediumError",
          "type": "method",
          "parameters": [
            "type",
            "details",
            "source = 'UNKNOWN'"
          ],
          "line": 82,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "logEarlyWarning",
          "type": "method",
          "parameters": [
            "type",
            "predictedError",
            "preventionAction",
            "details"
          ],
          "line": 99,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "logDatabaseHealth",
          "type": "method",
          "parameters": [
            "healthReport"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "logValidationError",
          "type": "method",
          "parameters": [
            "tableName",
            "operation",
            "validationResult"
          ],
          "line": 134,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "writeErrorToFile",
          "type": "method",
          "parameters": [
            "errorEntry",
            "filename = null"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "writeToFile",
          "type": "method",
          "parameters": [
            "filename",
            "content"
          ],
          "line": 176,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "window.showSaveFilePicker"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 186,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "writeWithFileSystemAPI",
          "type": "method",
          "parameters": [
            "filename",
            "content"
          ],
          "line": 197,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.name !== 'AbortError'"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "downloadFile",
          "type": "method",
          "parameters": [
            "filename",
            "content"
          ],
          "line": 223,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "formatLogEntry",
          "type": "method",
          "parameters": [
            "type",
            "entry"
          ],
          "line": 249,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "entry.details"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "entry.predicted_error"
          ],
          "line": 269,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "entry.errors && entry.errors.length > 0"
          ],
          "line": 275,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "entry.warnings && entry.warnings.length > 0"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "entry.system_state"
          ],
          "line": 293,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "formatDetails",
          "type": "method",
          "parameters": [
            "details"
          ],
          "line": 307,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof details === 'string'"
          ],
          "line": 308,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof details === 'object'"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "formatHealthReport",
          "type": "method",
          "parameters": [
            "healthEntry"
          ],
          "line": 326,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "healthEntry.checks"
          ],
          "line": 337,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checkResult.error"
          ],
          "line": 342,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checkResult.details"
          ],
          "line": 345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "healthEntry.critical_issues && healthEntry.critical_issues.length > 0"
          ],
          "line": 352,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "captureSystemState",
          "type": "method",
          "parameters": [],
          "line": 367,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "captureContext",
          "type": "method",
          "parameters": [],
          "line": 386,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "formatSystemState",
          "type": "method",
          "parameters": [
            "state"
          ],
          "line": 398,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof state.memory === 'object'"
          ],
          "line": 402,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof state.connection === 'object'"
          ],
          "line": 405,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateDailySummary",
          "type": "method",
          "parameters": [],
          "line": 414,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "formatDailySummary",
          "type": "method",
          "parameters": [
            "summary"
          ],
          "line": 436,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "summary.most_common_errors.length > 0"
          ],
          "line": 451,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getMostCommonErrors",
          "type": "method",
          "parameters": [],
          "line": 466,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "clearErrorBuffer",
          "type": "method",
          "parameters": [],
          "line": 483,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStats",
          "type": "method",
          "parameters": [],
          "line": 491,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "user_agent",
        "userAgent",
        "used",
        "usedJSHeapSize"
      ],
      "dependencies": [],
      "complexity_score": 26,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.382Z"
    },
    "/frontend/src/utils/frontendValidator.js": {
      "file_path": "/frontend/src/utils/frontendValidator.js",
      "lines_of_code": 805,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "frontendValidator"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateAllModules",
          "type": "method",
          "parameters": [],
          "line": 20,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const module of modules"
          ],
          "line": 42,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 48,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateModule",
          "type": "method",
          "parameters": [
            "module"
          ],
          "line": 71,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasErrors"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasWarnings"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 120,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "checkComponentFile",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const path of possiblePaths"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "response.ok"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "e"
          ],
          "line": 146,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 152,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateJSSyntax",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 160,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!componentPath"
          ],
          "line": 165,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 184,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateImports",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 192,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missingImports.length > 0"
          ],
          "line": 205,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 216,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateHTMLStructure",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 224,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateSupabaseIntegration",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 258,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateMUIUsage",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 282,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateRouting",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!routeExists"
          ],
          "line": 315,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 326,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateValidationReport",
          "type": "method",
          "parameters": [
            "results"
          ],
          "line": 334,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "summary.errorCount > 0"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "summary.warningCount > 0"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "summary.errorCount > 0"
          ],
          "line": 354,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "summary.warningCount > 0"
          ],
          "line": 363,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "saveValidationReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 383,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 402,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateComponentLive",
          "type": "method",
          "parameters": [
            "componentName",
            "mountElement = null"
          ],
          "line": 410,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.jsErrors.length > 0"
          ],
          "line": 442,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.cssErrors.length > 0 || validation.accessibilityIssues.length > 0"
          ],
          "line": 444,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.renderSuccess && validation.htmlValid"
          ],
          "line": 446,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 452,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testComponentRender",
          "type": "method",
          "parameters": [
            "componentName",
            "mountElement"
          ],
          "line": 463,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 472,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateGeneratedHTML",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 481,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 491,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "captureJSErrors",
          "type": "method",
          "parameters": [],
          "line": 500,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateAppliedCSS",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 531,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "backgroundColor === 'rgb(255",
            "255",
            "255)' || backgroundColor === 'white'"
          ],
          "line": 541,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!usesDarkTheme && element.children.length > 0"
          ],
          "line": 560,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 568,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "checkAccessibility",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 581,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!button.textContent && !button.getAttribute('aria-label')"
          ],
          "line": 590,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "headings.length === 0 && element.children.length > 3"
          ],
          "line": 601,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "lowContrastElements.length > 0"
          ],
          "line": 611,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 619,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "measurePerformance",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 632,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "window.performance"
          ],
          "line": 643,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "performance.memory"
          ],
          "line": 648,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 654,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getComponentPath",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 665,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "componentUsesSupabase",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 677,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getComponentSpecificChecks",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 689,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "checkRouteInApp",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 716,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "hasImproperNesting",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 721,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasRequiredAttributes",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 727,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const el of interactiveElements"
          ],
          "line": 731,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!el.getAttribute('aria-label') && !el.textContent && !el.getAttribute('title')"
          ],
          "line": 732,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "quickValidation",
          "type": "method",
          "parameters": [],
          "line": 743,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "printStatusReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 760,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.errorCount === 0"
          ],
          "line": 772,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "process.env.NODE_ENV === 'development'"
          ],
          "line": 797,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "used",
        "usesSupabase",
        "usesDarkTheme",
        "usedJSHeapSize"
      ],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 69,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.387Z"
    },
    "/frontend/src/utils/humanInteractionSimulator.js": {
      "file_path": "/frontend/src/utils/humanInteractionSimulator.js",
      "lines_of_code": 778,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "humanSimulator"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 15,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "runCompleteSystemSimulation",
          "type": "method",
          "parameters": [],
          "line": 32,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isRunning"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const testName of testSequence"
          ],
          "line": 60,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!testResult.success"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "executeTest",
          "type": "method",
          "parameters": [
            "testName"
          ],
          "line": 95,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "testName"
          ],
          "line": 111,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "simulateLoginFlow",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 164,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!loginButton"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!loginForm"
          ],
          "line": 182,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "simulateNavigationTest",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 195,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const item of navigationItems"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!navElement"
          ],
          "line": 211,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!pageLoaded"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "simulateOrganizationCreation",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!newOrgButton"
          ],
          "line": 243,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!saveButton"
          ],
          "line": 273,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!success"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!savedOrg"
          ],
          "line": 296,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "simulateRATCreationFlow",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 307,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!newRATButton"
          ],
          "line": 318,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "simulateRATFormSteps",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 331,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "fillRATStep1",
          "type": "method",
          "parameters": [],
          "line": 374,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "fillRATStep2",
          "type": "method",
          "parameters": [],
          "line": 383,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const category of categories"
          ],
          "line": 386,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checkbox"
          ],
          "line": 388,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fillRATStep3",
          "type": "method",
          "parameters": [],
          "line": 395,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "baseLegal"
          ],
          "line": 398,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fillRATStep4",
          "type": "method",
          "parameters": [],
          "line": 404,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "fillRATStep5",
          "type": "method",
          "parameters": [],
          "line": 412,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "fillRATStep6",
          "type": "method",
          "parameters": [],
          "line": 419,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "plazoSelect"
          ],
          "line": 421,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fillRATStep7",
          "type": "method",
          "parameters": [],
          "line": 427,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "noTransfer"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fillRATStep8",
          "type": "method",
          "parameters": [],
          "line": 436,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const measure of securityMeasures"
          ],
          "line": 438,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checkbox"
          ],
          "line": 440,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "finalizeRAT",
          "type": "method",
          "parameters": [],
          "line": 447,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!saveButton"
          ],
          "line": 451,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "verifyRATCreation",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 458,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!successMessage"
          ],
          "line": 464,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rats || rats.length === 0"
          ],
          "line": 475,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "humanClick",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 486,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "humanType",
          "type": "method",
          "parameters": [
            "element",
            "text",
            "options = {}"
          ],
          "line": 502,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < text.length; i++"
          ],
          "line": 515,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "findElement",
          "type": "method",
          "parameters": [
            "selectors",
            "timeout = 5000"
          ],
          "line": 530,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "Date.now() - startTime < timeout"
          ],
          "line": 535,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const selector of selectorList"
          ],
          "line": 536,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!element && selector.includes(':contains(')"
          ],
          "line": 541,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "element && this.isElementVisible(element)"
          ],
          "line": 552,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 555,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fillForm",
          "type": "method",
          "parameters": [
            "fieldMap"
          ],
          "line": 566,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [selector",
            "value] of Object.entries(fieldMap)"
          ],
          "line": 567,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "field"
          ],
          "line": 569,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "clickNextButton",
          "type": "method",
          "parameters": [],
          "line": 576,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "nextButton"
          ],
          "line": 584,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "selectOption",
          "type": "method",
          "parameters": [
            "selectElement",
            "value"
          ],
          "line": 590,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "waitForPageLoad",
          "type": "method",
          "parameters": [
            "timeout = 10000"
          ],
          "line": 598,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "Date.now() - startTime < timeout"
          ],
          "line": 601,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "document.readyState === 'complete'"
          ],
          "line": 602,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "waitForSuccess",
          "type": "method",
          "parameters": [
            "timeout = 5000"
          ],
          "line": 612,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "Date.now() - startTime < timeout"
          ],
          "line": 623,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const selector of successSelectors"
          ],
          "line": 624,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "element && this.isElementVisible(element)"
          ],
          "line": 626,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "navigateToPage",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 636,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "link"
          ],
          "line": 640,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "humanDelay",
          "type": "method",
          "parameters": [
            "type",
            "customMs"
          ],
          "line": 652,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "isElementVisible",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 660,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getCurrentElement",
          "type": "method",
          "parameters": [],
          "line": 669,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "formatDuration",
          "type": "method",
          "parameters": [
            "ms"
          ],
          "line": 673,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [
            "simulation"
          ],
          "line": 679,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "simulation.success_rate < 80"
          ],
          "line": 682,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeCommonErrors",
          "type": "method",
          "parameters": [
            "errors"
          ],
          "line": 702,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!errorGroups[key]"
          ],
          "line": 708,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getErrorRecommendation",
          "type": "method",
          "parameters": [
            "errorMessage"
          ],
          "line": 724,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorMessage.includes('no encontrado')"
          ],
          "line": 725,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorMessage.includes('base de datos')"
          ],
          "line": 728,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorMessage.includes('navegación')"
          ],
          "line": 731,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "saveSimulationResults",
          "type": "method",
          "parameters": [
            "simulation"
          ],
          "line": 737,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 748,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "simulateProviderManagement",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 754,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "simulateReportGeneration",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 759,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "simulateDashboardInteraction",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 764,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "simulateSystemConfiguration",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 769,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "user_friendly_duration",
        "useEvent",
        "useenter",
        "useleave"
      ],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 70,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.392Z"
    },
    "/frontend/src/utils/iaAgentReporter.js": {
      "file_path": "/frontend/src/utils/iaAgentReporter.js",
      "lines_of_code": 458,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "iaAgentReporter"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateFullReport",
          "type": "method",
          "parameters": [],
          "line": 18,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 40,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "checkDeploymentStatus",
          "type": "method",
          "parameters": [],
          "line": 53,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "checkAgentStatus",
          "type": "method",
          "parameters": [],
          "line": 76,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "activeAgents && activeAgents.length > 0"
          ],
          "line": 85,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getRecentActivity",
          "type": "method",
          "parameters": [],
          "line": 115,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 134,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getComplianceMetrics",
          "type": "method",
          "parameters": [],
          "line": 144,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "analyzeErrors",
          "type": "method",
          "parameters": [],
          "line": 178,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkSupabaseHealth",
          "type": "method",
          "parameters": [],
          "line": 188,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getUserInteractions",
          "type": "method",
          "parameters": [],
          "line": 218,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getDocumentGeneration",
          "type": "method",
          "parameters": [],
          "line": 247,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 266,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [],
          "line": 277,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorAnalysis.errors_24h > 10"
          ],
          "line": 283,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "compliance.overall_compliance < 85"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!agentStatus.is_active"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "recommendations.length === 0"
          ],
          "line": 314,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "groupByType",
          "type": "method",
          "parameters": [
            "items",
            "typeField = 'activity_type'"
          ],
          "line": 335,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeRATs",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 344,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeNotifications",
          "type": "method",
          "parameters": [
            "notifications"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateOverallCompliance",
          "type": "method",
          "parameters": [
            "ratMetrics",
            "notificationMetrics"
          ],
          "line": 375,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratMetrics.with_sensitive_data > 0"
          ],
          "line": 379,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "notificationMetrics.overdue > 0"
          ],
          "line": 384,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateSuccessRate",
          "type": "method",
          "parameters": [
            "documents"
          ],
          "line": 391,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getMostCommonErrors",
          "type": "method",
          "parameters": [
            "errors"
          ],
          "line": 398,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "saveReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 409,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 421,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "formatConsoleReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 429,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "executeReport",
          "type": "method",
          "parameters": [],
          "line": 437,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "process.env.NODE_ENV === 'production'"
          ],
          "line": 449,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "user_interactions",
        "user_sessions",
        "user_activity"
      ],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 29,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.395Z"
    },
    "/frontend/src/utils/index.js": {
      "file_path": "/frontend/src/utils/index.js",
      "lines_of_code": 265,
      "imports": [
        "./smartSupabaseClient",
        "./supabaseRLSGuard",
        "./errorPreventionMonitor"
      ],
      "exports": [
        "errorPreventionSystem",
        "\r\n  // Sistema completo\r\n  errorPreventionSystem,\r\n  \r\n  // Cliente inteligente\r\n  smartSupabase,\r\n  getSmartSupabaseStats,\r\n  logSupabaseActivity,\r\n  \r\n  // RLS Guard\r\n  rlsGuard,\r\n  safeSupabaseQuery,\r\n  validateSupabaseQuery,\r\n  getSupabasePermissions,\r\n  \r\n  // Monitor de errores\r\n  errorMonitor,\r\n  getErrorPreventionReport,\r\n  preventSupabaseError,\r\n  isMonitorActive\r\n",
        "const",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "superSafeSupabaseQuery",
          "type": "arrow",
          "parameters": [
            "tableName",
            "queryFn",
            "options"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSystemStatus",
          "type": "arrow",
          "parameters": [],
          "line": 255,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "runSystemTest",
          "type": "arrow",
          "parameters": [],
          "line": 260,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 13,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "init",
          "type": "method",
          "parameters": [],
          "line": 26,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isInitialized"
          ],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 45,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSystemStatus",
          "type": "method",
          "parameters": [],
          "line": 53,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateSystemSummary",
          "type": "method",
          "parameters": [],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateSystemHealth",
          "type": "method",
          "parameters": [],
          "line": 95,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logSystemStatus",
          "type": "method",
          "parameters": [],
          "line": 108,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "status.summary.recommendations.length > 0"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "superSafeQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "queryFn",
            "options = {}"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "options.fallbackFn"
          ],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "runSystemTest",
          "type": "method",
          "parameters": [],
          "line": 159,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "testSmartClient",
          "type": "method",
          "parameters": [],
          "line": 174,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testRLSGuard",
          "type": "method",
          "parameters": [],
          "line": 184,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testErrorMonitor",
          "type": "method",
          "parameters": [],
          "line": 196,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 203,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "document.readyState === 'loading'"
          ],
          "line": 215,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "used"
      ],
      "dependencies": [
        "./smartSupabaseClient",
        "./supabaseRLSGuard",
        "./errorPreventionMonitor"
      ],
      "complexity_score": 18,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.398Z"
    },
    "/frontend/src/utils/inputSanitizer.js": {
      "file_path": "/frontend/src/utils/inputSanitizer.js",
      "lines_of_code": 322,
      "imports": [],
      "exports": [
        "InputSanitizer"
      ],
      "functions": [
        {
          "name": "sanitizeString",
          "type": "method",
          "parameters": [
            "input"
          ],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateRUT",
          "type": "method",
          "parameters": [
            "rut"
          ],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rutRegex.test(cleaned.replace(/\\./g",
            "''))"
          ],
          "line": 43,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = rutNumber.length - 1; i >= 0; i--"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "calculatedDV !== dv"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateEmail",
          "type": "method",
          "parameters": [
            "email"
          ],
          "line": 73,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!emailRegex.test(cleaned)"
          ],
          "line": 79,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "cleaned.includes('<') || cleaned.includes('>') || cleaned.includes('\"')"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "sanitizeCompanyName",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 94,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validatePhone",
          "type": "method",
          "parameters": [
            "phone"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!phoneRegex.test(cleaned)"
          ],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "sanitizeLongText",
          "type": "method",
          "parameters": [
            "text",
            "maxLength = 5000"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateURL",
          "type": "method",
          "parameters": [
            "url"
          ],
          "line": 138,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!['http:'",
            "'https:'].includes(urlObj.protocol)"
          ],
          "line": 145,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "url.includes('javascript:') || url.includes('data:')"
          ],
          "line": 150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "sanitizeObject",
          "type": "method",
          "parameters": [
            "obj"
          ],
          "line": 163,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [key",
            "value] of Object.entries(obj)"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof value === 'string'"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(value)"
          ],
          "line": 174,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof value === 'object' && value !== null"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateDate",
          "type": "method",
          "parameters": [
            "date"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isNaN(dateObj.getTime())"
          ],
          "line": 196,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "year < 1900 || year > 2100"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "sanitizeSQLParam",
          "type": "method",
          "parameters": [
            "param"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateNumber",
          "type": "method",
          "parameters": [
            "num",
            "min = null",
            "max = null"
          ],
          "line": 228,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isNaN(parsed)"
          ],
          "line": 231,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "min !== null && parsed < min"
          ],
          "line": 235,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "max !== null && parsed > max"
          ],
          "line": 239,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validatePassword",
          "type": "method",
          "parameters": [
            "password"
          ],
          "line": 249,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "password.length < 8"
          ],
          "line": 254,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!/[A-Z]/.test(password)"
          ],
          "line": 258,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!/[a-z]/.test(password)"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!/[0-9]/.test(password)"
          ],
          "line": 266,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!/[!@#$%^&*]/.test(password)"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errors.length > 0"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "sanitizeFileName",
          "type": "method",
          "parameters": [
            "fileName"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateFileSize",
          "type": "method",
          "parameters": [
            "sizeInBytes",
            "maxSizeMB = 10"
          ],
          "line": 298,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "sizeInBytes > maxSizeBytes"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateFileType",
          "type": "method",
          "parameters": [
            "fileName",
            "allowedTypes = ['pdf'",
            "'doc'",
            "'docx'",
            "'xls'",
            "'xlsx'",
            "'jpg'",
            "'jpeg'",
            "'png']"
          ],
          "line": 311,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!allowedTypes.includes(extension)"
          ],
          "line": 314,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [],
      "complexity_score": 40,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.400Z"
    },
    "/frontend/src/utils/instantSystemTest.js": {
      "file_path": "/frontend/src/utils/instantSystemTest.js",
      "lines_of_code": 505,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "instantTest"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "executeAllTests",
          "type": "method",
          "parameters": [],
          "line": 20,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 62,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testDatabase",
          "type": "method",
          "parameters": [],
          "line": 72,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of tables"
          ],
          "line": 87,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 94,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 107,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rat of rats"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!org"
          ],
          "line": 116,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testNavigation",
          "type": "method",
          "parameters": [],
          "line": 138,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const route of expectedRoutes"
          ],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 169,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testForms",
          "type": "method",
          "parameters": [],
          "line": 180,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < Math.min(forms.length",
            "5); i++"
          ],
          "line": 187,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testCRUDOperations",
          "type": "method",
          "parameters": [],
          "line": 223,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 246,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testCreate",
          "type": "method",
          "parameters": [],
          "line": 254,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 272,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testRead",
          "type": "method",
          "parameters": [
            "recordId"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 290,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testUpdate",
          "type": "method",
          "parameters": [
            "recordId"
          ],
          "line": 295,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 307,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testDelete",
          "type": "method",
          "parameters": [
            "recordId"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testValidationSystem",
          "type": "method",
          "parameters": [],
          "line": 332,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 357,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testPerformance",
          "type": "method",
          "parameters": [],
          "line": 368,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "performance.memory"
          ],
          "line": 388,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 395,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateSummary",
          "type": "method",
          "parameters": [
            "tests",
            "totalTime"
          ],
          "line": 406,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "displayResults",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 427,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.error"
          ],
          "line": 443,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.issues?.length > 0"
          ],
          "line": 447,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.tables"
          ],
          "line": 452,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.operations"
          ],
          "line": 458,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.metrics"
          ],
          "line": 464,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.summary.overall_status === 'NEEDS_ATTENTION'"
          ],
          "line": 473,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.summary.overall_status === 'GOOD'"
          ],
          "line": 475,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "process.env.NODE_ENV === 'development'"
          ],
          "line": 494,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "document.readyState === 'complete'"
          ],
          "line": 496,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [
        {
          "file": "",
          "table": "organizaciones",
          "operation": "select",
          "parameters": "'count', { count: 'exact', head: true }",
          "line": 374,
          "context": "const dbStart = performance.now();\r       await supabase.from('organizaciones').select('count', { count: 'exact', head: true });\r       const dbTime"
        }
      ],
      "state_management": [],
      "hooks_used": [
        "usedJSHeapSize"
      ],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 52,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.404Z"
    },
    "/frontend/src/utils/interactiveHelper.js": {
      "file_path": "/frontend/src/utils/interactiveHelper.js",
      "lines_of_code": 717,
      "imports": [
        "react",
        "@mui/material",
        "@mui/icons-material",
        "../config/supabaseClient"
      ],
      "exports": [
        "interactiveHelper",
        "const",
        "const",
        "const",
        "const",
        "const",
        "const",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "useHelp",
          "type": "arrow",
          "parameters": [],
          "line": 8,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "HelpProvider",
          "type": "arrow",
          "parameters": [
            "{ children }"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hideHelp",
          "type": "arrow",
          "parameters": [],
          "line": 282,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "addSmartAlert",
          "type": "arrow",
          "parameters": [
            "alert"
          ],
          "line": 286,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "removeSmartAlert",
          "type": "arrow",
          "parameters": [
            "alertId"
          ],
          "line": 290,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "SmartAlertSystem",
          "type": "arrow",
          "parameters": [
            "{ alerts",
            "onRemove }"
          ],
          "line": 313,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ContextualTooltip",
          "type": "arrow",
          "parameters": [
            "{ tooltip",
            "onClose }"
          ],
          "line": 337,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "HelpButton",
          "type": "arrow",
          "parameters": [
            "{ fieldId",
            "size = 'small'",
            "variant = 'icon' }"
          ],
          "line": 392,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleClick",
          "type": "arrow",
          "parameters": [],
          "line": 395,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "SmartValidationAlert",
          "type": "arrow",
          "parameters": [
            "{ validation",
            "onAction }"
          ],
          "line": 416,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ProgressIndicator",
          "type": "arrow",
          "parameters": [
            "{ currentStep",
            "totalSteps",
            "stepNames = [] }"
          ],
          "line": 433,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "InlineHelper",
          "type": "arrow",
          "parameters": [
            "{ fieldId",
            "userContext",
            "children }"
          ],
          "line": 484,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "RealTimeValidator",
          "type": "arrow",
          "parameters": [
            "{ fieldId",
            "value",
            "onValidation }"
          ],
          "line": 535,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "AutoCompleteField",
          "type": "arrow",
          "parameters": [
            "{ fieldId",
            "value",
            "onChange",
            "userContext",
            "...props }"
          ],
          "line": 634,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleSuggestionClick",
          "type": "arrow",
          "parameters": [
            "suggestion"
          ],
          "line": 658,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!context"
          ],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 17,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "loadHelpContent",
          "type": "method",
          "parameters": [],
          "line": 23,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 38,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getContextualHelp",
          "type": "method",
          "parameters": [
            "fieldId",
            "userContext = {}"
          ],
          "line": 44,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!helpItem"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "userContext.industry && helpItem.industry_specific"
          ],
          "line": 53,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "industryHelp"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "userContext.ratType && helpItem.type_specific"
          ],
          "line": 61,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeHelp"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getDefaultHelp",
          "type": "method",
          "parameters": [
            "fieldId"
          ],
          "line": 82,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logHelpUsage",
          "type": "method",
          "parameters": [
            "fieldId",
            "userId"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getSmartSuggestions",
          "type": "method",
          "parameters": [
            "fieldId",
            "currentValue",
            "context"
          ],
          "line": 120,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "trackFieldProgress",
          "type": "method",
          "parameters": [
            "fieldId",
            "userId",
            "completed",
            "timeSpent"
          ],
          "line": 137,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getPersonalizedTips",
          "type": "method",
          "parameters": [
            "userId",
            "currentStep"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!userStats || userStats.help_usage_count < 3"
          ],
          "line": 165,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "userStats?.average_time_per_step > 300"
          ],
          "line": 173,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 185,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStepSpecificTips",
          "type": "method",
          "parameters": [
            "step",
            "userStats"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "updateUserHelpStats",
          "type": "method",
          "parameters": [
            "userId",
            "action"
          ],
          "line": 219,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "fetchError && fetchError.code === 'PGRST116'"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "existing"
          ],
          "line": 240,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 254,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "variant === 'icon'"
          ],
          "line": 399,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation && !validation.valid"
          ],
          "line": 420,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "fieldId"
          ],
          "line": 490,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tips.length > 0"
          ],
          "line": 493,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && value.length > 3"
          ],
          "line": 540,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "onValidation"
          ],
          "line": 545,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 548,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 575,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "loadTemplates",
          "type": "method",
          "parameters": [],
          "line": 579,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 592,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "suggestCompletion",
          "type": "method",
          "parameters": [
            "fieldId",
            "partialValue",
            "context"
          ],
          "line": 597,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 611,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "recordCompletion",
          "type": "method",
          "parameters": [
            "fieldId",
            "finalValue",
            "wasSuggested",
            "userId"
          ],
          "line": 617,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 628,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && value.length > 10"
          ],
          "line": 644,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [
        "useState",
        "useEffect",
        "useContext"
      ],
      "hooks_used": [
        "useState",
        "useEffect",
        "useContext",
        "useHelp",
        "userProgress",
        "userContext",
        "userId",
        "user_id",
        "user_context",
        "userStats",
        "user_help_stats",
        "used"
      ],
      "dependencies": [
        "react",
        "@mui/material",
        "@mui/icons-material",
        "../config/supabaseClient"
      ],
      "complexity_score": 46,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.407Z"
    },
    "/frontend/src/utils/logicAuditor.js": {
      "file_path": "/frontend/src/utils/logicAuditor.js",
      "lines_of_code": 639,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "logicAuditor"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 5,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "initializeRules",
          "type": "method",
          "parameters": [],
          "line": 14,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rat of ratsAltoRiesgo"
          ],
          "line": 23,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tieneEIPD"
          ],
          "line": 25,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const eipd of eipds"
          ],
          "line": 44,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "eipd.status === 'APROBADO' && tareasEIPD.length === 0"
          ],
          "line": 48,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rat of rats"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!estaEnInventario"
          ],
          "line": 70,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const tarea of tareasPendientes"
          ],
          "line": 90,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tarea.rat_id"
          ],
          "line": 91,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratExiste"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "auditarSistemaCompleto",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isAuditing"
          ],
          "line": 111,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rule of this.sequenceRules"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "inconsistencias.length === 0"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "ruleError"
          ],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 175,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getAllCounts",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 186,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRATsByRisk",
          "type": "method",
          "parameters": [
            "tenantId",
            "riskLevel"
          ],
          "line": 209,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getEIPDsByRATs",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratIds"
          ],
          "line": 221,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getAllRATs",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 234,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getInventarioRATs",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 245,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getEIPDs",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 255,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getDPOTasksByEIPD",
          "type": "method",
          "parameters": [
            "tenantId",
            "eipdId"
          ],
          "line": 265,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getDPOPendingTasks",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 276,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkRATExists",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 287,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [
            "inconsistencies"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const category of inconsistencies"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const issue of category.issues || []"
          ],
          "line": 303,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "issue.problema"
          ],
          "line": 304,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "autoFixInconsistencies",
          "type": "method",
          "parameters": [
            "tenantId",
            "auditReport"
          ],
          "line": 342,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const recommendation of auditReport.recommendations || []"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "recommendation.action"
          ],
          "line": 353,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 374,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "autoGenerateEIPDForRAT",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 426,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "autoRegisterRATInInventory",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 432,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 472,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "cleanupOrphanTask",
          "type": "method",
          "parameters": [
            "tenantId",
            "taskId"
          ],
          "line": 478,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 499,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "saveAuditReport",
          "type": "method",
          "parameters": [
            "auditReport"
          ],
          "line": 506,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 530,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "startPeriodicAudit",
          "type": "method",
          "parameters": [
            "tenantId",
            "intervalMinutes = 30"
          ],
          "line": 537,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "auditReport.summary.failed_rules > 0"
          ],
          "line": 545,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 550,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateBeforeAction",
          "type": "method",
          "parameters": [
            "tenantId",
            "action",
            "data"
          ],
          "line": 557,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "action"
          ],
          "line": 560,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateRATCanBeClosed",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 572,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rat.nombre_actividad || !rat.base_legal"
          ],
          "line": 578,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.nivel_riesgo === 'ALTO'"
          ],
          "line": 583,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "eipds.length === 0"
          ],
          "line": 585,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!eipds.some(e => e.status === 'APROBADO')"
          ],
          "line": 587,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tareasDPO.some(t => t.estado === 'completada')"
          ],
          "line": 594,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 604,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRATById",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 612,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getDPOTasksByRAT",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 624,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [
        {
          "file": "",
          "table": "mapeo_datos_rat",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 189,
          "context": ", tasks, inventory] = await Promise.all([         supabase.from('mapeo_datos_rat').select('id', { count: 'exact' }).eq('tenant_id', tenantId),"
        },
        {
          "file": "",
          "table": "generated_documents",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 190,
          "context": "nt: 'exact' }).eq('tenant_id', tenantId),         supabase.from('generated_documents').select('id', { count: 'exact' }).eq('document_type', 'EIPD'),"
        },
        {
          "file": "",
          "table": "actividades_dpo",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 191,
          "context": ": 'exact' }).eq('document_type', 'EIPD'),         supabase.from('actividades_dpo').select('id', { count: 'exact' }).eq('tenant_id', tenantId), supabas"
        },
        {
          "file": "",
          "table": "mapeo_datos_rat",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 192,
          "context": "', { count: 'exact' }).eq('tenant_id', tenantId), supabase.from('mapeo_datos_rat').select('id', { count: 'exact' }).eq('tenant_id', tenantId)       ])"
        }
      ],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 75,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.411Z"
    },
    "/frontend/src/utils/moduleValidator.js": {
      "file_path": "/frontend/src/utils/moduleValidator.js",
      "lines_of_code": 800,
      "imports": [
        "react",
        "@testing-library/react",
        "react-router-dom",
        "@mui/material/styles"
      ],
      "exports": [
        "const",
        "del",
        "del",
        "ModuleValidator",
        "const",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "TestWrapper",
          "type": "arrow",
          "parameters": [
            "{ children }"
          ],
          "line": 22,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 31,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateAllModules",
          "type": "method",
          "parameters": [],
          "line": 41,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const module of modules"
          ],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateModule",
          "type": "method",
          "parameters": [
            "moduleInfo"
          ],
          "line": 76,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "passedTests === totalTests"
          ],
          "line": 125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "passedTests >= totalTests * 0.7"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testModuleImport",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!moduleExists"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!syntaxValid"
          ],
          "line": 177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!importsValid"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 190,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testComponentStructure",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!hasDefaultExport"
          ],
          "line": 216,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!hooksValid"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!jsxStructureValid"
          ],
          "line": 228,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 235,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testComponentProps",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 247,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!propsValid"
          ],
          "line": 261,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!callbacksValid"
          ],
          "line": 267,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testBasicRender",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 286,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!renderResult.success"
          ],
          "line": 300,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!elementsValid"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 313,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testSystemIntegration",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 325,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!routingValid"
          ],
          "line": 339,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!authValid"
          ],
          "line": 345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!apiValid"
          ],
          "line": 351,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testAccessibility",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 370,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ariaValid"
          ],
          "line": 384,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!keyboardValid"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testPerformance",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 410,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "renderTime > 100"
          ],
          "line": 424,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "memoryLeaks.length > 0"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 437,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateSpecificModule",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 450,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const test of tests"
          ],
          "line": 474,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 478,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testDataSubjectRightsSpecific",
          "type": "method",
          "parameters": [],
          "line": 493,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "testLegalUpdatesMonitorSpecific",
          "type": "method",
          "parameters": [],
          "line": 505,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "testRATSearchFilterSpecific",
          "type": "method",
          "parameters": [],
          "line": 517,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "testRATVersionControlSpecific",
          "type": "method",
          "parameters": [],
          "line": 529,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkStepperNavigation",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 544,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkFormValidation",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 553,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkSearchFunctionality",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 562,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkVersionHistory",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 571,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkFileExists",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 583,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkJSXSyntax",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 588,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkRequiredImports",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 593,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkDefaultExport",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 598,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "simulateRender",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 603,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "measureRenderTime",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 608,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "generateValidationReport",
          "type": "method",
          "parameters": [],
          "line": 616,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [],
          "line": 644,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.criticalErrors.length > 0"
          ],
          "line": 647,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.warnings.length > 3"
          ],
          "line": 655,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "failedModules.length > 0"
          ],
          "line": 664,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "printValidationReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 675,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const module of report.modules"
          ],
          "line": 689,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "module.errors.length > 0"
          ],
          "line": 699,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.recommendations.length > 0"
          ],
          "line": 706,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "quickValidation",
          "type": "method",
          "parameters": [],
          "line": 719,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const moduleName of recentModules"
          ],
          "line": 730,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 744,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 771,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [
        "TestWrapper"
      ],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "react",
        "@testing-library/react",
        "react-router-dom",
        "@mui/material/styles"
      ],
      "complexity_score": 54,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.416Z"
    },
    "/frontend/src/utils/preventiveAI_DISABLED.js": {
      "file_path": "/frontend/src/utils/preventiveAI_DISABLED.js",
      "lines_of_code": 48,
      "imports": [],
      "exports": [
        "disabledPreventiveAI"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 14,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "autoCorrectInRealTime",
          "type": "method",
          "parameters": [],
          "line": 21,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "autoCreateDPOApprovalTask",
          "type": "method",
          "parameters": [],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateReport",
          "type": "method",
          "parameters": [],
          "line": 32,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [],
      "complexity_score": 0,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.418Z"
    },
    "/frontend/src/utils/ratEditModeFix.js": {
      "file_path": "/frontend/src/utils/ratEditModeFix.js",
      "lines_of_code": 484,
      "imports": [],
      "exports": [
        "ratEditModeFix",
        "const",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 9,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupEditModeEnhancements",
          "type": "method",
          "parameters": [],
          "line": 18,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "detectMissingFeatures",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "viewMode === 'edit'"
          ],
          "line": 82,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentStep !== undefined && currentStep >= 0"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasStepNavigation(componentProps)"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "currentStep"
          ],
          "line": 91,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullEmpresaOptions(componentProps)"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullCategoriasOptions(componentProps)"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullFinalidadesOptions(componentProps)"
          ],
          "line": 103,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullLegitimacionOptions(componentProps)"
          ],
          "line": 108,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullTransferenciasOptions(componentProps)"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullSeguridadOptions(componentProps)"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasStepNavigation",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasFullEmpresaOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 141,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasFullCategoriasOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 157,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasFullFinalidadesOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasFullLegitimacionOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasFullTransferenciasOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 188,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasFullSeguridadOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 197,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "applyEditModeFixes",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missing.length === 0"
          ],
          "line": 210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "feature"
          ],
          "line": 217,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fixWizardNavigation",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 252,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!componentProps.handleNextStep"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentStep < steps.length - 1"
          ],
          "line": 259,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!componentProps.handleBackStep"
          ],
          "line": 265,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentStep > 0"
          ],
          "line": 268,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fixEmpresaDataEditing",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable"
          ],
          "line": 286,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fixCategoriasSelection",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.categorias"
          ],
          "line": 315,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 327,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fixFinalidadesOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.finalidades"
          ],
          "line": 343,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fixLegitimacionOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 360,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.legitimacion"
          ],
          "line": 365,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 371,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fixTransferenciasOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 382,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.transferencias"
          ],
          "line": 387,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fixSeguridadOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 408,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.medidas_seguridad"
          ],
          "line": 413,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 423,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateEditModeReport",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 434,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [
            "missing"
          ],
          "line": 452,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missing.includes('WIZARD_NAVIGATION')"
          ],
          "line": 455,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missing.includes('EMPRESA_DATA_EDITING')"
          ],
          "line": 459,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missing.length > 3"
          ],
          "line": 463,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [],
      "complexity_score": 35,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.421Z"
    },
    "/frontend/src/utils/rateLimiter.js": {
      "file_path": "/frontend/src/utils/rateLimiter.js",
      "lines_of_code": 221,
      "imports": [],
      "exports": [
        "rateLimiter",
        "const",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 6,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isAllowed",
          "type": "method",
          "parameters": [
            "key",
            "action = 'default'"
          ],
          "line": 21,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isBlocked(compositeKey)"
          ],
          "line": 25,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.checkRateLimit(key)"
          ],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "recordAttempt",
          "type": "method",
          "parameters": [
            "key",
            "action = 'default'",
            "success = false"
          ],
          "line": 41,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.attempts.has(compositeKey)"
          ],
          "line": 45,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "failedAttempts.length >= this.config.maxAttempts"
          ],
          "line": 62,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isBlocked",
          "type": "method",
          "parameters": [
            "key"
          ],
          "line": 73,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.blocked.has(key)"
          ],
          "line": 74,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "now - blockTime > this.config.blockDuration"
          ],
          "line": 81,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "block",
          "type": "method",
          "parameters": [
            "key"
          ],
          "line": 92,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "checkRateLimit",
          "type": "method",
          "parameters": [
            "key"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.requestCounts.has(rateKey)"
          ],
          "line": 105,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "count >= this.config.maxRequestsPerMinute"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "cleanupOldCounts",
          "type": "method",
          "parameters": [],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [key] of this.requestCounts"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentMinute - keyMinute > 5"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getBlockTimeRemaining",
          "type": "method",
          "parameters": [
            "key",
            "action = 'default'"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.isBlocked(compositeKey)"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "clearAttempts",
          "type": "method",
          "parameters": [
            "key",
            "action = 'default'"
          ],
          "line": 156,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStats",
          "type": "method",
          "parameters": [],
          "line": 165,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "userAttempts",
        "username",
        "userId"
      ],
      "dependencies": [],
      "complexity_score": 12,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.424Z"
    },
    "/frontend/src/utils/secureLogger.js": {
      "file_path": "/frontend/src/utils/secureLogger.js",
      "lines_of_code": 103,
      "imports": [],
      "exports": [
        "SecureLogger",
        "const"
      ],
      "functions": [
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(obj)"
          ],
          "line": 21,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [key",
            "value] of Object.entries(obj)"
          ],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "SecureLogger.SENSITIVE_FIELDS.some(field => keyLower.includes(field))"
          ],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof value === 'object' && value !== null"
          ],
          "line": 34,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "strValue.length > 20"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "user"
      ],
      "dependencies": [],
      "complexity_score": 12,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.426Z"
    },
    "/frontend/src/utils/secureTokens.js": {
      "file_path": "/frontend/src/utils/secureTokens.js",
      "lines_of_code": 100,
      "imports": [],
      "exports": [
        "SecureTokenGenerator",
        "const"
      ],
      "functions": [
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < data.length; i++"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < input.length; i++"
          ],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "payload.exp && payload.exp < Math.floor(Date.now() / 1000)"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 89,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "user",
        "user_"
      ],
      "dependencies": [],
      "complexity_score": 8,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.429Z"
    },
    "/frontend/src/utils/semanticValidator.js": {
      "file_path": "/frontend/src/utils/semanticValidator.js",
      "lines_of_code": 265,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "semanticValidator"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 4,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "loadValidationRules",
          "type": "method",
          "parameters": [],
          "line": 9,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getDefaultRules",
          "type": "method",
          "parameters": [],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateFinalidad",
          "type": "method",
          "parameters": [
            "finalidad",
            "baseJuridica",
            "categoriasDatos = []"
          ],
          "line": 53,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.validationRules"
          ],
          "line": 67,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rule of this.validationRules"
          ],
          "line": 71,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.matchesPattern(finalidadText",
            "rule.pattern)"
          ],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!isValidBase"
          ],
          "line": 75,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rule.severity === 'error'"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rule.severity === 'warning'"
          ],
          "line": 87,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!coherenceCheck.coherent"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "complexityCheck.needsImprovement"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchesPattern",
          "type": "method",
          "parameters": [
            "text",
            "pattern"
          ],
          "line": 111,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "pattern instanceof RegExp"
          ],
          "line": 112,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "checkBaseJuridica",
          "type": "method",
          "parameters": [
            "currentBase",
            "requiredBase"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "checkCoherence",
          "type": "method",
          "parameters": [
            "finalidadText",
            "categoriasDatos"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "sensitiveDataDetected && routineProcessDetected"
          ],
          "line": 141,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeComplexity",
          "type": "method",
          "parameters": [
            "finalidadText"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "wordCount < 10"
          ],
          "line": 158,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasVagueTerms && !hasSpecificTerms"
          ],
          "line": 167,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "suggestImprovements",
          "type": "method",
          "parameters": [
            "finalidadText",
            "baseJuridica"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && templates?.length > 0"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "extractKeywords",
          "type": "method",
          "parameters": [
            "text"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isStopWord",
          "type": "method",
          "parameters": [
            "word"
          ],
          "line": 215,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "saveFinalidadTemplate",
          "type": "method",
          "parameters": [
            "finalidad",
            "baseJuridica",
            "categoriasDatos",
            "userId"
          ],
          "line": 220,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 243,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateAndSuggest",
          "type": "method",
          "parameters": [
            "finalidad",
            "baseJuridica",
            "categoriasDatos",
            "userId"
          ],
          "line": 248,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.valid && finalidad.length > 50"
          ],
          "line": 252,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "userId",
        "used"
      ],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 24,
      "potential_issues": [],
      "analyzed_at": "2025-09-04T15:09:36.431Z"
    },
    "/frontend/src/utils/smartDeduplication.js": {
      "file_path": "/frontend/src/utils/smartDeduplication.js",
      "lines_of_code": 783,
      "imports": [],
      "exports": [
        "smartDeduplication"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 7,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeRAT",
          "type": "method",
          "parameters": [
            "newRAT",
            "existingRATs"
          ],
          "line": 16,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const existingRAT of existingRATs"
          ],
          "line": 19,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity.score > this.similarityThreshold"
          ],
          "line": 22,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateComprehensiveSimilarity",
          "type": "method",
          "parameters": [
            "ratA",
            "ratB"
          ],
          "line": 41,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "compareResponsable",
          "type": "method",
          "parameters": [
            "respA",
            "respB"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "respA.rut && respB.rut && respA.rut === respB.rut"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "compareFinalidad",
          "type": "method",
          "parameters": [
            "finalidadA",
            "finalidadB"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "compareKeywords",
          "type": "method",
          "parameters": [
            "textA",
            "textB"
          ],
          "line": 149,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "detectBusinessCategories",
          "type": "method",
          "parameters": [
            "text",
            "keywords"
          ],
          "line": 167,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [category",
            "words] of Object.entries(keywords)"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasKeyword"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeBusinessContext",
          "type": "method",
          "parameters": [
            "textA",
            "textB"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [context",
            "pattern] of Object.entries(patterns)"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasA === hasB"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "compareArrays",
          "type": "method",
          "parameters": [
            "arrayA",
            "arrayB"
          ],
          "line": 210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateStringSimilarity",
          "type": "method",
          "parameters": [
            "strA",
            "strB"
          ],
          "line": 226,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "cleanText",
          "type": "method",
          "parameters": [
            "text"
          ],
          "line": 244,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "levenshteinDistance",
          "type": "method",
          "parameters": [
            "strA",
            "strB"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i <= strB.length; i++"
          ],
          "line": 259,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let j = 0; j <= strA.length; j++"
          ],
          "line": 263,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 1; i <= strB.length; i++"
          ],
          "line": 267,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let j = 1; j <= strA.length; j++"
          ],
          "line": 268,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "strB.charAt(i - 1) === strA.charAt(j - 1)"
          ],
          "line": 269,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "compareTransferencias",
          "type": "method",
          "parameters": [
            "transferA",
            "transferB"
          ],
          "line": 287,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "transferA.existe === transferB.existe"
          ],
          "line": 295,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "transferA.existe && transferB.existe"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "compareBaseJuridica",
          "type": "method",
          "parameters": [
            "baseA",
            "baseB"
          ],
          "line": 314,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "compareFuenteDatos",
          "type": "method",
          "parameters": [
            "fuenteA",
            "fuenteB"
          ],
          "line": 326,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "detectConflicts",
          "type": "method",
          "parameters": [
            "similarities"
          ],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarities.categorias_datos > 0.9 && similarities.finalidad > 0.7"
          ],
          "line": 353,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "assessMergeOpportunity",
          "type": "method",
          "parameters": [
            "similarities"
          ],
          "line": 367,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarities.responsable > 0.9 && similarities.finalidad > 0.6"
          ],
          "line": 379,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "determineAction",
          "type": "method",
          "parameters": [
            "similarities"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarities.length === 0"
          ],
          "line": 398,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "maxSimilarity > 0.95"
          ],
          "line": 408,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "maxSimilarity > 0.85"
          ],
          "line": 417,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRecommendation",
          "type": "method",
          "parameters": [
            "score",
            "details"
          ],
          "line": 437,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "score > 0.95"
          ],
          "line": 438,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "score > 0.85"
          ],
          "line": 446,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "score > 0.7"
          ],
          "line": 455,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "highlightDifferences",
          "type": "method",
          "parameters": [
            "details"
          ],
          "line": 473,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "details.finalidad < 0.8"
          ],
          "line": 476,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "details.categorias_datos < 0.8"
          ],
          "line": 480,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "details.base_juridica < 0.5"
          ],
          "line": 484,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "details.transferencias < 0.8"
          ],
          "line": 488,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeDepartmentPatterns",
          "type": "method",
          "parameters": [
            "ratsByDepartment"
          ],
          "line": 498,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [dept",
            "rats] of Object.entries(ratsByDepartment)"
          ],
          "line": 501,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "findCommonFinalidades",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 517,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "findDuplicateRisks",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 539,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < rats.length; i++"
          ],
          "line": 542,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let j = i + 1; j < rats.length; j++"
          ],
          "line": 543,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity > 0.8"
          ],
          "line": 546,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateBasicSimilarity",
          "type": "method",
          "parameters": [
            "ratA",
            "ratB"
          ],
          "line": 563,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "findOptimizationOpportunities",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 580,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "group.length > 1"
          ],
          "line": 587,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "groupSimilarRATs",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 603,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity > 0.7"
          ],
          "line": 617,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarRATs.length > 1"
          ],
          "line": 623,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateImprovementSuggestions",
          "type": "method",
          "parameters": [
            "rat",
            "similarRATs"
          ],
          "line": 634,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarRATs.length > 0"
          ],
          "line": 638,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "extractBestPractices",
          "type": "method",
          "parameters": [
            "similarRATs"
          ],
          "line": 669,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "completeness.length > 0 && completeness[0].score > 0.8"
          ],
          "line": 678,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "bestRAT.finalidad?.descripcion?.length > 100"
          ],
          "line": 681,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateCompletenessScore",
          "type": "method",
          "parameters": [
            "rat"
          ],
          "line": 697,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat[field]"
          ],
          "line": 709,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof rat[field] === 'object' && Object.keys(rat[field]).length > 2"
          ],
          "line": 713,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "detectMissingFields",
          "type": "method",
          "parameters": [
            "rat"
          ],
          "line": 726,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('marketing') && !rat.transferencias_internacionales?.existe"
          ],
          "line": 732,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "some",
          "type": "method",
          "parameters": [
            "c => c.includes('laboral')))"
          ],
          "line": 741,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "checkForDuplicates",
          "type": "method",
          "parameters": [
            "newRAT",
            "existingRATs"
          ],
          "line": 755,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 769,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [],
      "complexity_score": 67,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.435Z"
    },
    "/frontend/src/utils/smartSupabaseClient.js": {
      "file_path": "/frontend/src/utils/smartSupabaseClient.js",
      "lines_of_code": 442,
      "imports": [
        "../config/supabaseClient",
        "./supabaseRLSGuard"
      ],
      "exports": [
        "smartSupabase",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "logSupabaseActivity",
          "type": "arrow",
          "parameters": [],
          "line": 438,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 12,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "from",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 22,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "auth",
          "type": "method",
          "parameters": [],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStats",
          "type": "method",
          "parameters": [],
          "line": 37,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "tableName",
            "originalBuilder",
            "smartClient"
          ],
          "line": 50,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "select",
          "type": "method",
          "parameters": [
            "columns = '*'",
            "options = {}"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "eq",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "neq",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 77,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "gt",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 82,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "gte",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 87,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "lt",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 92,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "lte",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "like",
          "type": "method",
          "parameters": [
            "column",
            "pattern"
          ],
          "line": 102,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ilike",
          "type": "method",
          "parameters": [
            "column",
            "pattern"
          ],
          "line": 107,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "in",
          "type": "method",
          "parameters": [
            "column",
            "values"
          ],
          "line": 112,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "is",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "not",
          "type": "method",
          "parameters": [
            "column",
            "operator",
            "value"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "limit",
          "type": "method",
          "parameters": [
            "count"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "order",
          "type": "method",
          "parameters": [
            "column",
            "options = {}"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "range",
          "type": "method",
          "parameters": [
            "from",
            "to"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "single",
          "type": "method",
          "parameters": [],
          "line": 148,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "maybeSingle",
          "type": "method",
          "parameters": [],
          "line": 155,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "then",
          "type": "method",
          "parameters": [
            "resolve",
            "reject"
          ],
          "line": 162,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "executeWithFallback",
          "type": "method",
          "parameters": [
            "executionType"
          ],
          "line": 174,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "attempt < 3"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "executionType"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "attempt > 0"
          ],
          "line": 196,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 203,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isRecoverableError(error) && attempt < 3"
          ],
          "line": 210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "buildQuery",
          "type": "method",
          "parameters": [
            "attemptNumber"
          ],
          "line": 229,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.queryParts.select"
          ],
          "line": 233,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const filter of filters"
          ],
          "line": 240,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "filter.type"
          ],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.queryParts.options.limit"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.queryParts.options.order"
          ],
          "line": 283,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.queryParts.options.range"
          ],
          "line": 289,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getFiltersForAttempt",
          "type": "method",
          "parameters": [
            "attemptNumber"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "attemptNumber"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isRecoverableError",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 327,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSafeEmptyResult",
          "type": "method",
          "parameters": [
            "executionType"
          ],
          "line": 346,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "executionType"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "insert",
          "type": "method",
          "parameters": [
            "values",
            "options = {}"
          ],
          "line": 359,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 367,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isRecoverableError(error) && Array.isArray(values)"
          ],
          "line": 371,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "retryError"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "update",
          "type": "method",
          "parameters": [
            "values",
            "options = {}"
          ],
          "line": 403,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 408,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "delete",
          "type": "method",
          "parameters": [
            "options = {}"
          ],
          "line": 418,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 423,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "../config/supabaseClient",
        "./supabaseRLSGuard"
      ],
      "complexity_score": 35,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.439Z"
    },
    "/frontend/src/utils/supabaseAuditor.js": {
      "file_path": "/frontend/src/utils/supabaseAuditor.js",
      "lines_of_code": 312,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "SupabaseAuditor",
        "class",
        "const"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "runCompleteAudit",
          "type": "method",
          "parameters": [],
          "line": 19,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of tablesToTest"
          ],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testBasicConnectivity",
          "type": "method",
          "parameters": [],
          "line": 52,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 61,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testTableCRUD",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 71,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 92,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.code === '42P01'"
          ],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data?.[0]"
          ],
          "line": 107,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 112,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "result.exists"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testInsert",
          "type": "method",
          "parameters": [
            "tableName",
            "result"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data?.[0]?.id"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 152,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testUpdateDelete",
          "type": "method",
          "parameters": [
            "tableName",
            "recordId",
            "result"
          ],
          "line": 161,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!updateError"
          ],
          "line": 169,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 176,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!deleteError"
          ],
          "line": 187,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateTestData",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "showSummary",
          "type": "method",
          "parameters": [],
          "line": 260,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.errors.length > 0"
          ],
          "line": 269,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSummary",
          "type": "method",
          "parameters": [],
          "line": 282,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [tableName",
            "result] of Object.entries(this.results)"
          ],
          "line": 286,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "result.select && result.insert"
          ],
          "line": 289,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 307,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "users",
        "user",
        "username"
      ],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 26,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.442Z"
    },
    "/frontend/src/utils/supabaseEmpresaPersistence.js": {
      "file_path": "/frontend/src/utils/supabaseEmpresaPersistence.js",
      "lines_of_code": 368,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "supabaseEmpresaPersistence",
        "const",
        "const",
        "const",
        "const",
        "const",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "guardarDatosEmpresa",
          "type": "method",
          "parameters": [
            "datosEmpresa",
            "opciones = {}"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!validacion.valid"
          ],
          "line": 31,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "selectError && selectError.code !== 'PGRST116'"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "existing"
          ],
          "line": 70,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "notificar"
          ],
          "line": 95,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "cargarDatosEmpresa",
          "type": "method",
          "parameters": [
            "opciones = {}"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.code === 'PGRST116'"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validarDatos",
          "type": "method",
          "parameters": [
            "datos"
          ],
          "line": 164,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!datos || typeof datos !== 'object'"
          ],
          "line": 174,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!datos[campo] || typeof datos[campo] !== 'string' || datos[campo].trim().length === 0"
          ],
          "line": 181,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "camposFaltantes.length > 0"
          ],
          "line": 186,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datos.rut && !this.validarFormatoRUT(datos.rut)"
          ],
          "line": 195,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datos.email_empresa && !this.validarEmail(datos.email_empresa)"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validarEmail",
          "type": "method",
          "parameters": [
            "email"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validarFormatoRUT",
          "type": "method",
          "parameters": [
            "rut"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "actualizarDatosEmpresa",
          "type": "method",
          "parameters": [
            "nuevosdatos",
            "opciones = {}"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosActuales.success && datosActuales.datos"
          ],
          "line": 233,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "limpiarDatos",
          "type": "method",
          "parameters": [
            "opciones = {}"
          ],
          "line": 248,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "notificar"
          ],
          "line": 263,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "existenDatos",
          "type": "method",
          "parameters": [
            "opciones = {}"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "agregarListener",
          "type": "method",
          "parameters": [
            "callback"
          ],
          "line": 287,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "notificarCambio",
          "type": "method",
          "parameters": [
            "tipo",
            "datos"
          ],
          "line": 298,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "autoCompletarFormulario",
          "type": "method",
          "parameters": [
            "setValues",
            "opciones = {}"
          ],
          "line": 311,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "resultado.success && resultado.datos"
          ],
          "line": 319,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "valor && (sobreescribir || !setValues[campo])"
          ],
          "line": 323,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof setValues === 'function'"
          ],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setValues[campo]"
          ],
          "line": 326,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "notificarUsuario"
          ],
          "line": 332,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 32,
      "potential_issues": [
        "debug_statements",
        "localStorage_usage"
      ],
      "analyzed_at": "2025-09-04T15:09:36.445Z"
    },
    "/frontend/src/utils/supabaseErrorLogger.js": {
      "file_path": "/frontend/src/utils/supabaseErrorLogger.js",
      "lines_of_code": 353,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "supabaseErrorLogger"
      ],
      "functions": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logCriticalError",
          "type": "method",
          "parameters": [
            "errorCode",
            "errorData",
            "source = 'UNKNOWN'",
            "category = 'CRITICAL'"
          ],
          "line": 25,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "logMediumError",
          "type": "method",
          "parameters": [
            "errorCode",
            "errorData",
            "source = 'UNKNOWN'",
            "category = 'MEDIUM'"
          ],
          "line": 40,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "logInfo",
          "type": "method",
          "parameters": [
            "infoCode",
            "infoData",
            "source = 'UNKNOWN'",
            "category = 'INFO'"
          ],
          "line": 52,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "createLogEntry",
          "type": "method",
          "parameters": [
            "level",
            "code",
            "data",
            "source",
            "category"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "addToBuffer",
          "type": "method",
          "parameters": [
            "logEntry"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.errorBuffer.has(key)"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.errorBuffer.get(key).length >= this.batchSize"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "saveToSupabase",
          "type": "method",
          "parameters": [
            "logEntries"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "flushBufferToSupabase",
          "type": "method",
          "parameters": [
            "bufferKey"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "flushAllBuffersToSupabase",
          "type": "method",
          "parameters": [],
          "line": 149,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [key",
            "entries] of this.errorBuffer"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "startAutoFlush",
          "type": "method",
          "parameters": [],
          "line": 169,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "addToMemoryFallback",
          "type": "method",
          "parameters": [
            "logEntry"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.errorBuffer.has(fallbackKey)"
          ],
          "line": 181,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "fallbackEntries.length > 100"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getLoggerStats",
          "type": "method",
          "parameters": [],
          "line": 197,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [key",
            "entries] of this.errorBuffer"
          ],
          "line": 205,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "key === 'memory_fallback'"
          ],
          "line": 209,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "downloadLogsFromSupabase",
          "type": "method",
          "parameters": [
            "options = {}"
          ],
          "line": 220,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 244,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "downloadLogsFile",
          "type": "method",
          "parameters": [
            "options = {}"
          ],
          "line": 259,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!result.success || result.logs.length === 0"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 283,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "formatLogsForFile",
          "type": "method",
          "parameters": [
            "logs"
          ],
          "line": 291,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "log.error_data && log.error_data !== log.error_message"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "cleanupOldLogs",
          "type": "method",
          "parameters": [
            "daysToKeep = 30"
          ],
          "line": 320,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 331,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [
        "user_agent",
        "userAgent"
      ],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 30,
      "potential_issues": [
        "debug_statements",
        "localStorage_usage"
      ],
      "analyzed_at": "2025-09-04T15:09:36.449Z"
    },
    "/frontend/src/utils/supabaseRLSGuard.js": {
      "file_path": "/frontend/src/utils/supabaseRLSGuard.js",
      "lines_of_code": 361,
      "imports": [
        "../config/supabaseClient"
      ],
      "exports": [
        "rlsGuard",
        "const",
        "const",
        "const"
      ],
      "functions": [
        {
          "name": "safeSupabaseQuery",
          "type": "arrow",
          "parameters": [
            "tableName",
            "queryBuilder",
            "options"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateSupabaseQuery",
          "type": "arrow",
          "parameters": [
            "tableName",
            "queryType",
            "filters"
          ],
          "line": 353,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSupabasePermissions",
          "type": "arrow",
          "parameters": [],
          "line": 357,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "init",
          "type": "method",
          "parameters": [],
          "line": 20,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 29,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "loadTableSchemas",
          "type": "method",
          "parameters": [],
          "line": 37,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of mainTables"
          ],
          "line": 47,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && data"
          ],
          "line": 56,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 62,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "err"
          ],
          "line": 69,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testBasicPermissions",
          "type": "method",
          "parameters": [],
          "line": 82,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [table",
            "schema] of this.tableSchemas"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "schema.columns?.includes('tenant_id') && tenantId"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "permissions.select"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "queryType",
            "filters = {}"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!permissions || !schema"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!permissions[queryType]"
          ],
          "line": 145,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filters.tenant_id && !permissions.tenant_filtered"
          ],
          "line": 150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const column of Object.keys(filters)"
          ],
          "line": 160,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!schema.columns?.includes(column)"
          ],
          "line": 161,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "safeQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "queryBuilder",
            "options = {}"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "attempt <= maxRetries"
          ],
          "line": 182,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isRLSError(error) && allowFallback && attempt <= maxRetries"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "attempt === 1"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "fallbackError"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "attempt === 2"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "simpleError"
          ],
          "line": 219,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isRLSError",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 236,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "removeTenan_idFromQuery",
          "type": "method",
          "parameters": [
            "originalQueryBuilder"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "simplifyQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "originalQueryBuilder"
          ],
          "line": 257,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "generateTestRecord",
          "type": "method",
          "parameters": [
            "tableName",
            "columns"
          ],
          "line": 266,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const column of columns || []"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "column.includes('email')"
          ],
          "line": 275,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "column.includes('tenant_id')"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "column.includes('nombre')"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getCurrentUser",
          "type": "method",
          "parameters": [],
          "line": 289,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getCurrentTenantId",
          "type": "method",
          "parameters": [],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "cacheSuccessfulQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "queryKey"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "cacheFailedQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "error"
          ],
          "line": 304,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupQueryInterceptor",
          "type": "method",
          "parameters": [],
          "line": 316,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusReport",
          "type": "method",
          "parameters": [],
          "line": 325,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "components": [],
      "supabase_calls": [],
      "state_management": [],
      "hooks_used": [],
      "dependencies": [
        "../config/supabaseClient"
      ],
      "complexity_score": 41,
      "potential_issues": [
        "debug_statements"
      ],
      "analyzed_at": "2025-09-04T15:09:36.451Z"
    }
  },
  "supabase_operations": {
    "by_operation": {
      "select": [
        {
          "file": "/frontend/src/components/AdminDashboard.js",
          "table": "activities",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 107,
          "context": "t, usuariosResult] = await Promise.all([\r         supabase.from('activities').select('id', { count: 'exact' }).eq('tenant_id', tenantId),\r         sup"
        },
        {
          "file": "/frontend/src/components/AdminDashboard.js",
          "table": "actividades_dpo",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 108,
          "context": "t: 'exact' }).eq('tenant_id', tenantId),\r         supabase.from('actividades_dpo').select('id', { count: 'exact' }).eq('tipo_actividad', 'EIPD'),"
        },
        {
          "file": "/frontend/src/components/AdminDashboard.js",
          "table": "usuarios",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 109,
          "context": "'exact' }).eq('tipo_actividad', 'EIPD'),\r         supabase.from('usuarios').select('id', { count: 'exact' }).eq('tenant_id', tenantId).eq('estado', 'A"
        },
        {
          "file": "/frontend/src/services/api.js",
          "table": "organizaciones",
          "operation": "select",
          "parameters": "'*'",
          "line": 78,
          "context": "{\r     try {\r       const { data, error } = await supabase.from('organizaciones').select('*');\r       return { success: true, data: data || [] };"
        },
        {
          "file": "/frontend/src/services/api.js",
          "table": "agent_activity_log",
          "operation": "select",
          "parameters": "'*'",
          "line": 103,
          "context": "{\r     try {\r       const { data, error } = await supabase.from('agent_activity_log').select('*').limit(100);\r       return { success: true, data: dat"
        },
        {
          "file": "/frontend/src/services/partnerSyncEngine.js",
          "table": "mapeo_datos_rat",
          "operation": "select",
          "parameters": "'*'",
          "line": 225,
          "context": "await Promise.all([       // RAT principal       supabase.from('mapeo_datos_rat').select('*').eq('id', ratId).single(),              // Datos empresa"
        },
        {
          "file": "/frontend/src/services/partnerSyncEngine.js",
          "table": "organizaciones",
          "operation": "select",
          "parameters": "'*'",
          "line": 228,
          "context": "Id).single(),              // Datos empresa       supabase.from('organizaciones').select('*').limit(1).single(),              // Documentos generados"
        },
        {
          "file": "/frontend/src/services/partnerSyncEngine.js",
          "table": "generated_documents",
          "operation": "select",
          "parameters": "'*'",
          "line": 231,
          "context": "gle(),              // Documentos generados       supabase.from('generated_documents').select('*').eq('rat_id', ratId),              // Actividades DP"
        },
        {
          "file": "/frontend/src/services/partnerSyncEngine.js",
          "table": "actividades_dpo",
          "operation": "select",
          "parameters": "'*'",
          "line": 234,
          "context": "d', ratId),              // Actividades DPO       supabase.from('actividades_dpo').select('*').eq('rat_id', ratId),              // Proveedores asocia"
        },
        {
          "file": "/frontend/src/services/partnerSyncEngine.js",
          "table": "rat_proveedores",
          "operation": "select",
          "parameters": "'*, proveedores(*",
          "line": 237,
          "context": "tId),              // Proveedores asociados       supabase.from('rat_proveedores').select('*, proveedores(*)').eq('rat_id', ratId)     ]);      return"
        },
        {
          "file": "/frontend/src/utils/instantSystemTest.js",
          "table": "organizaciones",
          "operation": "select",
          "parameters": "'count', { count: 'exact', head: true }",
          "line": 374,
          "context": "const dbStart = performance.now();\r       await supabase.from('organizaciones').select('count', { count: 'exact', head: true });\r       const dbTime"
        },
        {
          "file": "/frontend/src/utils/logicAuditor.js",
          "table": "mapeo_datos_rat",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 189,
          "context": ", tasks, inventory] = await Promise.all([         supabase.from('mapeo_datos_rat').select('id', { count: 'exact' }).eq('tenant_id', tenantId),"
        },
        {
          "file": "/frontend/src/utils/logicAuditor.js",
          "table": "generated_documents",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 190,
          "context": "nt: 'exact' }).eq('tenant_id', tenantId),         supabase.from('generated_documents').select('id', { count: 'exact' }).eq('document_type', 'EIPD'),"
        },
        {
          "file": "/frontend/src/utils/logicAuditor.js",
          "table": "actividades_dpo",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 191,
          "context": ": 'exact' }).eq('document_type', 'EIPD'),         supabase.from('actividades_dpo').select('id', { count: 'exact' }).eq('tenant_id', tenantId), supabas"
        },
        {
          "file": "/frontend/src/utils/logicAuditor.js",
          "table": "mapeo_datos_rat",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 192,
          "context": "', { count: 'exact' }).eq('tenant_id', tenantId), supabase.from('mapeo_datos_rat').select('id', { count: 'exact' }).eq('tenant_id', tenantId)       ])"
        }
      ],
      "insert": [
        {
          "file": "/frontend/src/components/GestionProveedores.js",
          "table": "proveedores",
          "operation": "insert",
          "parameters": "defaultProviders",
          "line": 193,
          "context": "e().toISOString()         }       ];        await supabase.from('proveedores').insert(defaultProviders);       // //console.log('✅ Proveedores predete"
        },
        {
          "file": "/frontend/src/services/testBalancingEngine.js",
          "table": "actividades_dpo",
          "operation": "insert",
          "parameters": "errorCritico",
          "line": 357,
          "context": "o contrato'           }         };          await supabase.from('actividades_dpo').insert(errorCritico);         efectos.push('ERROR: Balancing desfav"
        },
        {
          "file": "/frontend/src/services/testBalancingEngine.js",
          "table": "actividades_dpo",
          "operation": "insert",
          "parameters": "medidasAdicionales",
          "line": 377,
          "context": "_requeridas           }         };          await supabase.from('actividades_dpo').insert(medidasAdicionales);         efectos.push('Medidas adicional"
        }
      ]
    },
    "by_table": {
      "activities": [
        {
          "file": "/frontend/src/components/AdminDashboard.js",
          "table": "activities",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 107,
          "context": "t, usuariosResult] = await Promise.all([\r         supabase.from('activities').select('id', { count: 'exact' }).eq('tenant_id', tenantId),\r         sup"
        }
      ],
      "actividades_dpo": [
        {
          "file": "/frontend/src/components/AdminDashboard.js",
          "table": "actividades_dpo",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 108,
          "context": "t: 'exact' }).eq('tenant_id', tenantId),\r         supabase.from('actividades_dpo').select('id', { count: 'exact' }).eq('tipo_actividad', 'EIPD'),"
        },
        {
          "file": "/frontend/src/services/partnerSyncEngine.js",
          "table": "actividades_dpo",
          "operation": "select",
          "parameters": "'*'",
          "line": 234,
          "context": "d', ratId),              // Actividades DPO       supabase.from('actividades_dpo').select('*').eq('rat_id', ratId),              // Proveedores asocia"
        },
        {
          "file": "/frontend/src/services/testBalancingEngine.js",
          "table": "actividades_dpo",
          "operation": "insert",
          "parameters": "errorCritico",
          "line": 357,
          "context": "o contrato'           }         };          await supabase.from('actividades_dpo').insert(errorCritico);         efectos.push('ERROR: Balancing desfav"
        },
        {
          "file": "/frontend/src/services/testBalancingEngine.js",
          "table": "actividades_dpo",
          "operation": "insert",
          "parameters": "medidasAdicionales",
          "line": 377,
          "context": "_requeridas           }         };          await supabase.from('actividades_dpo').insert(medidasAdicionales);         efectos.push('Medidas adicional"
        },
        {
          "file": "/frontend/src/utils/logicAuditor.js",
          "table": "actividades_dpo",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 191,
          "context": ": 'exact' }).eq('document_type', 'EIPD'),         supabase.from('actividades_dpo').select('id', { count: 'exact' }).eq('tenant_id', tenantId), supabas"
        }
      ],
      "usuarios": [
        {
          "file": "/frontend/src/components/AdminDashboard.js",
          "table": "usuarios",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 109,
          "context": "'exact' }).eq('tipo_actividad', 'EIPD'),\r         supabase.from('usuarios').select('id', { count: 'exact' }).eq('tenant_id', tenantId).eq('estado', 'A"
        }
      ],
      "proveedores": [
        {
          "file": "/frontend/src/components/GestionProveedores.js",
          "table": "proveedores",
          "operation": "insert",
          "parameters": "defaultProviders",
          "line": 193,
          "context": "e().toISOString()         }       ];        await supabase.from('proveedores').insert(defaultProviders);       // //console.log('✅ Proveedores predete"
        }
      ],
      "organizaciones": [
        {
          "file": "/frontend/src/services/api.js",
          "table": "organizaciones",
          "operation": "select",
          "parameters": "'*'",
          "line": 78,
          "context": "{\r     try {\r       const { data, error } = await supabase.from('organizaciones').select('*');\r       return { success: true, data: data || [] };"
        },
        {
          "file": "/frontend/src/services/partnerSyncEngine.js",
          "table": "organizaciones",
          "operation": "select",
          "parameters": "'*'",
          "line": 228,
          "context": "Id).single(),              // Datos empresa       supabase.from('organizaciones').select('*').limit(1).single(),              // Documentos generados"
        },
        {
          "file": "/frontend/src/utils/instantSystemTest.js",
          "table": "organizaciones",
          "operation": "select",
          "parameters": "'count', { count: 'exact', head: true }",
          "line": 374,
          "context": "const dbStart = performance.now();\r       await supabase.from('organizaciones').select('count', { count: 'exact', head: true });\r       const dbTime"
        }
      ],
      "agent_activity_log": [
        {
          "file": "/frontend/src/services/api.js",
          "table": "agent_activity_log",
          "operation": "select",
          "parameters": "'*'",
          "line": 103,
          "context": "{\r     try {\r       const { data, error } = await supabase.from('agent_activity_log').select('*').limit(100);\r       return { success: true, data: dat"
        }
      ],
      "mapeo_datos_rat": [
        {
          "file": "/frontend/src/services/partnerSyncEngine.js",
          "table": "mapeo_datos_rat",
          "operation": "select",
          "parameters": "'*'",
          "line": 225,
          "context": "await Promise.all([       // RAT principal       supabase.from('mapeo_datos_rat').select('*').eq('id', ratId).single(),              // Datos empresa"
        },
        {
          "file": "/frontend/src/utils/logicAuditor.js",
          "table": "mapeo_datos_rat",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 189,
          "context": ", tasks, inventory] = await Promise.all([         supabase.from('mapeo_datos_rat').select('id', { count: 'exact' }).eq('tenant_id', tenantId),"
        },
        {
          "file": "/frontend/src/utils/logicAuditor.js",
          "table": "mapeo_datos_rat",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 192,
          "context": "', { count: 'exact' }).eq('tenant_id', tenantId), supabase.from('mapeo_datos_rat').select('id', { count: 'exact' }).eq('tenant_id', tenantId)       ])"
        }
      ],
      "generated_documents": [
        {
          "file": "/frontend/src/services/partnerSyncEngine.js",
          "table": "generated_documents",
          "operation": "select",
          "parameters": "'*'",
          "line": 231,
          "context": "gle(),              // Documentos generados       supabase.from('generated_documents').select('*').eq('rat_id', ratId),              // Actividades DP"
        },
        {
          "file": "/frontend/src/utils/logicAuditor.js",
          "table": "generated_documents",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 190,
          "context": "nt: 'exact' }).eq('tenant_id', tenantId),         supabase.from('generated_documents').select('id', { count: 'exact' }).eq('document_type', 'EIPD'),"
        }
      ],
      "rat_proveedores": [
        {
          "file": "/frontend/src/services/partnerSyncEngine.js",
          "table": "rat_proveedores",
          "operation": "select",
          "parameters": "'*, proveedores(*",
          "line": 237,
          "context": "tId),              // Proveedores asociados       supabase.from('rat_proveedores').select('*, proveedores(*)').eq('rat_id', ratId)     ]);      return"
        }
      ]
    },
    "by_file": {
      "/frontend/src/App.js": [],
      "/frontend/src/components/APIPartnersIntegration.js": [],
      "/frontend/src/components/AdminDashboard.js": [
        {
          "file": "/frontend/src/components/AdminDashboard.js",
          "table": "activities",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 107,
          "context": "t, usuariosResult] = await Promise.all([\r         supabase.from('activities').select('id', { count: 'exact' }).eq('tenant_id', tenantId),\r         sup"
        },
        {
          "file": "/frontend/src/components/AdminDashboard.js",
          "table": "actividades_dpo",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 108,
          "context": "t: 'exact' }).eq('tenant_id', tenantId),\r         supabase.from('actividades_dpo').select('id', { count: 'exact' }).eq('tipo_actividad', 'EIPD'),"
        },
        {
          "file": "/frontend/src/components/AdminDashboard.js",
          "table": "usuarios",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 109,
          "context": "'exact' }).eq('tipo_actividad', 'EIPD'),\r         supabase.from('usuarios').select('id', { count: 'exact' }).eq('tenant_id', tenantId).eq('estado', 'A"
        }
      ],
      "/frontend/src/components/CalendarView.js": [],
      "/frontend/src/components/ComplianceDashboard.js": [],
      "/frontend/src/components/ComplianceMetrics.js": [],
      "/frontend/src/components/DPAGenerator.js": [],
      "/frontend/src/components/DiagnosticCenter.js": [],
      "/frontend/src/components/EIPDTemplates.js": [],
      "/frontend/src/components/EmpresaDataManager.js": [],
      "/frontend/src/components/FundamentosTecnicos.js": [],
      "/frontend/src/components/GestionProveedores.js": [
        {
          "file": "/frontend/src/components/GestionProveedores.js",
          "table": "proveedores",
          "operation": "insert",
          "parameters": "defaultProviders",
          "line": 193,
          "context": "e().toISOString()         }       ];        await supabase.from('proveedores').insert(defaultProviders);       // //console.log('✅ Proveedores predete"
        }
      ],
      "/frontend/src/components/ImmutableAuditLog.js": [],
      "/frontend/src/components/Layout.js": [],
      "/frontend/src/components/LayoutSimple.js": [],
      "/frontend/src/components/ModuloEIPD.js": [],
      "/frontend/src/components/NotificationCenter.js": [],
      "/frontend/src/components/PageLayout.js": [],
      "/frontend/src/components/PresentacionModuloCero.js": [],
      "/frontend/src/components/PreventiveAIController.js": [],
      "/frontend/src/components/ProcesoCompleto.js": [],
      "/frontend/src/components/ProviderManager.js": [],
      "/frontend/src/components/RATEditPage.js": [],
      "/frontend/src/components/RATFormWithCompliance.js": [],
      "/frontend/src/components/RATListPage.js": [],
      "/frontend/src/components/RATSearchFilter.js": [],
      "/frontend/src/components/RATSystemProfessional.js": [],
      "/frontend/src/components/ReportGenerator.js": [],
      "/frontend/src/components/VideoAnimado.js": [],
      "/frontend/src/components/__tests__/AdminDashboard.test.js": [],
      "/frontend/src/components/admin/AdminPanel.js": [],
      "/frontend/src/components/admin/IAAgentStatusPage.js": [],
      "/frontend/src/components/admin/UsageDashboard.js": [],
      "/frontend/src/components/admin/UserManagement.js": [],
      "/frontend/src/components/auth/Login.js": [],
      "/frontend/src/config/industries.config.js": [],
      "/frontend/src/config/supabaseClient.js": [],
      "/frontend/src/config.js": [],
      "/frontend/src/constants/estados.js": [],
      "/frontend/src/contexts/AuthContext.js": [],
      "/frontend/src/contexts/TenantContext.js": [],
      "/frontend/src/debug_rat_id.js": [],
      "/frontend/src/hooks/useDataSync.js": [],
      "/frontend/src/index.js": [],
      "/frontend/src/pages/AdminDashboard.js": [],
      "/frontend/src/pages/AdminPanel.js": [],
      "/frontend/src/pages/DPIAAlgoritmos.js": [],
      "/frontend/src/pages/DPOApprovalQueue.js": [],
      "/frontend/src/pages/Dashboard.js": [],
      "/frontend/src/pages/DashboardDPO.js": [],
      "/frontend/src/pages/EIPDCreator.js": [],
      "/frontend/src/pages/EIPDListPage.js": [],
      "/frontend/src/pages/GestionAsociaciones.js": [],
      "/frontend/src/pages/GlosarioLPDP.js": [],
      "/frontend/src/pages/ModuloCero_SAFE.js": [],
      "/frontend/src/pages/PaletaColores.js": [],
      "/frontend/src/pages/ProcesoCompleto.js": [],
      "/frontend/src/pages/ProviderManager.js": [],
      "/frontend/src/pages/RATEditPage.js": [],
      "/frontend/src/pages/RATListPage.js": [],
      "/frontend/src/pages/SistemaPrincipal.js": [],
      "/frontend/src/sdk/LPDPHubSDK.js": [],
      "/frontend/src/services/api.js": [
        {
          "file": "/frontend/src/services/api.js",
          "table": "organizaciones",
          "operation": "select",
          "parameters": "'*'",
          "line": 78,
          "context": "{\r     try {\r       const { data, error } = await supabase.from('organizaciones').select('*');\r       return { success: true, data: data || [] };"
        },
        {
          "file": "/frontend/src/services/api.js",
          "table": "agent_activity_log",
          "operation": "select",
          "parameters": "'*'",
          "line": 103,
          "context": "{\r     try {\r       const { data, error } = await supabase.from('agent_activity_log').select('*').limit(100);\r       return { success: true, data: dat"
        }
      ],
      "/frontend/src/services/categoryAnalysisEngine.js": [],
      "/frontend/src/services/dataSync.js": [],
      "/frontend/src/services/industryStandardsService.js": [],
      "/frontend/src/services/partnerSyncEngine.js": [
        {
          "file": "/frontend/src/services/partnerSyncEngine.js",
          "table": "mapeo_datos_rat",
          "operation": "select",
          "parameters": "'*'",
          "line": 225,
          "context": "await Promise.all([       // RAT principal       supabase.from('mapeo_datos_rat').select('*').eq('id', ratId).single(),              // Datos empresa"
        },
        {
          "file": "/frontend/src/services/partnerSyncEngine.js",
          "table": "organizaciones",
          "operation": "select",
          "parameters": "'*'",
          "line": 228,
          "context": "Id).single(),              // Datos empresa       supabase.from('organizaciones').select('*').limit(1).single(),              // Documentos generados"
        },
        {
          "file": "/frontend/src/services/partnerSyncEngine.js",
          "table": "generated_documents",
          "operation": "select",
          "parameters": "'*'",
          "line": 231,
          "context": "gle(),              // Documentos generados       supabase.from('generated_documents').select('*').eq('rat_id', ratId),              // Actividades DP"
        },
        {
          "file": "/frontend/src/services/partnerSyncEngine.js",
          "table": "actividades_dpo",
          "operation": "select",
          "parameters": "'*'",
          "line": 234,
          "context": "d', ratId),              // Actividades DPO       supabase.from('actividades_dpo').select('*').eq('rat_id', ratId),              // Proveedores asocia"
        },
        {
          "file": "/frontend/src/services/partnerSyncEngine.js",
          "table": "rat_proveedores",
          "operation": "select",
          "parameters": "'*, proveedores(*",
          "line": 237,
          "context": "tId),              // Proveedores asociados       supabase.from('rat_proveedores').select('*, proveedores(*)').eq('rat_id', ratId)     ]);      return"
        }
      ],
      "/frontend/src/services/proveedoresService.js": [],
      "/frontend/src/services/ratIntelligenceEngine.js": [],
      "/frontend/src/services/ratService.js": [],
      "/frontend/src/services/riskCalculationEngine.js": [],
      "/frontend/src/services/specificCasesEngine.js": [],
      "/frontend/src/services/testBalancingEngine.js": [
        {
          "file": "/frontend/src/services/testBalancingEngine.js",
          "table": "actividades_dpo",
          "operation": "insert",
          "parameters": "errorCritico",
          "line": 357,
          "context": "o contrato'           }         };          await supabase.from('actividades_dpo').insert(errorCritico);         efectos.push('ERROR: Balancing desfav"
        },
        {
          "file": "/frontend/src/services/testBalancingEngine.js",
          "table": "actividades_dpo",
          "operation": "insert",
          "parameters": "medidasAdicionales",
          "line": 377,
          "context": "_requeridas           }         };          await supabase.from('actividades_dpo').insert(medidasAdicionales);         efectos.push('Medidas adicional"
        }
      ],
      "/frontend/src/tests/userSimulation.test.js": [],
      "/frontend/src/theme/colors.js": [],
      "/frontend/src/theme/darkTheme.js": [],
      "/frontend/src/utils/aiSupervisor.js": [],
      "/frontend/src/utils/completeSystemTester.js": [],
      "/frontend/src/utils/dataIntegrityValidator.js": [],
      "/frontend/src/utils/databaseHealthMonitor.js": [],
      "/frontend/src/utils/dynamicLegalRules.js": [],
      "/frontend/src/utils/errorMonitoringOnly.js": [],
      "/frontend/src/utils/errorPreventionMonitor.js": [],
      "/frontend/src/utils/fileErrorLogger.js": [],
      "/frontend/src/utils/frontendValidator.js": [],
      "/frontend/src/utils/humanInteractionSimulator.js": [],
      "/frontend/src/utils/iaAgentReporter.js": [],
      "/frontend/src/utils/index.js": [],
      "/frontend/src/utils/inputSanitizer.js": [],
      "/frontend/src/utils/instantSystemTest.js": [
        {
          "file": "/frontend/src/utils/instantSystemTest.js",
          "table": "organizaciones",
          "operation": "select",
          "parameters": "'count', { count: 'exact', head: true }",
          "line": 374,
          "context": "const dbStart = performance.now();\r       await supabase.from('organizaciones').select('count', { count: 'exact', head: true });\r       const dbTime"
        }
      ],
      "/frontend/src/utils/interactiveHelper.js": [],
      "/frontend/src/utils/logicAuditor.js": [
        {
          "file": "/frontend/src/utils/logicAuditor.js",
          "table": "mapeo_datos_rat",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 189,
          "context": ", tasks, inventory] = await Promise.all([         supabase.from('mapeo_datos_rat').select('id', { count: 'exact' }).eq('tenant_id', tenantId),"
        },
        {
          "file": "/frontend/src/utils/logicAuditor.js",
          "table": "generated_documents",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 190,
          "context": "nt: 'exact' }).eq('tenant_id', tenantId),         supabase.from('generated_documents').select('id', { count: 'exact' }).eq('document_type', 'EIPD'),"
        },
        {
          "file": "/frontend/src/utils/logicAuditor.js",
          "table": "actividades_dpo",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 191,
          "context": ": 'exact' }).eq('document_type', 'EIPD'),         supabase.from('actividades_dpo').select('id', { count: 'exact' }).eq('tenant_id', tenantId), supabas"
        },
        {
          "file": "/frontend/src/utils/logicAuditor.js",
          "table": "mapeo_datos_rat",
          "operation": "select",
          "parameters": "'id', { count: 'exact' }",
          "line": 192,
          "context": "', { count: 'exact' }).eq('tenant_id', tenantId), supabase.from('mapeo_datos_rat').select('id', { count: 'exact' }).eq('tenant_id', tenantId)       ])"
        }
      ],
      "/frontend/src/utils/moduleValidator.js": [],
      "/frontend/src/utils/preventiveAI_DISABLED.js": [],
      "/frontend/src/utils/ratEditModeFix.js": [],
      "/frontend/src/utils/rateLimiter.js": [],
      "/frontend/src/utils/secureLogger.js": [],
      "/frontend/src/utils/secureTokens.js": [],
      "/frontend/src/utils/semanticValidator.js": [],
      "/frontend/src/utils/smartDeduplication.js": [],
      "/frontend/src/utils/smartSupabaseClient.js": [],
      "/frontend/src/utils/supabaseAuditor.js": [],
      "/frontend/src/utils/supabaseEmpresaPersistence.js": [],
      "/frontend/src/utils/supabaseErrorLogger.js": [],
      "/frontend/src/utils/supabaseRLSGuard.js": []
    },
    "total_count": 18,
    "unique_tables": [
      "activities",
      "actividades_dpo",
      "usuarios",
      "proveedores",
      "organizaciones",
      "agent_activity_log",
      "mapeo_datos_rat",
      "generated_documents",
      "rat_proveedores"
    ],
    "operation_types": [
      "select",
      "insert"
    ]
  },
  "table_validations": {
    "| table_name                      | table_type | column_name                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ------------------------------- | ---------- | ------------------------------- |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| active_agents                   | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| active_agents                   | BASE TABLE | agent_id                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| active_agents                   | BASE TABLE | agent_type                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| active_agents                   | BASE TABLE | status                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| active_agents                   | BASE TABLE | last_activity                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| active_agents                   | BASE TABLE | configuration                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| active_agents                   | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| actividades_dpo                 | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| actividades_dpo                 | BASE TABLE | rat_id                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| actividades_dpo                 | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| actividades_dpo                 | BASE TABLE | tipo_actividad                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| actividades_dpo                 | BASE TABLE | descripcion                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| actividades_dpo                 | BASE TABLE | estado                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| actividades_dpo                 | BASE TABLE | prioridad                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| actividades_dpo                 | BASE TABLE | fecha_creacion                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| actividades_dpo                 | BASE TABLE | fecha_vencimiento               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| actividades_dpo                 | BASE TABLE | asignado_a                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| actividades_dpo                 | BASE TABLE | organizacion_id                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| actividades_dpo                 | BASE TABLE | created_by                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| actividades_dpo                 | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| actividades_dpo                 | BASE TABLE | metadatos                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| activities                      | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| activities                      | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| activities                      | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| activities                      | BASE TABLE | empresa_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| activities                      | BASE TABLE | action                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| activities                      | BASE TABLE | details                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| activities                      | BASE TABLE | ip_address                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| activities                      | BASE TABLE | user_agent                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| activities                      | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| agent_activity_log              | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| agent_activity_log              | BASE TABLE | agent_id                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| agent_activity_log              | BASE TABLE | activity_type                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| agent_activity_log              | BASE TABLE | activity_data                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| agent_activity_log              | BASE TABLE | timestamp                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| agent_activity_log              | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| agent_corrections               | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| agent_corrections               | BASE TABLE | agent_id                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| agent_corrections               | BASE TABLE | correction_type                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| agent_corrections               | BASE TABLE | original_data                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| agent_corrections               | BASE TABLE | corrected_data                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| agent_corrections               | BASE TABLE | reason                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| agent_corrections               | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| agent_corrections               | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_learning_patterns            | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_learning_patterns            | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_learning_patterns            | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_learning_patterns            | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_learning_patterns            | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_learning_patterns            | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_prevenciones_log             | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_prevenciones_log             | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_prevenciones_log             | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_prevenciones_log             | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_prevenciones_log             | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_prevenciones_log             | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_supervision_log              | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_supervision_log              | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_supervision_log              | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_supervision_log              | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_supervision_log              | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_supervision_log              | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_validation_log               | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_validation_log               | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_validation_log               | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_validation_log               | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_validation_log               | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ai_validation_log               | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| api_partners                    | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| api_partners                    | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| api_partners                    | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| api_partners                    | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| api_partners                    | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| api_partners                    | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| api_usage_metrics               | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| api_usage_metrics               | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| api_usage_metrics               | BASE TABLE | endpoint                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| api_usage_metrics               | BASE TABLE | method                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| api_usage_metrics               | BASE TABLE | response_time                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| api_usage_metrics               | BASE TABLE | status_code                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| api_usage_metrics               | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| api_usage_metrics               | BASE TABLE | ip_address                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| api_usage_metrics               | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| arcopol                         | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| arcopol                         | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| arcopol                         | BASE TABLE | empresa_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| arcopol                         | BASE TABLE | title                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| arcopol                         | BASE TABLE | description                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| arcopol                         | BASE TABLE | status                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| arcopol                         | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| arcopol                         | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| arcopol                         | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | user_email                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | action                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | table_name                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | record_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | old_values                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | new_values                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | changes                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | ip_address                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | user_agent                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | session_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | application_name                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | operation_type                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | success                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | error_message                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_log                       | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_logs                      | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_logs                      | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_logs                      | BASE TABLE | empresa_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_logs                      | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_logs                      | BASE TABLE | action                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_logs                      | BASE TABLE | table_name                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_logs                      | BASE TABLE | record_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_logs                      | BASE TABLE | old_values                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_logs                      | BASE TABLE | new_values                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_logs                      | BASE TABLE | ip_address                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_logs                      | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_reports                   | VIEW       | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_reports                   | VIEW       | report_type                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| audit_reports                   | VIEW       | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| autofix_log                     | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| autofix_log                     | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| autofix_log                     | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| autofix_log                     | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| autofix_log                     | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| autofix_log                     | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| best_practices                  | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| best_practices                  | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| best_practices                  | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| best_practices                  | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| best_practices                  | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| best_practices                  | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| breaches                        | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| breaches                        | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| breaches                        | BASE TABLE | empresa_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| breaches                        | BASE TABLE | title                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| breaches                        | BASE TABLE | description                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| breaches                        | BASE TABLE | severity                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| breaches                        | BASE TABLE | status                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| breaches                        | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| breaches                        | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| breaches                        | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| categories                      | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| categories                      | BASE TABLE | name                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| categories                      | BASE TABLE | description                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| categories                      | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| categories                      | BASE TABLE | empresa_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| categories                      | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| categories                      | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| categories                      | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | company_code                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | company_name                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | company_rut                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | business_sector                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | company_size                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | contact_email                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | contact_phone                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | address                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | city                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | region                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | country                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | dpo_assigned                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | dpo_name                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | dpo_email                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | subscription_tier               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | subscription_start_date         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | subscription_end_date           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | onboarding_completed            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | onboarding_completion_date      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| client_companies                | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | template_name                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | template_type                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | is_default                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | razon_social                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | rut_empresa                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | direccion_empresa               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | telefono_empresa                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | email_empresa                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | giro_comercial                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | industria                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | sitio_web                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | nombre_responsable              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | cargo_responsable               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | email_responsable               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | telefono_responsable            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | area_responsable                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | departamento                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | nombre_dpo                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | email_dpo                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | telefono_dpo                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | certificaciones_dpo             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | experiencia_dpo                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | base_legal_default              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | plazo_conservacion_default      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | medidas_seguridad_default       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | usage_count                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | last_used_at                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | source_rat_id                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_data_templates          | BASE TABLE | created_by                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_quotas                  | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_quotas                  | BASE TABLE | company_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_quotas                  | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_quotas                  | BASE TABLE | quota_type                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_quotas                  | BASE TABLE | quota_limit                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_quotas                  | BASE TABLE | quota_used                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_quotas                  | BASE TABLE | quota_period                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_quotas                  | BASE TABLE | reset_date                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_quotas                  | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_quotas                  | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_quotas                  | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_usage_metrics           | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_usage_metrics           | BASE TABLE | company_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_usage_metrics           | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_usage_metrics           | BASE TABLE | metric_date                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_usage_metrics           | BASE TABLE | active_users                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_usage_metrics           | BASE TABLE | total_sessions                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_usage_metrics           | BASE TABLE | total_session_duration_minutes  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_usage_metrics           | BASE TABLE | modules_accessed                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_usage_metrics           | BASE TABLE | documents_generated             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_usage_metrics           | BASE TABLE | assessments_completed           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_usage_metrics           | BASE TABLE | storage_used_mb                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_usage_metrics           | BASE TABLE | api_calls                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_usage_metrics           | BASE TABLE | features_used                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_usage_metrics           | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_usage_metrics           | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | company_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | user_email                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | user_name                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | user_role                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | job_title                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | department                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | phone                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | is_primary_contact              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | last_login                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | login_count                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | invited_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | invitation_accepted_at          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_users                   | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_workspaces              | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_workspaces              | BASE TABLE | company_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_workspaces              | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_workspaces              | BASE TABLE | workspace_name                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_workspaces              | BASE TABLE | workspace_type                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_workspaces              | BASE TABLE | description                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_workspaces              | BASE TABLE | settings                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_workspaces              | BASE TABLE | collaborators                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_workspaces              | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_workspaces              | BASE TABLE | created_by                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_workspaces              | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| company_workspaces              | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| completion_log                  | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| completion_log                  | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| completion_log                  | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| completion_log                  | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| completion_log                  | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| completion_log                  | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| completion_templates            | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| completion_templates            | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| completion_templates            | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| completion_templates            | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| completion_templates            | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| completion_templates            | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_records              | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_records              | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_records              | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_records              | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_records              | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_records              | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_reports              | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_reports              | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_reports              | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_reports              | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_reports              | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_reports              | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_triggers_log         | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_triggers_log         | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_triggers_log         | BASE TABLE | trigger_type                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_triggers_log         | BASE TABLE | trigger_data                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_triggers_log         | BASE TABLE | action_taken                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_triggers_log         | BASE TABLE | result                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| compliance_triggers_log         | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| consents                        | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| consents                        | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| consents                        | BASE TABLE | empresa_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| consents                        | BASE TABLE | title                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| consents                        | BASE TABLE | description                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| consents                        | BASE TABLE | consent_type                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| consents                        | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| consents                        | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| consents                        | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| critical_incidents              | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| critical_incidents              | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| critical_incidents              | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| critical_incidents              | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| critical_incidents              | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| critical_incidents              | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_asociados            | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_asociados            | BASE TABLE | rat_id                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_asociados            | BASE TABLE | tipo_documento                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_asociados            | BASE TABLE | documento_id                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_asociados            | BASE TABLE | titulo                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_asociados            | BASE TABLE | estado                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_asociados            | BASE TABLE | fecha_asociacion                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_asociados            | BASE TABLE | compatibilidad_score            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_asociados            | BASE TABLE | metadatos                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_asociados            | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | proveedor_id                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | nombre_documento                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | contenido_dpa                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | datos_configuracion             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | estado                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | fecha_generacion                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | fecha_firma                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | vigencia_inicio                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | vigencia_fin                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | version                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | generado_por                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | hash_documento                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | url_descarga                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_dpa                  | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | rat_id                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | tipo_documento                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | titulo                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | contenido                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | content_url                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | file_url                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | estado                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | hash_verificacion               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | generated_by_ai                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | template_version                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | file_size_bytes                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | mime_type                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| documentos_generados            | BASE TABLE | created_by                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpa_documents                   | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpa_documents                   | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpa_documents                   | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpa_documents                   | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpa_documents                   | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpa_documents                   | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpas                            | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpas                            | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpas                            | BASE TABLE | proveedor_id                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpas                            | BASE TABLE | version                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpas                            | BASE TABLE | fecha_firma                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpas                            | BASE TABLE | vigencia_inicio                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpas                            | BASE TABLE | vigencia_fin                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpas                            | BASE TABLE | clausulas_especiales            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpas                            | BASE TABLE | archivo_url                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpas                            | BASE TABLE | firmado_por                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpas                            | BASE TABLE | requiere_renovacion             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpas                            | BASE TABLE | estado                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpas                            | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpas                            | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpas                            | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpia                            | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpia                            | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpia                            | BASE TABLE | empresa_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpia                            | BASE TABLE | title                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpia                            | BASE TABLE | description                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpia                            | BASE TABLE | risk_level                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpia                            | BASE TABLE | status                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpia                            | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpia                            | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpia                            | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_activities_fallback         | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_activities_fallback         | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_activities_fallback         | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_activities_fallback         | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_activities_fallback         | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_activities_fallback         | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | rat_id                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | notification_type               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | status                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | priority                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | message                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | due_date                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | tipo_notificacion               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | titulo                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | mensaje                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | descripcion                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | prioridad                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | estado                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | leida_en                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | documento_id                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | accion_requerida                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | expires_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| dpo_notifications               | BASE TABLE | created_by                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| eipd_documents                  | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| eipd_documents                  | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| eipd_documents                  | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| eipd_documents                  | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| eipd_documents                  | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| eipd_documents                  | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| empresas                        | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| empresas                        | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| empresas                        | BASE TABLE | rut                             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| empresas                        | BASE TABLE | razon_social                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| empresas                        | BASE TABLE | giro                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| empresas                        | BASE TABLE | direccion                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| empresas                        | BASE TABLE | comuna                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| empresas                        | BASE TABLE | ciudad                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| empresas                        | BASE TABLE | email_contacto                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| empresas                        | BASE TABLE | es_activa                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| empresas                        | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| empresas                        | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| error_logs                      | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| error_logs                      | BASE TABLE | error_type                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| error_logs                      | BASE TABLE | error_message                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| error_logs                      | BASE TABLE | severity                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| error_logs                      | BASE TABLE | stack_trace                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| error_logs                      | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto            | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto            | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto            | BASE TABLE | rat_id                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto            | BASE TABLE | tipo_evaluacion                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto            | BASE TABLE | contenido                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto            | BASE TABLE | puntuacion_riesgo               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto            | BASE TABLE | recomendaciones                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto            | BASE TABLE | estado                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto            | BASE TABLE | evaluador                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto            | BASE TABLE | fecha_evaluacion                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto            | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto            | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | rat_id                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | nombre_evaluacion               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | tipo_evaluacion                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | sistema_evaluado                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | descripcion_tratamiento         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | fecha_evaluacion                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | estado                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | nivel_riesgo_inicial            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | nivel_riesgo_final              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | riesgos_identificados           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | medidas_mitigacion              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | plan_implementacion             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | responsable_evaluacion          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | fecha_revision                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | decision_implementacion         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | observaciones_dpo               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_impacto_privacidad | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_seguridad          | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_seguridad          | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_seguridad          | BASE TABLE | proveedor_id                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_seguridad          | BASE TABLE | fecha_evaluacion                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_seguridad          | BASE TABLE | puntuacion                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_seguridad          | BASE TABLE | nivel_riesgo                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_seguridad          | BASE TABLE | certificaciones                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_seguridad          | BASE TABLE | medidas_tecnicas                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_seguridad          | BASE TABLE | medidas_organizativas           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_seguridad          | BASE TABLE | observaciones                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_seguridad          | BASE TABLE | proxima_evaluacion              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_seguridad          | BASE TABLE | evaluador                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_seguridad          | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_seguridad          | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| evaluaciones_seguridad          | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| field_progress                  | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| field_progress                  | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| field_progress                  | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| field_progress                  | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| field_progress                  | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| field_progress                  | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| finalidad_templates             | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| finalidad_templates             | BASE TABLE | categoria                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| finalidad_templates             | BASE TABLE | subcategoria                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| finalidad_templates             | BASE TABLE | template_text                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| finalidad_templates             | BASE TABLE | base_legal_sugerida             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| finalidad_templates             | BASE TABLE | ejemplos                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| finalidad_templates             | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| finalidad_templates             | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| finalidad_templates             | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| frontend_validation_reports     | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| frontend_validation_reports     | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| frontend_validation_reports     | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| frontend_validation_reports     | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| frontend_validation_reports     | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| frontend_validation_reports     | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| generated_documents             | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| generated_documents             | BASE TABLE | rat_id                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| generated_documents             | BASE TABLE | document_type                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| generated_documents             | BASE TABLE | document_data                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| generated_documents             | BASE TABLE | status                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| generated_documents             | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| generated_documents             | BASE TABLE | source_rat_id                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| generated_documents             | BASE TABLE | title                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| generated_documents             | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| generated_documents             | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| help_content                    | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| help_content                    | BASE TABLE | section                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| help_content                    | BASE TABLE | subsection                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| help_content                    | BASE TABLE | title                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| help_content                    | BASE TABLE | content                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| help_content                    | BASE TABLE | content_type                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| help_content                    | BASE TABLE | tags                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| help_content                    | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| help_content                    | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| help_content                    | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| help_usage_log                  | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| help_usage_log                  | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| help_usage_log                  | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| help_usage_log                  | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| help_usage_log                  | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| help_usage_log                  | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ia_agent_reports                | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ia_agent_reports                | BASE TABLE | report_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ia_agent_reports                | BASE TABLE | report_type                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ia_agent_reports                | BASE TABLE | report_data                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ia_agent_reports                | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ia_agent_reports                | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ia_agent_reports                | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ia_agent_reports                | BASE TABLE | status                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ia_agent_reports                | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| ia_agent_reports                | BASE TABLE | details                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| industry_configurations         | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| industry_configurations         | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| industry_configurations         | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| industry_configurations         | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| industry_configurations         | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| industry_configurations         | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| interviews                      | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| interviews                      | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| interviews                      | BASE TABLE | empresa_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| interviews                      | BASE TABLE | title                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| interviews                      | BASE TABLE | description                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| interviews                      | BASE TABLE | status                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| interviews                      | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| interviews                      | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| interviews                      | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventario_rats                 | VIEW       | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventario_rats                 | VIEW       | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventario_rats                 | VIEW       | name                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventario_rats                 | VIEW       | description                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventario_rats                 | VIEW       | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventario_rats                 | VIEW       | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventory                       | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventory                       | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventory                       | BASE TABLE | empresa_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventory                       | BASE TABLE | name                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventory                       | BASE TABLE | description                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventory                       | BASE TABLE | data_type                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventory                       | BASE TABLE | location                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventory                       | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventory                       | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventory                       | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventory                       | BASE TABLE | rat_id                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventory                       | BASE TABLE | status                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventory                       | BASE TABLE | categoria                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventory                       | BASE TABLE | responsable                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| inventory                       | BASE TABLE | fecha_registro                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| law_updates                     | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| law_updates                     | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| law_updates                     | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| law_updates                     | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| law_updates                     | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| law_updates                     | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| legal_articles                  | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| legal_articles                  | BASE TABLE | titulo                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| legal_articles                  | BASE TABLE | numero_articulo                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| legal_articles                  | BASE TABLE | ley                             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| legal_articles                  | BASE TABLE | contenido                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| legal_articles                  | BASE TABLE | aplicabilidad                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| legal_articles                  | BASE TABLE | tags                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| legal_articles                  | BASE TABLE | vigente                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| legal_articles                  | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| legal_articles                  | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| legal_rules                     | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| legal_rules                     | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| legal_rules                     | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| legal_rules                     | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| legal_rules                     | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| legal_rules                     | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| licencias                       | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| licencias                       | BASE TABLE | empresa_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| licencias                       | BASE TABLE | tipo_licencia                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| licencias                       | BASE TABLE | fecha_inicio                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| licencias                       | BASE TABLE | fecha_expiracion                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| licencias                       | BASE TABLE | activa                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| licencias                       | BASE TABLE | clave_licencia                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| licencias                       | BASE TABLE | max_usuarios                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| licencias                       | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | created_by                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | nombre_actividad                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | area_responsable                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | responsable_proceso             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | email_responsable               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | telefono_responsable            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | descripcion                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | finalidad_principal             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | base_licitud                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | base_legal                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | categorias_datos                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | destinatarios_internos          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | transferencias_internacionales  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | plazo_conservacion              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | medidas_seguridad_tecnicas      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | medidas_seguridad_organizativas |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | estado                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | updated_by                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | nivel_riesgo                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | datos_sensibles                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | volumen_afectados               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | decisiones_automatizadas        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | base_legal_descripcion          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | requiere_eipd                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | rat_id                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| mapeo_datos_rat                 | BASE TABLE | status                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| migration_log                   | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| migration_log                   | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| migration_log                   | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| migration_log                   | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| migration_log                   | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| migration_log                   | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| modulos_acceso                  | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| modulos_acceso                  | BASE TABLE | empresa_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| modulos_acceso                  | BASE TABLE | modulo_codigo                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| modulos_acceso                  | BASE TABLE | activo                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| modulos_acceso                  | BASE TABLE | fecha_activacion                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| modulos_acceso                  | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| notifications                   | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| notifications                   | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| notifications                   | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| notifications                   | BASE TABLE | type                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| notifications                   | BASE TABLE | title                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| notifications                   | BASE TABLE | message                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| notifications                   | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| notifications                   | BASE TABLE | read_at                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| notifications                   | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| notifications                   | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| notifications                   | BASE TABLE | leida_en                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| notifications                   | BASE TABLE | canal                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| operation_validation_log        | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| operation_validation_log        | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| operation_validation_log        | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| operation_validation_log        | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| operation_validation_log        | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| operation_validation_log        | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| organizaciones                  | BASE TABLE | company_name                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| organizaciones                  | BASE TABLE | display_name                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| organizaciones                  | BASE TABLE | industry                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| organizaciones                  | BASE TABLE | size                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| organizaciones                  | BASE TABLE | country                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| organizaciones                  | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| organizaciones                  | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| organizaciones                  | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| organizaciones                  | BASE TABLE | is_demo                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| organizaciones                  | BASE TABLE | online_mode                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| organizaciones                  | BASE TABLE | active                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| organizaciones                  | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_access_logs             | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_access_logs             | BASE TABLE | partner_type                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_access_logs             | BASE TABLE | action                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_access_logs             | BASE TABLE | endpoint                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_access_logs             | BASE TABLE | ip_address                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_access_logs             | BASE TABLE | user_agent                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_access_logs             | BASE TABLE | api_key_used                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_access_logs             | BASE TABLE | request_size                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_access_logs             | BASE TABLE | response_size                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_access_logs             | BASE TABLE | response_time_ms                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_access_logs             | BASE TABLE | status_code                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_access_logs             | BASE TABLE | error_message                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_access_logs             | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_access_logs             | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_access_logs             | BASE TABLE | timestamp                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_api_keys                | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_api_keys                | BASE TABLE | partner_type                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_api_keys                | BASE TABLE | key_name                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_api_keys                | BASE TABLE | api_key_hash                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_api_keys                | BASE TABLE | api_key_preview                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_api_keys                | BASE TABLE | permissions                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_api_keys                | BASE TABLE | rate_limit_per_minute           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_api_keys                | BASE TABLE | rate_limit_per_hour             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_api_keys                | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_api_keys                | BASE TABLE | expires_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_api_keys                | BASE TABLE | last_used_at                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_api_keys                | BASE TABLE | usage_count                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_api_keys                | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_api_keys                | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_api_keys                | BASE TABLE | created_by                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | rat_id                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | partner_type                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | integration_type                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | payload                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | status                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | response_data                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | webhook_url                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | api_endpoint                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | retry_count                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | last_attempt_at                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | success_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | error_message                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_integrations            | BASE TABLE | created_by                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_tokens                  | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_tokens                  | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_tokens                  | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_tokens                  | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_tokens                  | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_tokens                  | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_usage_stats             | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_usage_stats             | BASE TABLE | partner_type                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_usage_stats             | BASE TABLE | date_period                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_usage_stats             | BASE TABLE | total_requests                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_usage_stats             | BASE TABLE | successful_requests             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_usage_stats             | BASE TABLE | failed_requests                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_usage_stats             | BASE TABLE | total_rats_accessed             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_usage_stats             | BASE TABLE | total_documents_downloaded      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_usage_stats             | BASE TABLE | total_analyses_performed        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_usage_stats             | BASE TABLE | avg_response_time_ms            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_usage_stats             | BASE TABLE | total_data_transferred_mb       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_usage_stats             | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_usage_stats             | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_webhooks                | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_webhooks                | BASE TABLE | partner_type                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_webhooks                | BASE TABLE | webhook_url                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_webhooks                | BASE TABLE | events                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_webhooks                | BASE TABLE | signature_secret                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_webhooks                | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_webhooks                | BASE TABLE | last_ping_at                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_webhooks                | BASE TABLE | last_ping_status                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_webhooks                | BASE TABLE | retry_count                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_webhooks                | BASE TABLE | max_retries                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_webhooks                | BASE TABLE | timeout_seconds                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_webhooks                | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_webhooks                | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| partner_webhooks                | BASE TABLE | created_by                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| persistence_validation_log      | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| persistence_validation_log      | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| persistence_validation_log      | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| persistence_validation_log      | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| persistence_validation_log      | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| persistence_validation_log      | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| proveedores                     | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| proveedores                     | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| proveedores                     | BASE TABLE | nombre                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| proveedores                     | BASE TABLE | tipo                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| proveedores                     | BASE TABLE | pais                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| proveedores                     | BASE TABLE | dpa_info                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| proveedores                     | BASE TABLE | evaluacion_seguridad            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| proveedores                     | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| proveedores                     | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_audit_trail                 | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_audit_trail                 | BASE TABLE | rat_id                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_audit_trail                 | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_audit_trail                 | BASE TABLE | action                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_audit_trail                 | BASE TABLE | old_values                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_audit_trail                 | BASE TABLE | new_values                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_audit_trail                 | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_audit_trail                 | BASE TABLE | ip_address                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_audit_trail                 | BASE TABLE | user_agent                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_audit_trail                 | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_document_assignments        | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_document_assignments        | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_document_assignments        | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_document_assignments        | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_document_assignments        | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_document_assignments        | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_eipd_associations           | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_eipd_associations           | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_eipd_associations           | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_eipd_associations           | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_eipd_associations           | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_eipd_associations           | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_processes                   | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_processes                   | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_processes                   | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_processes                   | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_processes                   | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_processes                   | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_proveedores                 | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_proveedores                 | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_proveedores                 | BASE TABLE | rat_id                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_proveedores                 | BASE TABLE | proveedor_id                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_proveedores                 | BASE TABLE | tipo_relacion                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_proveedores                 | BASE TABLE | descripcion_servicio            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_proveedores                 | BASE TABLE | fecha_inicio                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_proveedores                 | BASE TABLE | fecha_fin                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_proveedores                 | BASE TABLE | estado                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_proveedores                 | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_proveedores                 | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_saved_filters               | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_saved_filters               | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_saved_filters               | BASE TABLE | filter_name                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_saved_filters               | BASE TABLE | filter_data                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_saved_filters               | BASE TABLE | created_by                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_saved_filters               | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_saved_filters               | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_saved_filters               | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_snapshots                   | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_snapshots                   | BASE TABLE | rat_id                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_snapshots                   | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_snapshots                   | BASE TABLE | snapshot_data                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_snapshots                   | BASE TABLE | snapshot_type                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_snapshots                   | BASE TABLE | created_by                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rat_snapshots                   | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rats                            | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rats                            | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rats                            | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rats                            | BASE TABLE | nombre_actividad                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rats                            | BASE TABLE | responsable_proceso             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rats                            | BASE TABLE | descripcion                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rats                            | BASE TABLE | status                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rats                            | BASE TABLE | estado                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rats                            | BASE TABLE | ai_supervised                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rats                            | BASE TABLE | ai_supervision_score            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rats                            | BASE TABLE | requiere_eipd                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rats                            | BASE TABLE | requiere_dpia                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rats                            | BASE TABLE | requiere_pia                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rats                            | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rats                            | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rats                            | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| reports                         | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| reports                         | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| reports                         | BASE TABLE | empresa_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| reports                         | BASE TABLE | title                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| reports                         | BASE TABLE | description                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| reports                         | BASE TABLE | report_type                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| reports                         | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| reports                         | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| reports                         | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| review_queue                    | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| review_queue                    | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| review_queue                    | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| review_queue                    | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| review_queue                    | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| review_queue                    | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rule_execution_log              | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rule_execution_log              | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rule_execution_log              | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rule_execution_log              | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rule_execution_log              | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| rule_execution_log              | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_assessments             | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_assessments             | BASE TABLE | session_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_assessments             | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_assessments             | BASE TABLE | assessment_type                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_assessments             | BASE TABLE | assessment_name                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_assessments             | BASE TABLE | max_score                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_assessments             | BASE TABLE | achieved_score                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_assessments             | BASE TABLE | passing_score                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_assessments             | BASE TABLE | completion_status               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_assessments             | BASE TABLE | feedback                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_assessments             | BASE TABLE | detailed_results                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_assessments             | BASE TABLE | completion_time                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_assessments             | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_assessments             | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_data_flows              | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_data_flows              | BASE TABLE | activity_id                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_data_flows              | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_data_flows              | BASE TABLE | flow_name                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_data_flows              | BASE TABLE | source_system                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_data_flows              | BASE TABLE | destination_system              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_data_flows              | BASE TABLE | data_types                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_data_flows              | BASE TABLE | flow_frequency                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_data_flows              | BASE TABLE | data_volume_estimate            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_data_flows              | BASE TABLE | encryption_in_transit           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_data_flows              | BASE TABLE | encryption_at_rest              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_data_flows              | BASE TABLE | access_controls                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_data_flows              | BASE TABLE | monitoring_enabled              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_data_flows              | BASE TABLE | flow_diagram_url                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_data_flows              | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_data_flows              | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_generated_documents     | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_generated_documents     | BASE TABLE | session_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_generated_documents     | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_generated_documents     | BASE TABLE | document_type                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_generated_documents     | BASE TABLE | document_name                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_generated_documents     | BASE TABLE | file_path                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_generated_documents     | BASE TABLE | file_size_bytes                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_generated_documents     | BASE TABLE | mime_type                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_generated_documents     | BASE TABLE | download_count                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_generated_documents     | BASE TABLE | expiry_date                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_generated_documents     | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_generated_documents     | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_generated_documents     | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_professional_templates  | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_professional_templates  | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_professional_templates  | BASE TABLE | template_name                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_professional_templates  | BASE TABLE | template_type                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_professional_templates  | BASE TABLE | industry_sector                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_professional_templates  | BASE TABLE | complexity_level                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_professional_templates  | BASE TABLE | template_content                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_professional_templates  | BASE TABLE | file_attachments                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_professional_templates  | BASE TABLE | usage_count                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_professional_templates  | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_professional_templates  | BASE TABLE | created_by                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_professional_templates  | BASE TABLE | approved_by                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_professional_templates  | BASE TABLE | approval_date                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_professional_templates  | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_professional_templates  | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | session_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | activity_name                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | business_area                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | responsible_person              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | main_purpose                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | legal_basis                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | legal_justification             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | data_subject_categories         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | data_categories                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | sensitive_data                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | minors_involved                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | storage_systems                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | internal_recipients             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | third_party_processors          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | third_party_recipients          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | international_transfers         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | retention_period                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | deletion_criteria               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | security_measures               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | identified_risks                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | mitigation_measures             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | status                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | validation_score                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | feedback                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_rat_activities          | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_sessions                | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_sessions                | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_sessions                | BASE TABLE | company_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_sessions                | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_sessions                | BASE TABLE | session_name                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_sessions                | BASE TABLE | session_type                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_sessions                | BASE TABLE | scenario_id                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_sessions                | BASE TABLE | status                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_sessions                | BASE TABLE | start_time                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_sessions                | BASE TABLE | end_time                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_sessions                | BASE TABLE | total_duration_minutes          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_sessions                | BASE TABLE | progress_percentage             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_sessions                | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_sessions                | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| sandbox_sessions                | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| semantic_validation_rules       | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| semantic_validation_rules       | BASE TABLE | rule_name                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| semantic_validation_rules       | BASE TABLE | rule_type                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| semantic_validation_rules       | BASE TABLE | conditions                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| semantic_validation_rules       | BASE TABLE | actions                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| semantic_validation_rules       | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| semantic_validation_rules       | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| semantic_validation_rules       | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| session_data                    | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| session_data                    | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| session_data                    | BASE TABLE | session_key                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| session_data                    | BASE TABLE | session_data                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| session_data                    | BASE TABLE | expires_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| session_data                    | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_alerts                   | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_alerts                   | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_alerts                   | BASE TABLE | alert_type                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_alerts                   | BASE TABLE | severity                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_alerts                   | BASE TABLE | title                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_alerts                   | BASE TABLE | message                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_alerts                   | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_alerts                   | BASE TABLE | resolved                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_alerts                   | BASE TABLE | resolved_by                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_alerts                   | BASE TABLE | resolved_at                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_alerts                   | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_config                   | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_config                   | BASE TABLE | key                             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_config                   | BASE TABLE | value                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_config                   | BASE TABLE | description                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_config                   | BASE TABLE | is_public                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_config                   | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_config                   | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_error_logs               | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_error_logs               | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_error_logs               | BASE TABLE | log_level                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_error_logs               | BASE TABLE | error_code                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_error_logs               | BASE TABLE | error_message                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_error_logs               | BASE TABLE | error_data                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_error_logs               | BASE TABLE | source_component                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_error_logs               | BASE TABLE | category                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_error_logs               | BASE TABLE | timestamp                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_error_logs               | BASE TABLE | user_agent                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_error_logs               | BASE TABLE | url                             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_error_logs               | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_error_logs               | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_stats                    | VIEW       | table_name                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_stats                    | VIEW       | total_records                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_stats                    | VIEW       | critical_errors                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_stats                    | VIEW       | last_24h                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| system_stats                    | VIEW       | last_record                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_configs                  | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_configs                  | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_configs                  | BASE TABLE | max_users                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_configs                  | BASE TABLE | max_storage_gb                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_configs                  | BASE TABLE | features_enabled                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_configs                  | BASE TABLE | custom_settings                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_configs                  | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | plan_type                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | max_rats_total                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | max_rats_per_user               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | max_rats_per_area               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | max_users                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | max_admin_users                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | max_storage_mb                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | max_file_size_mb                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | session_timeout_minutes         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | data_retention_days             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | can_export_pdf                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | can_bulk_import                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | can_api_access                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | can_audit_logs                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | can_advanced_reports            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | max_requests_per_hour           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | max_concurrent_sessions         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | trial_expires_at                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | notes                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_limits                   | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_settings                 | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_settings                 | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_settings                 | BASE TABLE | key                             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_settings                 | BASE TABLE | value                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_settings                 | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_settings                 | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_usage                    | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_usage                    | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_usage                    | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_usage                    | BASE TABLE | current_rats_total              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_usage                    | BASE TABLE | current_users                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_usage                    | BASE TABLE | current_storage_mb              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_usage                    | BASE TABLE | rats_by_user                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_usage                    | BASE TABLE | rats_by_area                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_usage                    | BASE TABLE | last_login_at                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_usage                    | BASE TABLE | total_sessions_today            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_usage                    | BASE TABLE | requests_this_hour              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenant_usage                    | BASE TABLE | calculated_at                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenants                         | VIEW       | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenants                         | VIEW       | name                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenants                         | VIEW       | display_name                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenants                         | VIEW       | industry                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenants                         | VIEW       | size                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenants                         | VIEW       | country                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenants                         | VIEW       | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenants                         | VIEW       | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenants                         | VIEW       | is_demo                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenants                         | VIEW       | online_mode                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tenants                         | VIEW       | active                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tokens                          | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tokens                          | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tokens                          | BASE TABLE | token                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tokens                          | BASE TABLE | expires_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| tokens                          | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| training                        | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| training                        | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| training                        | BASE TABLE | empresa_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| training                        | BASE TABLE | title                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| training                        | BASE TABLE | description                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| training                        | BASE TABLE | module_type                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| training                        | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| training                        | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| training                        | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| transfers                       | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| transfers                       | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| transfers                       | BASE TABLE | empresa_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| transfers                       | BASE TABLE | title                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| transfers                       | BASE TABLE | description                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| transfers                       | BASE TABLE | destination                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| transfers                       | BASE TABLE | status                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| transfers                       | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| transfers                       | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| transfers                       | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_help_stats                 | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_help_stats                 | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_help_stats                 | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_help_stats                 | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_help_stats                 | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_help_stats                 | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_notifications              | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_notifications              | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_notifications              | BASE TABLE | data                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_notifications              | BASE TABLE | metadata                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_notifications              | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_notifications              | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_preferences                | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_preferences                | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_preferences                | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_preferences                | BASE TABLE | preference_key                  |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_preferences                | BASE TABLE | preference_value                |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_preferences                | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_preferences                | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_sessions                   | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_sessions                   | BASE TABLE | user_id                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_sessions                   | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_sessions                   | BASE TABLE | tenant_data                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_sessions                   | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_sessions                   | BASE TABLE | session_start                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_sessions                   | BASE TABLE | last_activity                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_sessions                   | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| user_sessions                   | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| users                           | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| users                           | BASE TABLE | username                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| users                           | BASE TABLE | email                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| users                           | BASE TABLE | hashed_password                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| users                           | BASE TABLE | first_name                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| users                           | BASE TABLE | last_name                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| users                           | BASE TABLE | is_superuser                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| users                           | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| users                           | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| users                           | BASE TABLE | empresa_id                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| users                           | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| users                           | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | email                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | rol                             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | permisos                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | first_name                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | last_name                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | full_name                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | avatar_url                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | phone                           |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | department                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | position                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | permissions                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | preferences                     |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | last_login_at                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| usuarios                        | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_configs                 | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_configs                 | BASE TABLE | tenant_id                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_configs                 | BASE TABLE | name                            |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_configs                 | BASE TABLE | url                             |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_configs                 | BASE TABLE | events                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_configs                 | BASE TABLE | headers                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_configs                 | BASE TABLE | secret                          |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_configs                 | BASE TABLE | is_active                       |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_configs                 | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_configs                 | BASE TABLE | updated_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_deliveries              | BASE TABLE | id                              |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_deliveries              | BASE TABLE | webhook_config_id               |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_deliveries              | BASE TABLE | event_type                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_deliveries              | BASE TABLE | payload                         |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_deliveries              | BASE TABLE | response_status                 |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_deliveries              | BASE TABLE | response_body                   |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_deliveries              | BASE TABLE | delivered_at                    |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_deliveries              | BASE TABLE | attempts                        |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "| webhook_deliveries              | BASE TABLE | created_at                      |": {
      "in_expected_list": true,
      "used_in_code": false,
      "operations_count": 0,
      "operations_types": [],
      "files_using": [],
      "status": "UNUSED"
    },
    "activities": {
      "in_expected_list": false,
      "used_in_code": true,
      "operations_count": 1,
      "operations_types": [
        "select"
      ],
      "files_using": [
        "/frontend/src/components/AdminDashboard.js"
      ],
      "status": "UNDOCUMENTED"
    },
    "actividades_dpo": {
      "in_expected_list": false,
      "used_in_code": true,
      "operations_count": 5,
      "operations_types": [
        "select",
        "insert"
      ],
      "files_using": [
        "/frontend/src/components/AdminDashboard.js",
        "/frontend/src/services/partnerSyncEngine.js",
        "/frontend/src/services/testBalancingEngine.js",
        "/frontend/src/utils/logicAuditor.js"
      ],
      "status": "UNDOCUMENTED"
    },
    "usuarios": {
      "in_expected_list": false,
      "used_in_code": true,
      "operations_count": 1,
      "operations_types": [
        "select"
      ],
      "files_using": [
        "/frontend/src/components/AdminDashboard.js"
      ],
      "status": "UNDOCUMENTED"
    },
    "proveedores": {
      "in_expected_list": false,
      "used_in_code": true,
      "operations_count": 1,
      "operations_types": [
        "insert"
      ],
      "files_using": [
        "/frontend/src/components/GestionProveedores.js"
      ],
      "status": "UNDOCUMENTED"
    },
    "organizaciones": {
      "in_expected_list": false,
      "used_in_code": true,
      "operations_count": 3,
      "operations_types": [
        "select"
      ],
      "files_using": [
        "/frontend/src/services/api.js",
        "/frontend/src/services/partnerSyncEngine.js",
        "/frontend/src/utils/instantSystemTest.js"
      ],
      "status": "UNDOCUMENTED"
    },
    "agent_activity_log": {
      "in_expected_list": false,
      "used_in_code": true,
      "operations_count": 1,
      "operations_types": [
        "select"
      ],
      "files_using": [
        "/frontend/src/services/api.js"
      ],
      "status": "UNDOCUMENTED"
    },
    "mapeo_datos_rat": {
      "in_expected_list": false,
      "used_in_code": true,
      "operations_count": 3,
      "operations_types": [
        "select"
      ],
      "files_using": [
        "/frontend/src/services/partnerSyncEngine.js",
        "/frontend/src/utils/logicAuditor.js"
      ],
      "status": "UNDOCUMENTED"
    },
    "generated_documents": {
      "in_expected_list": false,
      "used_in_code": true,
      "operations_count": 2,
      "operations_types": [
        "select"
      ],
      "files_using": [
        "/frontend/src/services/partnerSyncEngine.js",
        "/frontend/src/utils/logicAuditor.js"
      ],
      "status": "UNDOCUMENTED"
    },
    "rat_proveedores": {
      "in_expected_list": false,
      "used_in_code": true,
      "operations_count": 1,
      "operations_types": [
        "select"
      ],
      "files_using": [
        "/frontend/src/services/partnerSyncEngine.js"
      ],
      "status": "UNDOCUMENTED"
    }
  },
  "function_catalog": {
    "by_file": {
      "/frontend/src/App.js": [
        {
          "name": "LoadingScreen",
          "type": "arrow",
          "parameters": [],
          "line": 50,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ProtectedRoute",
          "type": "arrow",
          "parameters": [
            "{ children",
            "requiredPermissions = []",
            "allowDemo = false }"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "AppContent",
          "type": "arrow",
          "parameters": [],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "TenantSelector",
          "type": "arrow",
          "parameters": [],
          "line": 335,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleTenantSelect",
          "type": "arrow",
          "parameters": [
            "tenant"
          ],
          "line": 339,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "App",
          "type": "arrow",
          "parameters": [],
          "line": 394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!user"
          ],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!currentTenant"
          ],
          "line": 76,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isRestricted() && !allowDemo"
          ],
          "line": 80,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "requiredPermissions && requiredPermissions.length > 0"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!hasPermission"
          ],
          "line": 89,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "user && currentTenant?.id"
          ],
          "line": 103,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!user"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!currentTenant && user?.tenant_id !== (process.env.REACT_APP_DEMO_TENANT_ID || 'demo')"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "LoadingScreen",
          "type": "component",
          "parameters": [],
          "line": 50,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/APIPartnersIntegration.js": [
        {
          "name": "APIPartnersIntegration",
          "type": "arrow",
          "parameters": [],
          "line": 62,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateUniqueId",
          "type": "arrow",
          "parameters": [],
          "line": 610,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateSecureSecret",
          "type": "arrow",
          "parameters": [],
          "line": 614,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateWebhookSecret",
          "type": "arrow",
          "parameters": [],
          "line": 620,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "user?.is_superuser"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 121,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "newPartner.webhook_url"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/AdminDashboard.js": [
        {
          "name": "AdminDashboard",
          "type": "arrow",
          "parameters": [],
          "line": 60,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getEstadoColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRolColor",
          "type": "arrow",
          "parameters": [
            "rol"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getGravedadColor",
          "type": "arrow",
          "parameters": [
            "gravedad"
          ],
          "line": 164,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleAddHolding",
          "type": "arrow",
          "parameters": [],
          "line": 174,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleEditHolding",
          "type": "arrow",
          "parameters": [
            "holding"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleAddUser",
          "type": "arrow",
          "parameters": [],
          "line": 184,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "HoldingCard",
          "type": "arrow",
          "parameters": [
            "{ holding",
            "onEdit",
            "onView }"
          ],
          "line": 610,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "MetricasComplianceCard",
          "type": "arrow",
          "parameters": [
            "{ metricas",
            "holdings }"
          ],
          "line": 707,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "MetricasOperacionalesCard",
          "type": "arrow",
          "parameters": [
            "{ metricas }"
          ],
          "line": 765,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "MetricasTendenciasCard",
          "type": "arrow",
          "parameters": [],
          "line": 818,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "AlertCard",
          "type": "arrow",
          "parameters": [
            "{ alerta",
            "holdings }"
          ],
          "line": 869,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ConfiguracionSistema",
          "type": "arrow",
          "parameters": [
            "{ configuracion }"
          ],
          "line": 930,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "HoldingForm",
          "type": "arrow",
          "parameters": [
            "{ holding }"
          ],
          "line": 1116,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getEstadoColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 1202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRolColor",
          "type": "arrow",
          "parameters": [
            "rol"
          ],
          "line": 1213,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getGravedadColor",
          "type": "arrow",
          "parameters": [
            "gravedad"
          ],
          "line": 1224,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tenantId"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/CalendarView.js": [
        {
          "name": "CalendarView",
          "type": "arrow",
          "parameters": [],
          "line": 58,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getViewStartDate",
          "type": "arrow",
          "parameters": [],
          "line": 167,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getViewEndDate",
          "type": "arrow",
          "parameters": [],
          "line": 182,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "eventsData"
          ],
          "line": 197,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "navegarMes",
          "type": "arrow",
          "parameters": [
            "direccion"
          ],
          "line": 224,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "filtrarEventos",
          "type": "arrow",
          "parameters": [],
          "line": 234,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getDaysInMonth",
          "type": "arrow",
          "parameters": [],
          "line": 243,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderCalendarHeader",
          "type": "arrow",
          "parameters": [],
          "line": 292,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStatsCards",
          "type": "arrow",
          "parameters": [],
          "line": 344,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderCalendarGrid",
          "type": "arrow",
          "parameters": [],
          "line": 415,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderUpcomingEvents",
          "type": "arrow",
          "parameters": [],
          "line": 554,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderEventDialog",
          "type": "arrow",
          "parameters": [],
          "line": 635,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 159,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "viewMode"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "viewMode"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "direccion === 'prev'"
          ],
          "line": 226,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = startingDayOfWeek - 1; i >= 0; i--"
          ],
          "line": 254,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let day = 1; day <= daysInMonth; day++"
          ],
          "line": 264,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let day = 1; day <= remainingDays; day++"
          ],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "recurso_tipo"
          ],
          "line": 714,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderCalendarHeader",
          "type": "component",
          "parameters": [],
          "line": 292,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStatsCards",
          "type": "component",
          "parameters": [],
          "line": 344,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderUpcomingEvents",
          "type": "component",
          "parameters": [],
          "line": 554,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderEventDialog",
          "type": "component",
          "parameters": [],
          "line": 635,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/ComplianceDashboard.js": [
        {
          "name": "ComplianceDashboard",
          "type": "arrow",
          "parameters": [
            "{ compact = false",
            "ratId = null }"
          ],
          "line": 45,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "toggleSection",
          "type": "arrow",
          "parameters": [
            "section"
          ],
          "line": 77,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getScoreColor",
          "type": "arrow",
          "parameters": [
            "score"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getHealthIcon",
          "type": "arrow",
          "parameters": [],
          "line": 90,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "MetricCard",
          "type": "arrow",
          "parameters": [
            "{ title",
            "value",
            "subtitle",
            "icon",
            "color",
            "alert = false }"
          ],
          "line": 377,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "CompactDashboard",
          "type": "arrow",
          "parameters": [
            "{ averageScore",
            "highRiskCount",
            "hasAlerts",
            "loading",
            "onExpand }"
          ],
          "line": 414,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "compact"
          ],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/ComplianceMetrics.js": [
        {
          "name": "ComplianceMetrics",
          "type": "arrow",
          "parameters": [],
          "line": 44,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularMetricasGenerales",
          "type": "arrow",
          "parameters": [
            "ratsData"
          ],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getComplianceColor",
          "type": "arrow",
          "parameters": [
            "score"
          ],
          "line": 340,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskSeverityColor",
          "type": "arrow",
          "parameters": [
            "severity"
          ],
          "line": 346,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getPriorityColor",
          "type": "arrow",
          "parameters": [
            "priority"
          ],
          "line": 355,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 90,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratsCompletados.length > 0"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosSensiblesSinEIPD > 0"
          ],
          "line": 182,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "transferenciasInternacionales > 0"
          ],
          "line": 190,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "baseJuridicaUnclear > 0"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "plazosIndefinidos > 0"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 211,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratsError && ratsNoCertificados?.length > 0"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!dpoError && actividadesDPO?.length > 0"
          ],
          "line": 246,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!plazoError && sinPlazoConservacion?.length > 0"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "transferenciasConRiesgo.length > 0"
          ],
          "line": 282,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "severity"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "priority"
          ],
          "line": 356,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 364,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/DPAGenerator.js": [
        {
          "name": "DPAGenerator",
          "type": "arrow",
          "parameters": [],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "seleccionarProveedor",
          "type": "arrow",
          "parameters": [
            "proveedor"
          ],
          "line": 268,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarContenidoDPA",
          "type": "arrow",
          "parameters": [],
          "line": 354,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "descargarDPA",
          "type": "arrow",
          "parameters": [],
          "line": 465,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStepContent",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 475,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderContratoInfo",
          "type": "arrow",
          "parameters": [],
          "line": 496,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderResponsableInfo",
          "type": "arrow",
          "parameters": [],
          "line": 581,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderEncargadoInfo",
          "type": "arrow",
          "parameters": [],
          "line": 657,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTratamientoInfo",
          "type": "arrow",
          "parameters": [],
          "line": 751,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderSeguridadInfo",
          "type": "arrow",
          "parameters": [],
          "line": 864,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTransferenciasDerechos",
          "type": "arrow",
          "parameters": [],
          "line": 907,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderGenerarDPA",
          "type": "arrow",
          "parameters": [],
          "line": 991,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTextFieldStyles",
          "type": "arrow",
          "parameters": [],
          "line": 1069,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 159,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentTenant"
          ],
          "line": 193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 227,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!dpaData.contrato.nombre_acuerdo"
          ],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!dpaData.responsable.nombre_empresa || !dpaData.encargado.nombre_empresa"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 327,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "dbError"
          ],
          "line": 333,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 476,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderContratoInfo",
          "type": "component",
          "parameters": [],
          "line": 496,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderResponsableInfo",
          "type": "component",
          "parameters": [],
          "line": 581,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderEncargadoInfo",
          "type": "component",
          "parameters": [],
          "line": 657,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTratamientoInfo",
          "type": "component",
          "parameters": [],
          "line": 751,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderSeguridadInfo",
          "type": "component",
          "parameters": [],
          "line": 864,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTransferenciasDerechos",
          "type": "component",
          "parameters": [],
          "line": 907,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderGenerarDPA",
          "type": "component",
          "parameters": [],
          "line": 991,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTextFieldStyles",
          "type": "component",
          "parameters": [],
          "line": 1069,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/DiagnosticCenter.js": [
        {
          "name": "DiagnosticCenter",
          "type": "arrow",
          "parameters": [],
          "line": 58,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupErrorCapture",
          "type": "arrow",
          "parameters": [],
          "line": 91,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "toggleContinuousTesting",
          "type": "arrow",
          "parameters": [],
          "line": 197,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusIcon",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusColor",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 228,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "intervalRef.current"
          ],
          "line": 85,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const module of criticalModules"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 134,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 175,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 190,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "continuousTesting"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "intervalRef.current"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status?.toLowerCase()"
          ],
          "line": 215,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status?.toLowerCase()"
          ],
          "line": 229,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/EIPDTemplates.js": [
        {
          "name": "EIPDTemplates",
          "type": "arrow",
          "parameters": [],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "templatesData"
          ],
          "line": 327,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "usarTemplate",
          "type": "arrow",
          "parameters": [
            "template"
          ],
          "line": 340,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "filtrarTemplates",
          "type": "arrow",
          "parameters": [],
          "line": 381,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskChip",
          "type": "arrow",
          "parameters": [
            "nivel"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getIndustryInfo",
          "type": "arrow",
          "parameters": [
            "industryId"
          ],
          "line": 401,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTemplateCards",
          "type": "arrow",
          "parameters": [],
          "line": 405,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderPreviewDialog",
          "type": "arrow",
          "parameters": [],
          "line": 568,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 292,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 320,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 375,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "renderTemplateCards",
          "type": "component",
          "parameters": [],
          "line": 405,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderPreviewDialog",
          "type": "component",
          "parameters": [],
          "line": 568,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/EmpresaDataManager.js": [
        {
          "name": "EmpresaDataManager",
          "type": "arrow",
          "parameters": [
            "{ onDataUpdate",
            "existingData = {} }"
          ],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleSave",
          "type": "arrow",
          "parameters": [],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleAddPlataforma",
          "type": "arrow",
          "parameters": [
            "plataforma"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "onDataUpdate"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!nuevasPlataformas.find(p => p.nombre === plataforma.nombre)"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/FundamentosTecnicos.js": [
        {
          "name": "FundamentosTecnicos",
          "type": "arrow",
          "parameters": [],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleDownloadReport",
          "type": "arrow",
          "parameters": [],
          "line": 59,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/GestionProveedores.js": [
        {
          "name": "GestionProveedores",
          "type": "arrow",
          "parameters": [],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleAddProveedor",
          "type": "arrow",
          "parameters": [],
          "line": 318,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskColor",
          "type": "arrow",
          "parameters": [
            "riesgo"
          ],
          "line": 376,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateDPATemplate",
          "type": "arrow",
          "parameters": [
            "proveedor"
          ],
          "line": 385,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleDownloadDPATemplate",
          "type": "arrow",
          "parameters": [
            "tipo"
          ],
          "line": 417,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderProveedoresTab",
          "type": "arrow",
          "parameters": [],
          "line": 537,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDPATemplatesTab",
          "type": "arrow",
          "parameters": [],
          "line": 727,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 195,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "response.success && response.data.length > 0"
          ],
          "line": 209,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "retryResponse.success"
          ],
          "line": 219,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validacion.secure"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 291,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "user"
          ],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dialogType === 'add'"
          ],
          "line": 329,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "response.success"
          ],
          "line": 334,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dialogType === 'edit'"
          ],
          "line": 342,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "response.success"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 370,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "riesgo"
          ],
          "line": 377,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "plantilla"
          ],
          "line": 524,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderProveedoresTab",
          "type": "component",
          "parameters": [],
          "line": 537,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDPATemplatesTab",
          "type": "component",
          "parameters": [],
          "line": 727,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/ImmutableAuditLog.js": [
        {
          "name": "ImmutableAuditLog",
          "type": "arrow",
          "parameters": [],
          "line": 70,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateHash",
          "type": "arrow",
          "parameters": [
            "data"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "logsData"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "exportarAuditLogs",
          "type": "arrow",
          "parameters": [
            "formato"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getActionChip",
          "type": "arrow",
          "parameters": [
            "accion"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStatsCards",
          "type": "arrow",
          "parameters": [],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderAuditTable",
          "type": "arrow",
          "parameters": [],
          "line": 400,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderIntegrityPanel",
          "type": "arrow",
          "parameters": [],
          "line": 509,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDetailDialog",
          "type": "arrow",
          "parameters": [],
          "line": 603,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < str.length; i++"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 152,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filters.usuario !== 'TODOS'"
          ],
          "line": 177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filters.accion !== 'TODAS'"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filters.fechaInicio"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filters.fechaFin"
          ],
          "line": 186,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < auditLogs.length; i++"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStatsCards",
          "type": "component",
          "parameters": [],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderAuditTable",
          "type": "component",
          "parameters": [],
          "line": 400,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderIntegrityPanel",
          "type": "component",
          "parameters": [],
          "line": 509,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDetailDialog",
          "type": "component",
          "parameters": [],
          "line": 603,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/Layout.js": [
        {
          "name": "Layout",
          "type": "declaration",
          "parameters": [
            "{ children }"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleDrawerToggle",
          "type": "arrow",
          "parameters": [],
          "line": 132,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleNavigation",
          "type": "arrow",
          "parameters": [
            "path"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleLogoutClick",
          "type": "arrow",
          "parameters": [],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleLogoutConfirm",
          "type": "arrow",
          "parameters": [],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleLogoutCancel",
          "type": "arrow",
          "parameters": [],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "Layout",
          "type": "method",
          "parameters": [
            "{ children }"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isMobile"
          ],
          "line": 138,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/LayoutSimple.js": [
        {
          "name": "LayoutSimple",
          "type": "declaration",
          "parameters": [
            "{ children }"
          ],
          "line": 32,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleMenu",
          "type": "arrow",
          "parameters": [
            "event"
          ],
          "line": 38,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleClose",
          "type": "arrow",
          "parameters": [],
          "line": 42,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleNavigation",
          "type": "arrow",
          "parameters": [
            "path"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleLogout",
          "type": "arrow",
          "parameters": [],
          "line": 51,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "NavigationButtons",
          "type": "arrow",
          "parameters": [
            "{ currentPath",
            "navigate }"
          ],
          "line": 217,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "LayoutSimple",
          "type": "method",
          "parameters": [
            "{ children }"
          ],
          "line": 32,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentPath === '/login' || currentPath.includes('/select-')"
          ],
          "line": 231,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/ModuloEIPD.js": [
        {
          "name": "ModuloEIPD",
          "type": "arrow",
          "parameters": [],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleNext",
          "type": "arrow",
          "parameters": [],
          "line": 272,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleBack",
          "type": "arrow",
          "parameters": [],
          "line": 276,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularNivelRiesgo",
          "type": "arrow",
          "parameters": [],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "exportarEIPD",
          "type": "arrow",
          "parameters": [],
          "line": 289,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStepContent",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 419,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "esNuevo && ratOrigen"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "esEdicion && documentoId"
          ],
          "line": 184,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 420,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/NotificationCenter.js": [
        {
          "name": "NotificationCenter",
          "type": "arrow",
          "parameters": [],
          "line": 69,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "notificationsData"
          ],
          "line": 255,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "filtrarNotificaciones",
          "type": "arrow",
          "parameters": [],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getNotificationIcon",
          "type": "arrow",
          "parameters": [
            "tipo",
            "prioridad"
          ],
          "line": 335,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getPriorityChip",
          "type": "arrow",
          "parameters": [
            "prioridad"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "navigateToResource",
          "type": "arrow",
          "parameters": [
            "notification"
          ],
          "line": 359,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStatsCards",
          "type": "arrow",
          "parameters": [],
          "line": 382,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderNotificationsList",
          "type": "arrow",
          "parameters": [],
          "line": 466,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderSettingsTab",
          "type": "arrow",
          "parameters": [],
          "line": 631,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDetailDialog",
          "type": "arrow",
          "parameters": [],
          "line": 790,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 169,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 319,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "recurso_tipo"
          ],
          "line": 362,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStatsCards",
          "type": "component",
          "parameters": [],
          "line": 382,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderNotificationsList",
          "type": "component",
          "parameters": [],
          "line": 466,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderSettingsTab",
          "type": "component",
          "parameters": [],
          "line": 631,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDetailDialog",
          "type": "component",
          "parameters": [],
          "line": 790,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/PageLayout.js": [],
      "/frontend/src/components/PresentacionModuloCero.js": [
        {
          "name": "PresentacionModuloCero",
          "type": "arrow",
          "parameters": [
            "{ autoStart = false }"
          ],
          "line": 24,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleOpenPresentation",
          "type": "arrow",
          "parameters": [],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleClosePresentation",
          "type": "arrow",
          "parameters": [],
          "line": 31,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "openInNewWindow",
          "type": "arrow",
          "parameters": [],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!newWindow || newWindow.closed"
          ],
          "line": 42,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/PreventiveAIController.js": [
        {
          "name": "PreventiveAIController",
          "type": "arrow",
          "parameters": [],
          "line": 8,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "initialAudit.summary.failed_rules > 0"
          ],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 37,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/ProcesoCompleto.js": [
        {
          "name": "ProcesoCompleto",
          "type": "arrow",
          "parameters": [],
          "line": 45,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "iniciarCierre",
          "type": "arrow",
          "parameters": [],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getIconByType",
          "type": "arrow",
          "parameters": [
            "tipo"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "prev >= 4"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "tipo"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/ProviderManager.js": [
        {
          "name": "ProviderManager",
          "type": "arrow",
          "parameters": [],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTipoColor",
          "type": "arrow",
          "parameters": [
            "tipo"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getEstadoColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 226,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiesgoColor",
          "type": "arrow",
          "parameters": [
            "riesgo"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getDPAStatusColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 247,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleAddProvider",
          "type": "arrow",
          "parameters": [],
          "line": 257,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleEditProvider",
          "type": "arrow",
          "parameters": [
            "provider"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleViewDPA",
          "type": "arrow",
          "parameters": [
            "provider"
          ],
          "line": 267,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleAuditProvider",
          "type": "arrow",
          "parameters": [
            "provider"
          ],
          "line": 272,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiesgoColorHelper",
          "type": "arrow",
          "parameters": [
            "riesgo"
          ],
          "line": 886,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ProviderAuditCard",
          "type": "arrow",
          "parameters": [
            "{ provider",
            "onAudit }"
          ],
          "line": 897,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ProviderRiskCard",
          "type": "arrow",
          "parameters": [
            "{ provider }"
          ],
          "line": 996,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "DPAManagementView",
          "type": "arrow",
          "parameters": [
            "{ provider }"
          ],
          "line": 1081,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "provider.dpa_vigente.estado === 'VENCIDO'"
          ],
          "line": 999,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!provider.ultima_auditoria"
          ],
          "line": 1008,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "provider.incidentes.filter(i => !i.resuelto).length > 0"
          ],
          "line": 1017,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "provider.nivel_riesgo === 'CRITICO'"
          ],
          "line": 1026,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/RATEditPage.js": [
        {
          "name": "RATEditPage",
          "type": "arrow",
          "parameters": [],
          "line": 59,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleFieldChange",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 181,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleArrayFieldAdd",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 197,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleArrayFieldRemove",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateStep",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleNext",
          "type": "arrow",
          "parameters": [],
          "line": 268,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleBack",
          "type": "arrow",
          "parameters": [],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "DataTypesSelector",
          "type": "arrow",
          "parameters": [
            "{ selectedTypes",
            "onTypesChange",
            "error }"
          ],
          "line": 992,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "toggleTipo",
          "type": "arrow",
          "parameters": [
            "tipo"
          ],
          "line": 1006,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "RecipientsSection",
          "type": "arrow",
          "parameters": [
            "{ rat",
            "onFieldChange",
            "onArrayAdd",
            "onArrayRemove",
            "validationErrors }"
          ],
          "line": 1051,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "InternationalTransfersSection",
          "type": "arrow",
          "parameters": [
            "{ rat",
            "onFieldChange",
            "onArrayAdd",
            "onArrayRemove }"
          ],
          "line": 1179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "SecurityMeasuresSection",
          "type": "arrow",
          "parameters": [
            "{ rat",
            "onArrayAdd",
            "onArrayRemove",
            "validationErrors }"
          ],
          "line": 1248,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "CategoriasDataSelector",
          "type": "arrow",
          "parameters": [
            "{ categoriasData",
            "onCategoriasChange",
            "error }"
          ],
          "line": 1386,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleCategoryToggle",
          "type": "arrow",
          "parameters": [
            "categoria",
            "subcategoria",
            "valor"
          ],
          "line": 1387,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isSelected",
          "type": "arrow",
          "parameters": [
            "categoria",
            "subcategoria",
            "valor"
          ],
          "line": 1408,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratId && ratId !== 'new'"
          ],
          "line": 125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validationErrors[field]"
          ],
          "line": 188,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && !rat[field].includes(value)"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 216,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.base_licitud === 'interes_legitimo' && !rat.base_legal"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!hasAnyCategory"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rat.destinatarios_internos || rat.destinatarios_internos.length === 0"
          ],
          "line": 248,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rat.medidas_seguridad_tecnicas || rat.medidas_seguridad_tecnicas.length === 0"
          ],
          "line": 258,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validateStep(activeStep)"
          ],
          "line": 269,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "preventiveCheck.alerts && Array.isArray(preventiveCheck.alerts) && preventiveCheck.alerts.length > 0"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "criticalAlerts.length > 0"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "warnings.length > 0"
          ],
          "line": 314,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!confirmContinue"
          ],
          "line": 317,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rat.nombre_actividad || !rat.finalidad_principal || !rat.area_responsable"
          ],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratId && ratId !== 'new'"
          ],
          "line": 361,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!verification"
          ],
          "line": 404,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 413,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 421,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "selectedTypes.includes(tipo)"
          ],
          "line": 1007,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!newCategorias[categoria]"
          ],
          "line": 1390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!newCategorias[categoria][subcategoria]"
          ],
          "line": 1394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentValues.includes(valor)"
          ],
          "line": 1399,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/RATFormWithCompliance.js": [
        {
          "name": "RATFormWithCompliance",
          "type": "arrow",
          "parameters": [],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleInputChange",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 91,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleCategoriaDataChange",
          "type": "arrow",
          "parameters": [
            "categoria"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getAlertIcon",
          "type": "arrow",
          "parameters": [
            "severity"
          ],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getDocumentIcon",
          "type": "arrow",
          "parameters": [
            "tipo"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.nombre_actividad"
          ],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "alertasCriticas.length > 0"
          ],
          "line": 82,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "alertas.some(a => a.severity === 'error')"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "severity"
          ],
          "line": 120,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "tipo"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/RATListPage.js": [
        {
          "name": "RATListPage",
          "type": "arrow",
          "parameters": [],
          "line": 44,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getEstadoColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 85,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiesgoColor",
          "type": "arrow",
          "parameters": [
            "riesgo"
          ],
          "line": 96,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getEstadoIcon",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleEdit",
          "type": "arrow",
          "parameters": [
            "rat"
          ],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleView",
          "type": "arrow",
          "parameters": [
            "rat"
          ],
          "line": 121,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleDelete",
          "type": "arrow",
          "parameters": [
            "rat"
          ],
          "line": 125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "handleActionMenu",
          "type": "arrow",
          "parameters": [
            "event",
            "ratId"
          ],
          "line": 150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "closeActionMenu",
          "type": "arrow",
          "parameters": [],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 77,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/RATSearchFilter.js": [
        {
          "name": "handleFilterChange",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 145,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleMultiSelectChange",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 152,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "clearAllFilters",
          "type": "arrow",
          "parameters": [],
          "line": 159,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "saveCurrentFilter",
          "type": "arrow",
          "parameters": [],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "loadSavedFilter",
          "type": "arrow",
          "parameters": [
            "savedFilter"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "deleteSavedFilter",
          "type": "arrow",
          "parameters": [
            "filterId"
          ],
          "line": 203,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getActiveFiltersCount",
          "type": "arrow",
          "parameters": [],
          "line": 209,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "exportFilters",
          "type": "arrow",
          "parameters": [],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/RATSystemProfessional.js": [
        {
          "name": "RATSystemProfessional",
          "type": "arrow",
          "parameters": [],
          "line": 276,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "checkStepComplete",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 593,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleNext",
          "type": "arrow",
          "parameters": [],
          "line": 622,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleBack",
          "type": "arrow",
          "parameters": [],
          "line": 628,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "mostrarGestionEmpresa",
          "type": "arrow",
          "parameters": [],
          "line": 677,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "volverAInicio",
          "type": "arrow",
          "parameters": [],
          "line": 683,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "mapearCategorias",
          "type": "arrow",
          "parameters": [
            "rat"
          ],
          "line": 700,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validarDatosRATCompletos",
          "type": "arrow",
          "parameters": [
            "ratData",
            "tenant"
          ],
          "line": 862,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "PasoIdentificacion",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "setRatData }"
          ],
          "line": 1815,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validarRUT",
          "type": "arrow",
          "parameters": [
            "rut"
          ],
          "line": 1819,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "PasoCategorias",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "setRatData",
            "currentTenant",
            "setAlertas }"
          ],
          "line": 2122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleIdentificacion",
          "type": "arrow",
          "parameters": [
            "event"
          ],
          "line": 2125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleSensibles",
          "type": "arrow",
          "parameters": [
            "event"
          ],
          "line": 2155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskColor",
          "type": "arrow",
          "parameters": [
            "risk"
          ],
          "line": 2345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskIcon",
          "type": "arrow",
          "parameters": [
            "risk"
          ],
          "line": 2355,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSelectedCount",
          "type": "arrow",
          "parameters": [
            "categoryId"
          ],
          "line": 2365,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "PasoBaseLegal",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "setRatData }"
          ],
          "line": 2590,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleChange",
          "type": "arrow",
          "parameters": [
            "event"
          ],
          "line": 2591,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "PasoFinalidad",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "setRatData }"
          ],
          "line": 2931,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "PasoTransferencias",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "setRatData }"
          ],
          "line": 3218,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleDestinatarioChange",
          "type": "arrow",
          "parameters": [
            "area"
          ],
          "line": 3222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "PasoRevision",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "guardarRAT }"
          ],
          "line": 3564,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "RATViewComponent",
          "type": "arrow",
          "parameters": [
            "{ ratData }"
          ],
          "line": 3664,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tieneAlgunDato"
          ],
          "line": 345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 351,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "resultado.success"
          ],
          "line": 352,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 367,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 368,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 381,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentTenant"
          ],
          "line": 394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosYaIngresados"
          ],
          "line": 400,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosGuardados.success && datosGuardados.datos"
          ],
          "line": 411,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 413,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 445,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 454,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 456,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 480,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && ultimoRAT"
          ],
          "line": 485,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 558,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!datosYaIngresados"
          ],
          "line": 561,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "result.success && Array.isArray(result.data)"
          ],
          "line": 581,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 586,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 595,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 616,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentStep < steps.length - 1"
          ],
          "line": 623,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentStep > 0"
          ],
          "line": 629,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 667,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratToEdit"
          ],
          "line": 695,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.categoriasDatos"
          ],
          "line": 708,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categoriasDatos.identificacion)"
          ],
          "line": 709,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categoriasDatos.sensibles)"
          ],
          "line": 712,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.categorias_datos"
          ],
          "line": 718,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categorias_datos.identificacion)"
          ],
          "line": 719,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categorias_datos.sensibles)"
          ],
          "line": 722,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.categorias"
          ],
          "line": 728,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categorias.identificacion)"
          ],
          "line": 729,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categorias.sensibles)"
          ],
          "line": 732,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.datos_identificacion && Array.isArray(rat.datos_identificacion)"
          ],
          "line": 738,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.datos_sensibles && Array.isArray(rat.datos_sensibles)"
          ],
          "line": 741,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 781,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratToView"
          ],
          "line": 790,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 795,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "window.confirm('¿Está seguro de eliminar este RAT? Esta acción no se puede deshacer.')"
          ],
          "line": 802,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "result.success && Array.isArray(result.data)"
          ],
          "line": 807,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 813,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 823,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 853,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable?.nombre || ratData.responsable.nombre.trim().length === 0"
          ],
          "line": 867,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable?.email || ratData.responsable.email.trim().length === 0"
          ],
          "line": 873,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable?.razonSocial || ratData.responsable.razonSocial.trim().length === 0"
          ],
          "line": 879,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable?.rut || ratData.responsable.rut.trim().length === 0"
          ],
          "line": 885,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.nombreActividad || ratData.nombreActividad.trim().length === 0"
          ],
          "line": 892,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.finalidad || ratData.finalidad.trim().length === 0"
          ],
          "line": 898,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.baseLegal || ratData.baseLegal.trim().length === 0"
          ],
          "line": 904,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tieneCategorias"
          ],
          "line": 915,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tenant || !tenant.id"
          ],
          "line": 922,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!validacionResult.valido"
          ],
          "line": 942,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 944,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 969,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.baseLegal === 'interes_legitimo'"
          ],
          "line": 1033,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!testBalancing.resultado || testBalancing.resultado === 'DESFAVORABLE'"
          ],
          "line": 1038,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "casuisticasEspecificas.requiere_atencion_especial"
          ],
          "line": 1046,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "viewMode === 'edit'"
          ],
          "line": 1053,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "resultado && resultado.id"
          ],
          "line": 1059,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "viewMode !== 'edit' && ratData.categorias?.sensibles?.length > 0"
          ],
          "line": 1063,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const subcategoria of ratData.categorias.sensibles"
          ],
          "line": 1070,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 1074,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratCompleto.metadata.requiereEIPD || ratCompleto.metadata.requiereDPIA"
          ],
          "line": 1081,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!eipdError && eipdGuardado"
          ],
          "line": 1125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 1208,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 1210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "showEmpresaManager"
          ],
          "line": 1238,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "viewMode === 'view'"
          ],
          "line": 1263,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "viewMode === 'list' || (!isCreatingRAT && showRATList)"
          ],
          "line": 1287,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = cuerpo.length - 1; i >= 0; i--"
          ],
          "line": 1826,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rut.length > 8"
          ],
          "line": 1845,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!validarRUT(rut)"
          ],
          "line": 1846,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "duplicado"
          ],
          "line": 1854,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "event.target.checked"
          ],
          "line": 2131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 2150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "event.target.checked"
          ],
          "line": 2161,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentTenant?.id"
          ],
          "line": 2172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "analisis.alertas?.length > 0"
          ],
          "line": 2177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 2193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isArray",
          "type": "method",
          "parameters": [
            "ratData.categorias.sensibles)"
          ],
          "line": 2201,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "risk"
          ],
          "line": 2346,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "risk"
          ],
          "line": 2356,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoryId === 'sensibles'"
          ],
          "line": 2366,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "value"
          ],
          "line": 2595,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/ReportGenerator.js": [
        {
          "name": "ReportGenerator",
          "type": "arrow",
          "parameters": [],
          "line": 48,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarCSVConsolidado",
          "type": "arrow",
          "parameters": [
            "reportData"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "reportConfig.incluirAuditoria"
          ],
          "line": 137,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "formato === 'pdf'"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "formato === 'excel'"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 185,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 278,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.categorias_datos"
          ],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(categorias)"
          ],
          "line": 344,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "e"
          ],
          "line": 353,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.transferencias_internacionales"
          ],
          "line": 364,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(transferencias)"
          ],
          "line": 370,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "e"
          ],
          "line": 379,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/VideoAnimado.js": [
        {
          "name": "handlePlayPause",
          "type": "arrow",
          "parameters": [],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleMuteToggle",
          "type": "arrow",
          "parameters": [],
          "line": 56,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleFrameClick",
          "type": "arrow",
          "parameters": [
            "frameIndex"
          ],
          "line": 60,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isPlaying && frames.length > 0"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "next === 0 && !loop"
          ],
          "line": 40,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!frames || frames.length === 0"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/__tests__/AdminDashboard.test.js": [
        {
          "name": "TestWrapper",
          "type": "arrow",
          "parameters": [
            "{ children }"
          ],
          "line": 13,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/admin/AdminPanel.js": [
        {
          "name": "TabPanel",
          "type": "declaration",
          "parameters": [
            "{ children",
            "value",
            "index",
            "...other }"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "a11yProps",
          "type": "declaration",
          "parameters": [
            "index"
          ],
          "line": 51,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "AdminPanel",
          "type": "declaration",
          "parameters": [],
          "line": 58,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleTabChange",
          "type": "arrow",
          "parameters": [
            "event",
            "newValue"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSystemStatusColor",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 67,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSystemStatusText",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 76,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "TabPanel",
          "type": "method",
          "parameters": [
            "{ children",
            "value",
            "index",
            "...other }"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "a11yProps",
          "type": "method",
          "parameters": [
            "index"
          ],
          "line": 51,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "AdminPanel",
          "type": "method",
          "parameters": [],
          "line": 58,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status"
          ],
          "line": 77,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/admin/IAAgentStatusPage.js": [
        {
          "name": "IAAgentStatusPage",
          "type": "arrow",
          "parameters": [],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusColor",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 126,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusIcon",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!authLoading && user"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!authLoading && !user"
          ],
          "line": 57,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isAdmin"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!user"
          ],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "userProfile"
          ],
          "line": 94,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "dbError"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 107,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status?.toLowerCase()"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status?.toLowerCase()"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "authChecking"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!isAdmin"
          ],
          "line": 163,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading && !report"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/admin/UsageDashboard.js": [
        {
          "name": "UsageDashboard",
          "type": "arrow",
          "parameters": [],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getUtilizationColor",
          "type": "arrow",
          "parameters": [
            "percentage"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getUtilizationLabel",
          "type": "arrow",
          "parameters": [
            "percentage"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTotalStats",
          "type": "arrow",
          "parameters": [],
          "line": 100,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "usageError || limitsError"
          ],
          "line": 54,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/admin/UserManagement.js": [
        {
          "name": "UserManagement",
          "type": "declaration",
          "parameters": [],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "UserManagement",
          "type": "method",
          "parameters": [],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 57,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 62,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 79,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/components/auth/Login.js": [
        {
          "name": "Login",
          "type": "arrow",
          "parameters": [],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleInputChange",
          "type": "arrow",
          "parameters": [
            "e"
          ],
          "line": 31,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!formData.email || !formData.password"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "err"
          ],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/config/industries.config.js": [
        {
          "name": "getIndustryById",
          "type": "arrow",
          "parameters": [
            "id"
          ],
          "line": 108,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getIndustryRegulations",
          "type": "arrow",
          "parameters": [
            "industryId"
          ],
          "line": 112,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getIndustryRiskLevel",
          "type": "arrow",
          "parameters": [
            "industryId"
          ],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getIndustryRetention",
          "type": "arrow",
          "parameters": [
            "industryId"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "requiresEIPD",
          "type": "arrow",
          "parameters": [
            "industryId"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/config/supabaseClient.js": [
        {
          "name": "supabaseWithTenant",
          "type": "arrow",
          "parameters": [
            "tenantId"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!supabaseUrl || !supabaseKey"
          ],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!supabaseUrl.includes('supabase.co')"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!supabaseKey.startsWith('eyJ') && !supabaseKey.startsWith('sb_publishable_')"
          ],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "user?.id"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && session"
          ],
          "line": 73,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/config.js": [],
      "/frontend/src/constants/estados.js": [
        {
          "name": "getRAT_EstadoLabel",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 80,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRAT_EstadoColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isRAT_EstadoValido",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 89,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "canRAT_TransitionTo",
          "type": "arrow",
          "parameters": [
            "estadoActual",
            "estadoDestino"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/contexts/AuthContext.js": [
        {
          "name": "useAuth",
          "type": "arrow",
          "parameters": [],
          "line": 9,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "AuthProvider",
          "type": "arrow",
          "parameters": [
            "{ children }"
          ],
          "line": 17,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "updateUser",
          "type": "arrow",
          "parameters": [
            "userData"
          ],
          "line": 163,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isAuthenticated",
          "type": "arrow",
          "parameters": [],
          "line": 167,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasPermission",
          "type": "arrow",
          "parameters": [
            "permission"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isRestricted",
          "type": "arrow",
          "parameters": [],
          "line": 177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!context"
          ],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "session?.user"
          ],
          "line": 31,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "session?.user"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/contexts/TenantContext.js": [
        {
          "name": "useTenant",
          "type": "arrow",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "TenantProvider",
          "type": "arrow",
          "parameters": [
            "{ children }"
          ],
          "line": 19,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!context"
          ],
          "line": 13,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!isAuthenticated || !user"
          ],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!data || data.length === 0"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 56,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!user?.id"
          ],
          "line": 67,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isAuthenticated && user"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tenants && tenants.length > 0"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "savedTenantResult.success && savedTenantResult.data"
          ],
          "line": 120,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!selectedTenant"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!isAuthenticated && user?.id"
          ],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "savedTenantResult.success && savedTenantResult.data"
          ],
          "line": 150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 211,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 228,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentTenant?.id === tenantId"
          ],
          "line": 239,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 247,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentTenant?.id === tenantId"
          ],
          "line": 271,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filteredTenants.length > 0"
          ],
          "line": 272,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "defaultOrg"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 290,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "user?.id"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 307,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/debug_rat_id.js": [
        {
          "name": "testRatIdColumns",
          "type": "declaration",
          "parameters": [],
          "line": 6,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "testRatIdColumns",
          "type": "method",
          "parameters": [],
          "line": 6,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of tablesToTest"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 29,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.code === '42P01'"
          ],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.code === '42703'"
          ],
          "line": 32,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "err"
          ],
          "line": 42,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 59,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "err"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/hooks/useDataSync.js": [
        {
          "name": "useDataSync",
          "type": "arrow",
          "parameters": [
            "moduleName"
          ],
          "line": 6,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "useConsistentCounts",
          "type": "arrow",
          "parameters": [],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "changeType"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/index.js": [],
      "/frontend/src/pages/AdminDashboard.js": [
        {
          "name": "AdminDashboard",
          "type": "arrow",
          "parameters": [],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTenantsTab",
          "type": "arrow",
          "parameters": [],
          "line": 288,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderUsersTab",
          "type": "arrow",
          "parameters": [],
          "line": 394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderAuditTab",
          "type": "arrow",
          "parameters": [],
          "line": 506,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 145,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 162,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 187,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 227,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 252,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 282,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTenantsTab",
          "type": "component",
          "parameters": [],
          "line": 288,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderUsersTab",
          "type": "component",
          "parameters": [],
          "line": 394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderAuditTab",
          "type": "component",
          "parameters": [],
          "line": 506,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/pages/AdminPanel.js": [
        {
          "name": "AdminPanel",
          "type": "arrow",
          "parameters": [],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "resetFormOrg",
          "type": "arrow",
          "parameters": [],
          "line": 275,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "resetFormUser",
          "type": "arrow",
          "parameters": [],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "mostrarMensaje",
          "type": "arrow",
          "parameters": [
            "message",
            "severity"
          ],
          "line": 391,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getPlanChip",
          "type": "arrow",
          "parameters": [
            "plan"
          ],
          "line": 395,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRolChip",
          "type": "arrow",
          "parameters": [
            "rol"
          ],
          "line": 405,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "Dashboard",
          "type": "arrow",
          "parameters": [],
          "line": 416,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "OrganizacionesTab",
          "type": "arrow",
          "parameters": [],
          "line": 590,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "UsuariosTab",
          "type": "arrow",
          "parameters": [],
          "line": 712,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ConfiguracionTab",
          "type": "arrow",
          "parameters": [],
          "line": 830,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "NotificationSnackbar",
          "type": "arrow",
          "parameters": [
            "{ open",
            "autoHideDuration",
            "onClose",
            "children }"
          ],
          "line": 1331,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "orgActual.id"
          ],
          "line": 248,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 258,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 269,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!userActual.id && userActual.password !== userActual.confirmar_password"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "userActual.id"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 322,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 333,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 343,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 370,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 382,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "Dashboard",
          "type": "component",
          "parameters": [],
          "line": 416,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "OrganizacionesTab",
          "type": "component",
          "parameters": [],
          "line": 590,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "UsuariosTab",
          "type": "component",
          "parameters": [],
          "line": 712,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ConfiguracionTab",
          "type": "component",
          "parameters": [],
          "line": 830,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/pages/DPIAAlgoritmos.js": [
        {
          "name": "DPIAAlgoritmos",
          "type": "arrow",
          "parameters": [],
          "line": 42,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "preLlenarDesdeRAT",
          "type": "arrow",
          "parameters": [],
          "line": 74,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "cargarDPIA",
          "type": "arrow",
          "parameters": [],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleInputChange",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularProgreso",
          "type": "arrow",
          "parameters": [],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "enviarParaRevision",
          "type": "arrow",
          "parameters": [],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "esNuevo && ratId"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "documentoId"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dpiaData.progreso < 100"
          ],
          "line": 156,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/pages/DPOApprovalQueue.js": [
        {
          "name": "DPOApprovalQueue",
          "type": "arrow",
          "parameters": [],
          "line": 56,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculatePriority",
          "type": "arrow",
          "parameters": [
            "rat",
            "analysis",
            "daysSinceCreation"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "ratsData"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getPriorityChip",
          "type": "arrow",
          "parameters": [
            "priority"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskChip",
          "type": "arrow",
          "parameters": [
            "riskLevel"
          ],
          "line": 224,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTimeChip",
          "type": "arrow",
          "parameters": [
            "days"
          ],
          "line": 235,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "filtrarRATs",
          "type": "arrow",
          "parameters": [],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 126,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/pages/Dashboard.js": [
        {
          "name": "Dashboard",
          "type": "declaration",
          "parameters": [],
          "line": 23,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "Dashboard",
          "type": "method",
          "parameters": [],
          "line": 23,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/pages/DashboardDPO.js": [
        {
          "name": "DashboardDPO",
          "type": "arrow",
          "parameters": [],
          "line": 19,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/pages/EIPDCreator.js": [
        {
          "name": "EIPDCreator",
          "type": "arrow",
          "parameters": [],
          "line": 59,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluarNecesidadEIPD",
          "type": "arrow",
          "parameters": [],
          "line": 184,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularNivelRiesgo",
          "type": "arrow",
          "parameters": [],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStepContent",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 253,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderInformacionGeneral",
          "type": "arrow",
          "parameters": [],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderCriteriosNecesidad",
          "type": "arrow",
          "parameters": [],
          "line": 339,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDescripcionSistematica",
          "type": "arrow",
          "parameters": [],
          "line": 522,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderEvaluacionRiesgos",
          "type": "arrow",
          "parameters": [],
          "line": 610,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderNecesidadProporcionalidad",
          "type": "arrow",
          "parameters": [],
          "line": 750,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderMedidasMitigacion",
          "type": "arrow",
          "parameters": [],
          "line": 811,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderConclusiones",
          "type": "arrow",
          "parameters": [],
          "line": 928,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTextFieldStyles",
          "type": "arrow",
          "parameters": [],
          "line": 1031,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratId"
          ],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratId"
          ],
          "line": 234,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 245,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 254,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 1118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderInformacionGeneral",
          "type": "component",
          "parameters": [],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderCriteriosNecesidad",
          "type": "component",
          "parameters": [],
          "line": 339,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDescripcionSistematica",
          "type": "component",
          "parameters": [],
          "line": 522,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderEvaluacionRiesgos",
          "type": "component",
          "parameters": [],
          "line": 610,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderNecesidadProporcionalidad",
          "type": "component",
          "parameters": [],
          "line": 750,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderMedidasMitigacion",
          "type": "component",
          "parameters": [],
          "line": 811,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderConclusiones",
          "type": "component",
          "parameters": [],
          "line": 928,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTextFieldStyles",
          "type": "component",
          "parameters": [],
          "line": 1031,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/pages/EIPDListPage.js": [
        {
          "name": "EIPDListPage",
          "type": "arrow",
          "parameters": [],
          "line": 36,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "eipdData"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskColor",
          "type": "arrow",
          "parameters": [
            "riesgo"
          ],
          "line": 114,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "descargarEIPD",
          "type": "arrow",
          "parameters": [
            "eipd"
          ],
          "line": 132,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 96,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "riesgo"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "estado"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/pages/GestionAsociaciones.js": [
        {
          "name": "GestionAsociaciones",
          "type": "arrow",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/pages/GlosarioLPDP.js": [
        {
          "name": "GlosarioLPDP",
          "type": "arrow",
          "parameters": [],
          "line": 81,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleExpandTerm",
          "type": "arrow",
          "parameters": [
            "key"
          ],
          "line": 1874,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "copyToClipboard",
          "type": "arrow",
          "parameters": [
            "text"
          ],
          "line": 1878,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!termino || typeof termino !== 'object' || !termino.termino || !termino.definicion"
          ],
          "line": 1835,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!termino.categoria || !categorias[termino.categoria]"
          ],
          "line": 1857,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "selectedCategory === 'criticos'"
          ],
          "line": 1863,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "selectedCategory === 'novedades_chile'"
          ],
          "line": 1866,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/pages/ModuloCero_SAFE.js": [
        {
          "name": "ModuloCero",
          "type": "declaration",
          "parameters": [],
          "line": 6,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ModuloCero",
          "type": "method",
          "parameters": [],
          "line": 6,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/pages/PaletaColores.js": [
        {
          "name": "PaletaColores",
          "type": "arrow",
          "parameters": [],
          "line": 67,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/pages/ProcesoCompleto.js": [
        {
          "name": "ProcesoCompletoPage",
          "type": "arrow",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/pages/ProviderManager.js": [
        {
          "name": "ProviderManager",
          "type": "arrow",
          "parameters": [],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "providersData"
          ],
          "line": 216,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskChip",
          "type": "arrow",
          "parameters": [
            "riskLevel"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusChip",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 273,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getContractStatusChip",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "filtrarProveedores",
          "type": "arrow",
          "parameters": [],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderProveedoresTab",
          "type": "arrow",
          "parameters": [],
          "line": 308,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderContratosTab",
          "type": "arrow",
          "parameters": [],
          "line": 453,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTransferenciasTab",
          "type": "arrow",
          "parameters": [],
          "line": 523,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluarRiesgoProveedor",
          "type": "arrow",
          "parameters": [
            "provider"
          ],
          "line": 599,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 159,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 209,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderProveedoresTab",
          "type": "component",
          "parameters": [],
          "line": 308,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderContratosTab",
          "type": "component",
          "parameters": [],
          "line": 453,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderTransferenciasTab",
          "type": "component",
          "parameters": [],
          "line": 523,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/pages/RATEditPage.js": [
        {
          "name": "RATEditPage",
          "type": "arrow",
          "parameters": [],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusChip",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 290,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderStepContent",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 309,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderResponsableStep",
          "type": "arrow",
          "parameters": [],
          "line": 328,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderCategoriasDatosStep",
          "type": "arrow",
          "parameters": [],
          "line": 417,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderBaseJuridicaStep",
          "type": "arrow",
          "parameters": [],
          "line": 463,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderFinalidadStep",
          "type": "arrow",
          "parameters": [],
          "line": 499,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDestinatariosStep",
          "type": "arrow",
          "parameters": [],
          "line": 530,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderConfirmacionStep",
          "type": "arrow",
          "parameters": [],
          "line": 588,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTextFieldStyles",
          "type": "arrow",
          "parameters": [],
          "line": 709,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratExistente"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 145,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "JSON.stringify(ratData) === JSON.stringify(originalRATData)"
          ],
          "line": 158,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 249,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "analysisResults?.riskLevel === 'ALTO'"
          ],
          "line": 268,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 721,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderResponsableStep",
          "type": "component",
          "parameters": [],
          "line": 328,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderCategoriasDatosStep",
          "type": "component",
          "parameters": [],
          "line": 417,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderBaseJuridicaStep",
          "type": "component",
          "parameters": [],
          "line": 463,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderFinalidadStep",
          "type": "component",
          "parameters": [],
          "line": 499,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderDestinatariosStep",
          "type": "component",
          "parameters": [],
          "line": 530,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "renderConfirmacionStep",
          "type": "component",
          "parameters": [],
          "line": 588,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTextFieldStyles",
          "type": "component",
          "parameters": [],
          "line": 709,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/pages/RATListPage.js": [
        {
          "name": "RATListPage",
          "type": "arrow",
          "parameters": [],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "ratsData"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusChip",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRiskChip",
          "type": "arrow",
          "parameters": [
            "riskLevel"
          ],
          "line": 160,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "filtrarRATs",
          "type": "arrow",
          "parameters": [],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleEditRAT",
          "type": "arrow",
          "parameters": [
            "ratId"
          ],
          "line": 188,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "handleViewRAT",
          "type": "arrow",
          "parameters": [
            "ratId"
          ],
          "line": 192,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rats.length > 0"
          ],
          "line": 81,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "child",
          "type": "method",
          "parameters": [
            "even"
          ],
          "line": 325,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 483,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 521,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/pages/SistemaPrincipal.js": [
        {
          "name": "SistemaPrincipal",
          "type": "arrow",
          "parameters": [],
          "line": 34,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/sdk/LPDPHubSDK.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "config = {}"
          ],
          "line": 8,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.apiKey"
          ],
          "line": 17,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.debug"
          ],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluateRAT",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 39,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "response.data.automation_triggers.length > 0"
          ],
          "line": 48,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 54,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getDashboard",
          "type": "method",
          "parameters": [
            "filters = {}"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 73,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "generateEIPD",
          "type": "method",
          "parameters": [
            "ratId",
            "options = {}"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 108,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "generateDPA",
          "type": "method",
          "parameters": [
            "ratId",
            "providerInfo",
            "options = {}"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "registerWebhook",
          "type": "method",
          "parameters": [
            "webhookUrl",
            "events = []",
            "secret = null"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getRegulatoryUpdates",
          "type": "method",
          "parameters": [
            "since = null"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "batchEvaluateRATs",
          "type": "method",
          "parameters": [
            "ratsData",
            "options = {}"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const batch of batches"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "batches.indexOf(batch) < batches.length - 1"
          ],
          "line": 220,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "healthCheck",
          "type": "method",
          "parameters": [],
          "line": 242,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "on",
          "type": "method",
          "parameters": [
            "event",
            "callback"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.eventListeners.has(event)"
          ],
          "line": 271,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "emit",
          "type": "method",
          "parameters": [
            "event",
            "data"
          ],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.eventListeners.has(event)"
          ],
          "line": 281,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "makeRequest",
          "type": "method",
          "parameters": [
            "method",
            "endpoint",
            "data = null"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data && (method === 'POST' || method === 'PUT')"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let attempt = 1; attempt <= this.retryAttempts; attempt++"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!response.success"
          ],
          "line": 317,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 323,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "attempt < this.retryAttempts && this.isRetryableError(error)"
          ],
          "line": 326,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "simulateHTTPCall",
          "type": "method",
          "parameters": [
            "method",
            "endpoint",
            "data"
          ],
          "line": 340,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "`${method} ${endpoint}`"
          ],
          "line": 348,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "normalizeRATData",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 380,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "normalizeProviderInfo",
          "type": "method",
          "parameters": [
            "providerInfo"
          ],
          "line": 393,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "buildQueryParams",
          "type": "method",
          "parameters": [
            "filters"
          ],
          "line": 403,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value !== undefined && value !== null"
          ],
          "line": 406,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "chunkArray",
          "type": "method",
          "parameters": [
            "array",
            "size"
          ],
          "line": 413,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < array.length; i += size"
          ],
          "line": 415,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isRetryableError",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 421,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateSecret",
          "type": "method",
          "parameters": [],
          "line": 426,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "sleep",
          "type": "method",
          "parameters": [
            "ms"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "log",
          "type": "method",
          "parameters": [
            "...args"
          ],
          "line": 434,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.debug"
          ],
          "line": 435,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logError",
          "type": "method",
          "parameters": [
            "...args"
          ],
          "line": 440,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 448,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isHighRisk",
          "type": "method",
          "parameters": [],
          "line": 459,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "requiresEIPD",
          "type": "method",
          "parameters": [],
          "line": 463,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "requiresDPA",
          "type": "method",
          "parameters": [],
          "line": 467,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getComplianceScore",
          "type": "method",
          "parameters": [],
          "line": 471,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 477,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getHealthStatus",
          "type": "method",
          "parameters": [],
          "line": 485,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTotalActivities",
          "type": "method",
          "parameters": [],
          "line": 489,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getAverageScore",
          "type": "method",
          "parameters": [],
          "line": 493,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 499,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isComplete",
          "type": "method",
          "parameters": [],
          "line": 508,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getNextRequiredAction",
          "type": "method",
          "parameters": [],
          "line": 512,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 518,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isReadyForSigning",
          "type": "method",
          "parameters": [],
          "line": 529,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRequiredActions",
          "type": "method",
          "parameters": [],
          "line": 533,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 539,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 548,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isHighImpact",
          "type": "method",
          "parameters": [],
          "line": 559,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "code",
            "message",
            "originalError = null"
          ],
          "line": 566,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/services/api.js": [
        {
          "name": "getInventario",
          "type": "method",
          "parameters": [],
          "line": 13,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 23,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "createItem",
          "type": "method",
          "parameters": [
            "item"
          ],
          "line": 29,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 40,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getUsuarios",
          "type": "method",
          "parameters": [],
          "line": 49,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 59,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getRoles",
          "type": "method",
          "parameters": [],
          "line": 65,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "getOrganizaciones",
          "type": "method",
          "parameters": [],
          "line": 76,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 80,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getDashboard",
          "type": "method",
          "parameters": [],
          "line": 85,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getConfiguracion",
          "type": "method",
          "parameters": [],
          "line": 97,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "getLogs",
          "type": "method",
          "parameters": [],
          "line": 101,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 105,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "actualizarOrganizacion",
          "type": "method",
          "parameters": [
            "id",
            "data"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearOrganizacion",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 114,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "desactivarOrganizacion",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "actualizarUsuario",
          "type": "method",
          "parameters": [
            "id",
            "data"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearUsuario",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 126,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "desactivarUsuario",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "resetPassword",
          "type": "method",
          "parameters": [
            "userId"
          ],
          "line": 134,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "actualizarConfiguracion",
          "type": "method",
          "parameters": [
            "config"
          ],
          "line": 138,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearRespaldo",
          "type": "method",
          "parameters": [],
          "line": 142,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getOrganizaciones",
          "type": "method",
          "parameters": [],
          "line": 152,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getUsuarios",
          "type": "method",
          "parameters": [],
          "line": 189,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getDashboard",
          "type": "method",
          "parameters": [],
          "line": 205,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getConfiguracion",
          "type": "method",
          "parameters": [],
          "line": 218,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getLogs",
          "type": "method",
          "parameters": [
            "filtros = {}"
          ],
          "line": 236,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "actualizarOrganizacion",
          "type": "method",
          "parameters": [
            "id",
            "data"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearOrganizacion",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 261,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "desactivarOrganizacion",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 266,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "actualizarUsuario",
          "type": "method",
          "parameters": [
            "id",
            "data"
          ],
          "line": 271,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearUsuario",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 276,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "desactivarUsuario",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 281,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "resetPassword",
          "type": "method",
          "parameters": [
            "userId"
          ],
          "line": 286,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "actualizarConfiguracion",
          "type": "method",
          "parameters": [
            "config"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearRespaldo",
          "type": "method",
          "parameters": [],
          "line": 299,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        }
      ],
      "/frontend/src/services/categoryAnalysisEngine.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analizarCategoriaSeleccionada",
          "type": "method",
          "parameters": [
            "categoria",
            "subcategoria",
            "ratData",
            "tenantId"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "categoria"
          ],
          "line": 116,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.id"
          ],
          "line": 138,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 146,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analizarDatosSalud",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "resultado"
          ],
          "line": 158,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!esAutorizado"
          ],
          "line": 161,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.base_licitud === 'interes_legitimo'"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analizarDatosBiometricos",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "resultado"
          ],
          "line": 197,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!necesidadJustificada"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.base_licitud !== 'consentimiento'"
          ],
          "line": 209,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analizarMenores14",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "resultado"
          ],
          "line": 239,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.base_licitud !== 'consentimiento'"
          ],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analizarGeolocalizacion",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "resultado"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadValidacion.restricciones"
          ],
          "line": 287,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.transferencias_internacionales?.length > 0 && precision === 'gps_exacto'"
          ],
          "line": 292,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "guardarAnalisisCategoria",
          "type": "method",
          "parameters": [
            "resultado",
            "ratId",
            "tenantId"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratId || ratId === 'undefined'"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "verificarProfesionalSalud",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 356,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tenantId || tenantId === 'undefined'"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 372,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluarNecesidadBiometricos",
          "type": "method",
          "parameters": [
            "finalidad"
          ],
          "line": 378,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "determinarPrecisionGeo",
          "type": "method",
          "parameters": [
            "descripcion"
          ],
          "line": 388,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "desc.includes('gps') || desc.includes('coordenadas exactas')"
          ],
          "line": 391,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "desc.includes('ciudad') || desc.includes('región')"
          ],
          "line": 394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "desc.includes('país')"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validarFinalidadGeo",
          "type": "method",
          "parameters": [
            "finalidad"
          ],
          "line": 403,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('seguridad')"
          ],
          "line": 406,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('marketing')"
          ],
          "line": 409,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('estadístico')"
          ],
          "line": 415,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('tracking') || finalidadLower.includes('seguimiento')"
          ],
          "line": 421,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/services/dataSync.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 5,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getMasterData",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 13,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.cache.has(cacheKey)"
          ],
          "line": 18,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Date.now() - cached.timestamp < 30000"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "subscribe",
          "type": "method",
          "parameters": [
            "componentName",
            "tenantId",
            "callback"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "notifySubscribers",
          "type": "method",
          "parameters": [
            "tenantId",
            "masterData"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "key.includes(tenantId)"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 132,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "invalidateAndRefresh",
          "type": "method",
          "parameters": [
            "tenantId",
            "changeType = 'general'"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "onRATCreated",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 156,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "onRATUpdated",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 161,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "onEIPDGenerated",
          "type": "method",
          "parameters": [
            "eipdData",
            "tenantId"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "onDPOTaskCreated",
          "type": "method",
          "parameters": [
            "taskData",
            "tenantId"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "startAutoSync",
          "type": "method",
          "parameters": [
            "tenantId",
            "intervalMs = 60000"
          ],
          "line": 177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.syncInterval"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 185,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "stopAutoSync",
          "type": "method",
          "parameters": [],
          "line": 193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.syncInterval"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getDataForModule",
          "type": "method",
          "parameters": [
            "moduleName",
            "tenantId"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "moduleName"
          ],
          "line": 205,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/services/industryStandardsService.js": [
        {
          "name": "obtenerInformacionSectorial",
          "type": "declaration",
          "parameters": [
            "industria",
            "incluirFundamentos = true"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarReporteFundamentos",
          "type": "declaration",
          "parameters": [
            "industrias = null"
          ],
          "line": 340,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "obtenerInformacionSectorial",
          "type": "method",
          "parameters": [
            "industria",
            "incluirFundamentos = true"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!info"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "incluirFundamentos"
          ],
          "line": 322,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarReporteFundamentos",
          "type": "method",
          "parameters": [
            "industrias = null"
          ],
          "line": 340,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/services/partnerSyncEngine.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 12,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analizarClientePartner",
          "type": "method",
          "parameters": [
            "partnerData"
          ],
          "line": 17,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!partnerValido"
          ],
          "line": 23,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 50,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ejecutarAnalisisIA",
          "type": "method",
          "parameters": [
            "clienteData"
          ],
          "line": 60,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "mapearCategoriasPartner",
          "type": "method",
          "parameters": [
            "categoriasPartner"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const categoria of categoriasPartner"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "categoria"
          ],
          "line": 107,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "determinarDocumentosObligatorios",
          "type": "method",
          "parameters": [
            "riesgoCalculado",
            "tratamiento"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "riesgoCalculado.clasificacion?.requiere_eipd"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tratamiento.decisiones_automatizadas"
          ],
          "line": 141,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarAlertasCriticas",
          "type": "method",
          "parameters": [
            "tratamiento",
            "riesgoCalculado"
          ],
          "line": 156,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tratamiento.destinos_transferencia?.some(d => d.includes('Estados Unidos'))"
          ],
          "line": 159,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tratamiento.decisiones_automatizadas"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "enviarWebhookRATCompletado",
          "type": "method",
          "parameters": [
            "ratId",
            "partnerIds = []"
          ],
          "line": 181,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const partnerId of partnerIds"
          ],
          "line": 203,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 215,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "obtenerDatosCompletosRAT",
          "type": "method",
          "parameters": [
            "ratId"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "generarUUID",
          "type": "method",
          "parameters": [],
          "line": 278,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "replace",
          "type": "method",
          "parameters": [
            "/[xy]/g",
            "function(c"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarSignatureHMAC",
          "type": "method",
          "parameters": [
            "datos"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarHashIntegridad",
          "type": "method",
          "parameters": [
            "documento"
          ],
          "line": 290,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "determinarEtapasCompletadas",
          "type": "method",
          "parameters": [
            "actividades"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "actividades?.some(a => a.tipo_actividad.includes('RAT'))"
          ],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "actividades?.some(a => a.tipo_actividad.includes('EIPD'))"
          ],
          "line": 300,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "actividades?.some(a => a.estado === ACTIVIDAD_DPO_ESTADOS.COMPLETADA)"
          ],
          "line": 303,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularScoreCompliance",
          "type": "method",
          "parameters": [
            "ratData",
            "documentos"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/services/proveedoresService.js": [
        {
          "name": "getCurrentTenant",
          "type": "method",
          "parameters": [],
          "line": 8,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data?.tenant_id"
          ],
          "line": 21,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 34,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getSupabaseClient",
          "type": "method",
          "parameters": [],
          "line": 41,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "createProveedor",
          "type": "method",
          "parameters": [
            "proveedorData"
          ],
          "line": 48,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 74,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getProveedores",
          "type": "method",
          "parameters": [],
          "line": 81,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && (!data || data.length === 0)"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const variant of tenantVariants"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "variant !== tenantId"
          ],
          "line": 105,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!variantResult.error && variantResult.data && variantResult.data.length > 0"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && (!data || data.length === 0)"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && data && data.length > 0"
          ],
          "line": 137,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "updateProveedor",
          "type": "method",
          "parameters": [
            "proveedorId",
            "updates"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "deleteProveedor",
          "type": "method",
          "parameters": [
            "proveedorId"
          ],
          "line": 187,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "createDPA",
          "type": "method",
          "parameters": [
            "proveedorId",
            "dpaData"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dpaError"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 252,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "createEvaluacionSeguridad",
          "type": "method",
          "parameters": [
            "proveedorId",
            "evaluacionData"
          ],
          "line": 259,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 296,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "asociarProveedorRAT",
          "type": "method",
          "parameters": [
            "proveedorId",
            "ratId"
          ],
          "line": 303,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 321,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 329,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getProveedoresByRAT",
          "type": "method",
          "parameters": [
            "ratId"
          ],
          "line": 336,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 350,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validarAislacionTenant",
          "type": "method",
          "parameters": [],
          "line": 365,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "otroTenant && otroTenant.length > 0"
          ],
          "line": 379,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tenantsUnicos.length > 1"
          ],
          "line": 392,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tenantsUnicos.length === 1 && tenantsUnicos[0] !== tenantId"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 405,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "calcularNivelRiesgo",
          "type": "method",
          "parameters": [
            "puntuacion"
          ],
          "line": 413,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getEstadisticasTenant",
          "type": "method",
          "parameters": [],
          "line": 420,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 444,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/services/ratIntelligenceEngine.js": [
        {
          "name": "createDPOActivities",
          "type": "method",
          "parameters": [
            "alerts",
            "ratId",
            "tenantId"
          ],
          "line": 11,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "authError"
          ],
          "line": 24,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!alerts || alerts.length === 0"
          ],
          "line": 34,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "fallbackError"
          ],
          "line": 89,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "function",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosSensiblesDetectados.length > 0"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.decisiones_automatizadas === true || ratData.decisiones_automatizadas === 'si'"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.destinatarios_externos?.length > 0"
          ],
          "line": 160,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "proveedoresInternacionales.length > 0"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "factoresRiesgo.length >= 2"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "detectArea",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "text",
            "keywords"
          ],
          "line": 288,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "detectSensitiveData",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 292,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['médic'",
            "'salud'",
            "'enfermedad'",
            "'diagnóstic'",
            "'tratamiento'])"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['socioeconómic'",
            "'económic'",
            "'scoring'",
            "'creditici'",
            "'ingresos'",
            "'renta'])"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['biométric'",
            "'huella'",
            "'facial'",
            "'iris'",
            "'reconocimiento'])"
          ],
          "line": 311,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['menor'",
            "'niño'",
            "'estudiante'",
            "'escolar'",
            "'adolescente'])"
          ],
          "line": 317,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['penal'",
            "'judicial'",
            "'antecedente'",
            "'criminal'",
            "'delito'])"
          ],
          "line": 323,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['racial'",
            "'étnico'",
            "'origen'",
            "'etnia'",
            "'raza'])"
          ],
          "line": 329,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['polític'",
            "'ideología'",
            "'partido'",
            "'voto'",
            "'elección'])"
          ],
          "line": 335,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['religios'",
            "'fe'",
            "'credo'",
            "'iglesia'",
            "'creencia'])"
          ],
          "line": 341,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['sexual'",
            "'orientación'",
            "'intimidad'",
            "'género'])"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluateRiskFactors",
          "type": "method",
          "parameters": [
            "ratData",
            "datosSensibles",
            "area"
          ],
          "line": 354,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosSensibles.length >= 2"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.volumen_datos === 'masivo' || parseInt(ratData.cantidad_titulares) > 10000"
          ],
          "line": 363,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.decisiones_automatizadas && datosSensibles.length > 0"
          ],
          "line": 368,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.destinatarios_externos?.length > 0 && datosSensibles.length > 0"
          ],
          "line": 373,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "['salud'",
            "'financiero'",
            "'educacion'",
            "'gobierno'].includes(area)"
          ],
          "line": 378,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "toLowerCase",
          "type": "method",
          "parameters": [
            ").includes('segment')"
          ],
          "line": 384,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "parseInt",
          "type": "method",
          "parameters": [
            "ratData.tiempo_retencion) > 5"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getIndustrySpecificAlerts",
          "type": "method",
          "parameters": [
            "area",
            "ratData",
            "checks"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "area"
          ],
          "line": 401,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checks.tienePacientes && !ratData.consentimiento_explicito"
          ],
          "line": 403,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checks.tieneMenores"
          ],
          "line": 422,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checks.evaluaCredito"
          ],
          "line": 441,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checks.tieneDatosPublicos"
          ],
          "line": 460,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeDataVolume",
          "type": "method",
          "parameters": [
            "ratData",
            "area"
          ],
          "line": 482,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "cantidad > 100000"
          ],
          "line": 488,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "cantidad > 10000"
          ],
          "line": 503,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeLegitimation",
          "type": "method",
          "parameters": [
            "ratData",
            "area"
          ],
          "line": 523,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.base_licitud || ratData.base_licitud === ''"
          ],
          "line": 527,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeRetention",
          "type": "method",
          "parameters": [
            "ratData",
            "area"
          ],
          "line": 547,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.tiempo_retencion || ratData.tiempo_retencion === 'indefinido'"
          ],
          "line": 551,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getIndustrySpecificChecks",
          "type": "method",
          "parameters": [
            "area",
            "ratData"
          ],
          "line": 573,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "area"
          ],
          "line": 576,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSectorDisplayName",
          "type": "method",
          "parameters": [
            "area"
          ],
          "line": 620,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSectorEmoji",
          "type": "method",
          "parameters": [
            "area"
          ],
          "line": 637,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isInternationalProvider",
          "type": "method",
          "parameters": [
            "nombre"
          ],
          "line": 642,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "function",
          "type": "method",
          "parameters": [
            "notificaciones"
          ],
          "line": 651,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        }
      ],
      "/frontend/src/services/ratService.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 12,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getRats",
          "type": "method",
          "parameters": [
            "options = {}"
          ],
          "line": 17,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "createRAT",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 43,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "updateRAT",
          "type": "method",
          "parameters": [
            "id",
            "ratData"
          ],
          "line": 50,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 61,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "deleteRAT",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 77,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getRATById",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 94,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "setCurrentTenant",
          "type": "method",
          "parameters": [
            "tenant",
            "userId"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!userId || !tenant"
          ],
          "line": 105,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getCurrentTenant",
          "type": "method",
          "parameters": [
            "userId"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!userId"
          ],
          "line": 138,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 149,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getCompletedRATs",
          "type": "method",
          "parameters": [],
          "line": 162,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/services/riskCalculationEngine.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularRiesgoTotal",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 90,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 132,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularPuntosCategorias",
          "type": "method",
          "parameters": [
            "categoriasDatos"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.identificacion"
          ],
          "line": 149,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.sensibles_art14"
          ],
          "line": 157,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.especiales"
          ],
          "line": 164,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.tecnicas"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularPuntosFinalidad",
          "type": "method",
          "parameters": [
            "finalidad"
          ],
          "line": 181,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('decisiones automáticas') || finalidadLower.includes('algoritmo')"
          ],
          "line": 186,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('perfilado') || finalidadLower.includes('segmentación')"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('comportamiento') || finalidadLower.includes('análisis usuario')"
          ],
          "line": 192,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('marketing') && finalidadLower.includes('dirigido')"
          ],
          "line": 195,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('marketing')"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('contrato') || finalidadLower.includes('comercial')"
          ],
          "line": 201,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('legal') || finalidadLower.includes('cumplimiento')"
          ],
          "line": 204,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularPuntosTransferencias",
          "type": "method",
          "parameters": [
            "transferencias",
            "tenantId"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const transferencia of transferencias"
          ],
          "line": 217,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!pais || pais === 'chile'"
          ],
          "line": 220,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "['alemania'",
            "'francia'",
            "'españa'",
            "'italia'",
            "'holanda'].includes(pais)"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "['reino unido'",
            "'suiza'",
            "'canadá'",
            "'japón'",
            "'argentina'].includes(pais)"
          ],
          "line": 224,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "pais === 'estados unidos'"
          ],
          "line": 226,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "['brasil'",
            "'méxico'].includes(pais)"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "verificarPrivacyShield",
          "type": "method",
          "parameters": [
            "proveedorId"
          ],
          "line": 243,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "calcularPuntosVolumen",
          "type": "method",
          "parameters": [
            "volumen"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularPuntosTecnologia",
          "type": "method",
          "parameters": [
            "tecnologia"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('decisiones automáticas') || tecLower.includes('algoritmo decisional')"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('deep learning') || tecLower.includes('neural')"
          ],
          "line": 282,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('machine learning') || tecLower.includes('ml')"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('inteligencia artificial') || tecLower.includes('ia')"
          ],
          "line": 288,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('automatización') || tecLower.includes('procesos automáticos')"
          ],
          "line": 291,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('base datos') || tecLower.includes('sql')"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('manual') || tecLower.includes('revisión humana')"
          ],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "clasificarRiesgo",
          "type": "method",
          "parameters": [
            "puntuacionTotal"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "puntuacionTotal <= 5"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "puntuacionTotal <= 12"
          ],
          "line": 319,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "puntuacionTotal <= 20"
          ],
          "line": 331,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "puntuacionTotal <= 30"
          ],
          "line": 344,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "aplicarAutoEfectos",
          "type": "method",
          "parameters": [
            "clasificacion",
            "ratData",
            "tenantId"
          ],
          "line": 374,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.nivel === 'ALTO' || clasificacion.nivel === 'CRITICO'"
          ],
          "line": 377,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.nivel === 'CRITICO'"
          ],
          "line": 391,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarEIPDAutomatica",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "clasificacion"
          ],
          "line": 404,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearActividadDPO",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "clasificacion"
          ],
          "line": 432,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearNotificacionDPO",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "clasificacion"
          ],
          "line": 457,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "generarDPIAAutomatica",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 479,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearAlertaSistema",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 500,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "generarMedidasMitigacion",
          "type": "method",
          "parameters": [
            "clasificacion"
          ],
          "line": 530,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.requiere_eipd"
          ],
          "line": 533,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.requiere_dpia"
          ],
          "line": 536,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.consulta_previa_agencia"
          ],
          "line": 539,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.medidas_excepcionales"
          ],
          "line": 542,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.monitoreo_continuo"
          ],
          "line": 545,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/services/specificCasesEngine.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "procesarCasuisticaEspecifica",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const casuistica of casuisticasDetectadas"
          ],
          "line": 116,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "detectarCasuisticas",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.contieneCategoria(ratData.categorias_datos",
            "'datos_geneticos')"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.esDecisionFinanciera(ratData)"
          ],
          "line": 149,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.esInvestigacionAcademica(ratData",
            "tenantId)"
          ],
          "line": 158,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "procesarCasuistica",
          "type": "method",
          "parameters": [
            "casuistica",
            "ratData",
            "tenantId"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "tipo"
          ],
          "line": 173,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "procesarCasoGeneticos",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "config"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!autorizacionISP"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [efecto",
            "valor] of Object.entries(config.auto_efectos)"
          ],
          "line": 210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "procesarCasoFinanciero",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "config"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!autorizacionCMF"
          ],
          "line": 233,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.decisiones_automatizadas"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [efecto",
            "valor] of Object.entries(config.auto_efectos_regulatorios)"
          ],
          "line": 251,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "procesarCasoAcademico",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "config"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!comiteEtica"
          ],
          "line": 271,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [efecto",
            "valor] of Object.entries(config.auto_efectos_academicos)"
          ],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "contieneCategoria",
          "type": "method",
          "parameters": [
            "categorias",
            "categoria"
          ],
          "line": 289,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "esDecisionFinanciera",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "esInvestigacionAcademica",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 308,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "aplicarAutoEfecto",
          "type": "method",
          "parameters": [
            "ratId",
            "tenantId",
            "efecto",
            "valor"
          ],
          "line": 331,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "efecto"
          ],
          "line": 333,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "valor"
          ],
          "line": 343,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "valor"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 363,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generarDocumentosGeneticos",
          "type": "method",
          "parameters": [
            "ratId",
            "tenantId"
          ],
          "line": 369,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const doc of tiposDocumentos"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 410,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "verificarAutorizacionISP",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 419,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "verificarAutorizacionCMF",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 434,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "verificarComiteEtica",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 449,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "programarAuditoriasPeriodicas",
          "type": "method",
          "parameters": [
            "ratId",
            "tenantId",
            "frecuencia"
          ],
          "line": 464,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 1; i <= 4; i++"
          ],
          "line": 473,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "obtenerContextoFinanciero",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 495,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 512,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "obtenerContextoAcademico",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 523,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 541,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/services/testBalancingEngine.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ejecutarTestBalancing",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 58,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluarInteresEmpresa",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 112,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('seguridad') || finalidad.includes('fraude')"
          ],
          "line": 120,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('mejorar') || finalidad.includes('optimizar')"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('marketing') || finalidad.includes('comercial')"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('investigación') || finalidad.includes('análisis')"
          ],
          "line": 132,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.descripcion && ratData.descripcion.length > 50"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tipoInteres === 'seguridad_empresa' || tipoInteres === 'cumplimiento_contractual'"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluarNecesidadTratamiento",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 164,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "totalCategorias <= 2"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "totalCategorias > 5"
          ],
          "line": 175,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "includes",
          "type": "method",
          "parameters": [
            "'alternativa disponible'))"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.length > 100 && finalidad.includes('específicamente')"
          ],
          "line": 193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.descripcion?.includes('imposible') || ratData.descripcion?.includes('imprescindible')"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluarImpactoDerechos",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriaEspecial"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calcularBalanzaFinal",
          "type": "method",
          "parameters": [
            "evaluacionInteres",
            "evaluacionNecesidad",
            "evaluacionImpacto"
          ],
          "line": 247,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "balance >= 3"
          ],
          "line": 255,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "balance >= 0"
          ],
          "line": 257,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "documentarResultado",
          "type": "method",
          "parameters": [
            "ratData",
            "evaluacionInteres",
            "evaluacionNecesidad",
            "evaluacionImpacto",
            "resultadoBalanza"
          ],
          "line": 276,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "aplicarEfectosBalancing",
          "type": "method",
          "parameters": [
            "resultadoBalanza",
            "ratData",
            "tenantId"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!resultadoBalanza.permitir_continuar"
          ],
          "line": 341,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "resultadoBalanza.requiere_medidas"
          ],
          "line": 362,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 383,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "determinarRelacionTitular",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "relacionExistente?.length > 0"
          ],
          "line": 401,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('empleado') || finalidad.includes('trabajador')"
          ],
          "line": 406,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('público') || finalidad.includes('gobierno')"
          ],
          "line": 409,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('comercial') || finalidad.includes('venta')"
          ],
          "line": 412,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "determinarNivelPrivacidad",
          "type": "method",
          "parameters": [
            "categoriasDatos"
          ],
          "line": 423,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.sensibles_art14 || categoriasDatos.biometricos || categoriasDatos.geneticos"
          ],
          "line": 427,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.financieros || categoriasDatos.salud || categoriasDatos.ubicacion"
          ],
          "line": 432,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.laborales || categoriasDatos.comerciales"
          ],
          "line": 437,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "determinarCategoriaEspecialTitular",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 446,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('empleado') || finalidad.includes('trabajador')"
          ],
          "line": 453,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('vulnerable') || finalidad.includes('discapacidad')"
          ],
          "line": 456,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('cliente frecuente') || finalidad.includes('fidelización')"
          ],
          "line": 459,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/tests/userSimulation.test.js": [
        {
          "name": "iniciarTestAutomatizado",
          "type": "declaration",
          "parameters": [],
          "line": 584,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 13,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "typeText",
          "type": "method",
          "parameters": [
            "selector",
            "text",
            "speed = 50"
          ],
          "line": 18,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!element"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let char of text"
          ],
          "line": 28,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "clickButton",
          "type": "method",
          "parameters": [
            "selector"
          ],
          "line": 39,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!element"
          ],
          "line": 41,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "selectOption",
          "type": "method",
          "parameters": [
            "selector",
            "value"
          ],
          "line": 61,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!element"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "toggleCheckbox",
          "type": "method",
          "parameters": [
            "selector",
            "checked = true"
          ],
          "line": 76,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!element"
          ],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "element.checked !== checked"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "navigateTo",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "waitForElement",
          "type": "method",
          "parameters": [
            "selector",
            "timeout = 5000"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "Date.now() - startTime < timeout"
          ],
          "line": 103,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "document.querySelector(selector)"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "scrollToElement",
          "type": "method",
          "parameters": [
            "selector"
          ],
          "line": 116,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "crearRATBasico",
          "type": "method",
          "parameters": [],
          "line": 136,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearEIPD",
          "type": "method",
          "parameters": [
            "ratId"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearProveedor",
          "type": "method",
          "parameters": [],
          "line": 282,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearRATConEIPD",
          "type": "method",
          "parameters": [
            "eipdId"
          ],
          "line": 320,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "crearRATCompleto",
          "type": "method",
          "parameters": [
            "proveedorId",
            "eipdId"
          ],
          "line": 375,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "editarRegistros",
          "type": "method",
          "parameters": [
            "ratId",
            "proveedorId",
            "eipdId"
          ],
          "line": 445,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "ejecutarPruebaCompleta",
          "type": "method",
          "parameters": [],
          "line": 520,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 569,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "iniciarTestAutomatizado",
          "type": "method",
          "parameters": [],
          "line": 584,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "resultado.success"
          ],
          "line": 592,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof module !== 'undefined' && module.exports"
          ],
          "line": 602,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 607,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/theme/colors.js": [
        {
          "name": "rgba",
          "type": "arrow",
          "parameters": [
            "color",
            "opacity"
          ],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/theme/darkTheme.js": [],
      "/frontend/src/utils/aiSupervisor.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 4,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "initialize",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && config"
          ],
          "line": 18,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isActive"
          ],
          "line": 22,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "superviseRATCreation",
          "type": "method",
          "parameters": [
            "ratData",
            "userId",
            "tenantId"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!businessLogicCheck.valid"
          ],
          "line": 45,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!legalComplianceCheck.compliant"
          ],
          "line": 57,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dataQualityCheck.score < 80"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "duplicateCheck.hasDuplicates"
          ],
          "line": 79,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "duplicateCheck.severity === 'critical'"
          ],
          "line": 87,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dpoTasksCheck.tasksRequired.length > 0"
          ],
          "line": 96,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supervision.interventions.length > 0"
          ],
          "line": 108,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateBusinessLogic",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "validateLegalCompliance",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 159,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 176,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "assessDataQuality",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 185,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable?.nombre || ratData.responsable.nombre.length < 5"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.finalidad?.descripcion || ratData.finalidad.descripcion.length < 50"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.categorias_datos || ratData.categorias_datos.length === 0"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.plazos_retencion || ratData.plazos_retencion === 'indefinido'"
          ],
          "line": 204,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "checkForIntelligentDuplicates",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 225,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "performIntelligentDuplicateAnalysis",
          "type": "method",
          "parameters": [
            "newRAT",
            "existingRATs"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const existingRAT of existingRATs"
          ],
          "line": 235,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity.score > maxSimilarity"
          ],
          "line": 238,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity.score > 0.7"
          ],
          "line": 243,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "maxSimilarity > 0.95"
          ],
          "line": 252,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "maxSimilarity > 0.8"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "maxSimilarity > 0.6"
          ],
          "line": 272,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateIntelligentSimilarity",
          "type": "method",
          "parameters": [
            "ratA",
            "ratB"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "compareRUT",
          "type": "method",
          "parameters": [
            "rutA",
            "rutB"
          ],
          "line": 311,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "compareSemanticContent",
          "type": "method",
          "parameters": [
            "textA",
            "textB"
          ],
          "line": 316,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "extractKeywords",
          "type": "method",
          "parameters": [
            "text"
          ],
          "line": 328,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "compareArraySimilarity",
          "type": "method",
          "parameters": [
            "arrA",
            "arrB"
          ],
          "line": 336,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRecommendation",
          "type": "method",
          "parameters": [
            "similarityScore"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "assessRequiredDPOTasks",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 356,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasSensitiveData || hasAutomatedDecisions || isHighVolume"
          ],
          "line": 369,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasInternationalTransfers"
          ],
          "line": 379,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.base_juridica?.tipo === 'consentimiento'"
          ],
          "line": 389,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "checkExistingEIPD",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 402,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const eipd of existingEIPDs"
          ],
          "line": 412,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity > 0.8"
          ],
          "line": 414,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 425,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "compareEIPDRelevance",
          "type": "method",
          "parameters": [
            "ratData",
            "eipd"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkExistingDPA",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 443,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.transferencias_internacionales?.paises"
          ],
          "line": 444,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "existingDPAs.length > 0"
          ],
          "line": 460,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 470,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "autoAssignDPOTasks",
          "type": "method",
          "parameters": [
            "tasks",
            "ratId",
            "tenantId"
          ],
          "line": 475,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const task of tasks"
          ],
          "line": 483,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "task.auto_assignable?.assignable"
          ],
          "line": 485,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "assignmentResult.success"
          ],
          "line": 492,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "creationResult.success"
          ],
          "line": 505,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 516,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "assignExistingDocument",
          "type": "method",
          "parameters": [
            "task",
            "assignmentInfo",
            "ratId"
          ],
          "line": 524,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 540,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "createNewDPOTask",
          "type": "method",
          "parameters": [
            "task",
            "ratId",
            "tenantId"
          ],
          "line": 545,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 564,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "logSupervision",
          "type": "method",
          "parameters": [
            "supervision",
            "userId",
            "tenantId"
          ],
          "line": 569,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 582,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "notifyInterventions",
          "type": "method",
          "parameters": [
            "interventions",
            "userId"
          ],
          "line": 587,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const intervention of interventions"
          ],
          "line": 588,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 602,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getInterventionTitle",
          "type": "method",
          "parameters": [
            "type"
          ],
          "line": 608,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "performPeriodicSupervision",
          "type": "method",
          "parameters": [],
          "line": 620,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rat of recentRATs"
          ],
          "line": 630,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 643,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getSupervisionDashboard",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 649,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "stats.length > 0"
          ],
          "line": 667,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 691,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "startSupervision",
          "type": "method",
          "parameters": [],
          "line": 696,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "enableAISupervisor",
          "type": "method",
          "parameters": [
            "userId"
          ],
          "line": 704,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 721,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getInstructions",
          "type": "method",
          "parameters": [],
          "line": 726,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/completeSystemTester.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "executeCompleteTest",
          "type": "method",
          "parameters": [],
          "line": 19,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 47,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testDatabaseConnections",
          "type": "method",
          "parameters": [],
          "line": 63,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of tables"
          ],
          "line": 70,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 79,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testBasicDatabaseOperations",
          "type": "method",
          "parameters": [],
          "line": 93,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "updateError"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "selectError"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "deleteError"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testAllForms",
          "type": "method",
          "parameters": [],
          "line": 162,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "forms.length === 0"
          ],
          "line": 165,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < forms.length; i++"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testSingleForm",
          "type": "method",
          "parameters": [
            "form",
            "formId"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let j = 0; j < requiredFields.length; j++"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!field.value && field.hasAttribute('required')"
          ],
          "line": 195,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "field.value && !this.isValidEmail(field.value)"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "field.value"
          ],
          "line": 208,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "field.value && !pattern.test(field.value)"
          ],
          "line": 219,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "field.value"
          ],
          "line": 221,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 226,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testAllButtons",
          "type": "method",
          "parameters": [],
          "line": 234,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "buttons.length === 0"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < buttons.length; i++"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testSingleButton",
          "type": "method",
          "parameters": [
            "button",
            "index"
          ],
          "line": 248,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!isVisible"
          ],
          "line": 257,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isDisabled"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "button.type === 'submit'"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!form"
          ],
          "line": 276,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 283,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testNavigation",
          "type": "method",
          "parameters": [],
          "line": 291,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "navLinks.length === 0"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const expectedRoute of expectedRoutes"
          ],
          "line": 304,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "linkExists"
          ],
          "line": 309,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < Math.min(navLinks.length",
            "10); i++"
          ],
          "line": 317,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!href"
          ],
          "line": 322,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "href.startsWith('#')"
          ],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testCRUDOperations",
          "type": "method",
          "parameters": [],
          "line": 335,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of tables"
          ],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testTableCRUD",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 343,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "listError"
          ],
          "line": 351,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "listData && listData.length > 0"
          ],
          "line": 359,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "singleError"
          ],
          "line": 367,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "testData"
          ],
          "line": 376,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "createError"
          ],
          "line": 383,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "updateError"
          ],
          "line": 395,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "deleteError"
          ],
          "line": 407,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 415,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testValidations",
          "type": "method",
          "parameters": [],
          "line": 423,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "aiAgentActive"
          ],
          "line": 440,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testModuleInteractions",
          "type": "method",
          "parameters": [],
          "line": 450,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "testOrganizationRATRelation",
          "type": "method",
          "parameters": [],
          "line": 461,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!orgs || orgs.length === 0"
          ],
          "line": 469,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 480,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 486,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testRATProviderRelation",
          "type": "method",
          "parameters": [],
          "line": 491,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "testDPONotifications",
          "type": "method",
          "parameters": [],
          "line": 495,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 502,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 508,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "addResult",
          "type": "method",
          "parameters": [
            "prueba",
            "resultado",
            "motivo"
          ],
          "line": 514,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getTestDataForTable",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 523,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getUpdateDataForTable",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 548,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isValidEmail",
          "type": "method",
          "parameters": [
            "email"
          ],
          "line": 558,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateSimpleReport",
          "type": "method",
          "parameters": [
            "executionTime"
          ],
          "line": 565,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "displayReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 586,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.failed > 0"
          ],
          "line": 613,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.warnings > 0"
          ],
          "line": 615,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/dataIntegrityValidator.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 17,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupValidationRules",
          "type": "method",
          "parameters": [],
          "line": 28,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateBeforeInsert",
          "type": "method",
          "parameters": [
            "tableName",
            "data"
          ],
          "line": 79,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rules"
          ],
          "line": 94,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < records.length; i++"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules.field_validations"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules.referential_integrity"
          ],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules.business_rules"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateBeforeUpdate",
          "type": "method",
          "parameters": [
            "tableName",
            "data",
            "whereClause"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!whereValidation.valid"
          ],
          "line": 165,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!existenceValidation.exists"
          ],
          "line": 173,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules.field_validations"
          ],
          "line": 182,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules.referential_integrity"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateRequiredFields",
          "type": "method",
          "parameters": [
            "record",
            "requiredFields",
            "recordIndex = 0"
          ],
          "line": 211,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value === undefined || value === null || value === ''"
          ],
          "line": 217,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof value === 'string' && value.trim() === ''"
          ],
          "line": 219,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateFieldFormats",
          "type": "method",
          "parameters": [
            "record",
            "fieldValidations",
            "recordIndex = 0"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rules.required && (value === undefined || value === null)"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "rules.type"
          ],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && !this.isValidEmail(value)"
          ],
          "line": 243,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && !this.isValidRUT(value)"
          ],
          "line": 249,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && !this.isValidPhone(value)"
          ],
          "line": 255,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && rules.minLength && value.length < rules.minLength"
          ],
          "line": 261,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && rules.maxLength && value.length > rules.maxLength"
          ],
          "line": 264,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateReferentialIntegrity",
          "type": "method",
          "parameters": [
            "record",
            "refRules",
            "recordIndex = 0"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [fieldName",
            "refRule] of Object.entries(refRules)"
          ],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "refRule.nullable && (!value || value === null)"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value"
          ],
          "line": 288,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "count === 0"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 303,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateBusinessRules",
          "type": "method",
          "parameters": [
            "tableName",
            "record",
            "businessRules",
            "recordIndex = 0"
          ],
          "line": 315,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rule of businessRules"
          ],
          "line": 318,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!result.valid"
          ],
          "line": 322,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rule.critical"
          ],
          "line": 323,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 330,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "applyBusinessRule",
          "type": "method",
          "parameters": [
            "tableName",
            "record",
            "ruleName",
            "recordIndex"
          ],
          "line": 341,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "ruleName"
          ],
          "line": 342,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateUniqueRUT",
          "type": "method",
          "parameters": [
            "record",
            "recordIndex"
          ],
          "line": 363,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!record.rut"
          ],
          "line": 364,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "count > 0"
          ],
          "line": 375,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 381,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateUniqueRATPerActivity",
          "type": "method",
          "parameters": [
            "record",
            "recordIndex"
          ],
          "line": 389,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!record.nombre_actividad || !record.tenant_id"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "count > 0"
          ],
          "line": 402,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 408,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateCompleteDPOInfo",
          "type": "method",
          "parameters": [
            "record",
            "recordIndex"
          ],
          "line": 416,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missingFields.length > 0"
          ],
          "line": 420,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateRiskLevel",
          "type": "method",
          "parameters": [
            "record",
            "recordIndex"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "record.nivel_riesgo"
          ],
          "line": 431,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!validLevels.includes(record.nivel_riesgo)"
          ],
          "line": 433,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateWhereClause",
          "type": "method",
          "parameters": [
            "whereClause"
          ],
          "line": 444,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!whereClause || typeof whereClause !== 'object'"
          ],
          "line": 447,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!hasUniqueField"
          ],
          "line": 459,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value === undefined || value === 'undefined'"
          ],
          "line": 466,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateRecordExists",
          "type": "method",
          "parameters": [
            "tableName",
            "whereClause"
          ],
          "line": 478,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 491,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 497,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "sanitizeDataForLog",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 505,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "sanitized[field]"
          ],
          "line": 511,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof sanitized[key] === 'string' && sanitized[key].length > 100"
          ],
          "line": 518,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logValidationResults",
          "type": "method",
          "parameters": [
            "validation"
          ],
          "line": 529,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.valid"
          ],
          "line": 530,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.warnings.length > 0"
          ],
          "line": 547,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!validation.valid"
          ],
          "line": 557,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.integrityChecks.length > 200"
          ],
          "line": 562,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.validationErrors.length > 100"
          ],
          "line": 565,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isValidEmail",
          "type": "method",
          "parameters": [
            "email"
          ],
          "line": 573,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isValidRUT",
          "type": "method",
          "parameters": [
            "rut"
          ],
          "line": 578,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isValidPhone",
          "type": "method",
          "parameters": [
            "phone"
          ],
          "line": 584,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateIntegrityReport",
          "type": "method",
          "parameters": [],
          "line": 593,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "summarizeErrors",
          "type": "method",
          "parameters": [],
          "line": 607,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!summary[table]"
          ],
          "line": 612,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "operation === 'INSERT'"
          ],
          "line": 632,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "operation === 'UPDATE'"
          ],
          "line": 634,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/databaseHealthMonitor.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 18,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "startMonitoring",
          "type": "method",
          "parameters": [],
          "line": 37,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isMonitoring"
          ],
          "line": 38,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 58,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "performInitialHealthCheck",
          "type": "method",
          "parameters": [],
          "line": 67,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testConnectivity",
          "type": "method",
          "parameters": [],
          "line": 113,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.message.includes('timeout')"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.message.includes('network')"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "responseTime > 3000"
          ],
          "line": 149,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testMainTables",
          "type": "method",
          "parameters": [],
          "line": 166,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const tableName of mainTables"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.message.includes('does not exist')"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.message.includes('permission')"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "failedTables === 0"
          ],
          "line": 225,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "failedTables < mainTables.length / 2"
          ],
          "line": 227,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testReferentialIntegrity",
          "type": "method",
          "parameters": [],
          "line": 245,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratError && orphanRATs"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rat of orphanRATs"
          ],
          "line": 257,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!orgExists"
          ],
          "line": 264,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!provError && orphanProviders"
          ],
          "line": 283,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const provider of orphanProviders"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratExists"
          ],
          "line": 291,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.issues.length > 0"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 313,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testRLSPermissions",
          "type": "method",
          "parameters": [],
          "line": 325,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const testCase of testCases"
          ],
          "line": 336,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "withFilterError && withFilterError.message.includes('406')"
          ],
          "line": 357,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 366,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testDataConsistency",
          "type": "method",
          "parameters": [],
          "line": 385,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "incompleteRATs && incompleteRATs.length > 0"
          ],
          "line": 396,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "duplicateOrgs"
          ],
          "line": 418,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "count > 1"
          ],
          "line": 425,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.inconsistencies.length > 0"
          ],
          "line": 439,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 446,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateOverallStatus",
          "type": "method",
          "parameters": [
            "checks"
          ],
          "line": 458,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logCriticalIssue",
          "type": "method",
          "parameters": [
            "type",
            "details"
          ],
          "line": 470,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "logConnectionIssue",
          "type": "method",
          "parameters": [
            "type",
            "error",
            "responseTime"
          ],
          "line": 495,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "issue.severity === 'CRITICAL'"
          ],
          "line": 509,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logConsistencyError",
          "type": "method",
          "parameters": [
            "category",
            "details"
          ],
          "line": 529,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.severity === 'HIGH' || error.severity === 'CRITICAL'"
          ],
          "line": 542,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupPeriodicChecks",
          "type": "method",
          "parameters": [],
          "line": 562,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 567,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupRealtimeErrorDetection",
          "type": "method",
          "parameters": [],
          "line": 576,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "message.includes('Supabase') || message.includes('PostgreSQL')"
          ],
          "line": 584,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeRealTimeError",
          "type": "method",
          "parameters": [
            "message",
            "args"
          ],
          "line": 595,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "lowerMessage.includes('406') || lowerMessage.includes('not acceptable')"
          ],
          "line": 598,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "lowerMessage.includes('timeout') || lowerMessage.includes('network')"
          ],
          "line": 602,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "lowerMessage.includes('undefined') && lowerMessage.includes('id')"
          ],
          "line": 606,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateHealthReport",
          "type": "method",
          "parameters": [],
          "line": 614,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateDBRecommendations",
          "type": "method",
          "parameters": [],
          "line": 640,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.criticalIssues.length > 3"
          ],
          "line": 643,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rls406Errors.length > 1"
          ],
          "line": 655,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.consistencyErrors.length > 5"
          ],
          "line": 663,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "printHealthReport",
          "type": "method",
          "parameters": [],
          "line": 677,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.latest_check"
          ],
          "line": 684,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.recommendations.length > 0"
          ],
          "line": 691,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "stopMonitoring",
          "type": "method",
          "parameters": [],
          "line": 707,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 721,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/dynamicLegalRules.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 4,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "loadRules",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRulesByCategory",
          "type": "method",
          "parameters": [
            "category"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rule of this.rules.values()"
          ],
          "line": 37,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rule.category === category"
          ],
          "line": 38,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "evaluateRAT",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rule of this.rules.values()"
          ],
          "line": 57,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "result.triggered"
          ],
          "line": 60,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "result.severity"
          ],
          "line": 61,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "applyRule",
          "type": "method",
          "parameters": [
            "rule",
            "ratData"
          ],
          "line": 87,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "conditionMet"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "evaluateCondition",
          "type": "method",
          "parameters": [
            "condition",
            "ratData"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "executeCondition",
          "type": "method",
          "parameters": [
            "condition",
            "context"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "e"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasSensitiveData",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasInternationalTransfers",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isHighVolume",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 158,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "usesAutomatedDecisions",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 163,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "extractContext",
          "type": "method",
          "parameters": [
            "rule",
            "ratData"
          ],
          "line": 167,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rule.context_fields"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getNestedValue",
          "type": "method",
          "parameters": [
            "obj",
            "path"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "logRuleExecution",
          "type": "method",
          "parameters": [
            "ruleId",
            "ratId",
            "triggered"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "ensureRulesLoaded",
          "type": "method",
          "parameters": [],
          "line": 198,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "needsRefresh || this.rules.size === 0"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "createRule",
          "type": "method",
          "parameters": [
            "ruleData",
            "userId"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 229,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "updateRule",
          "type": "method",
          "parameters": [
            "ruleId",
            "updates",
            "userId"
          ],
          "line": 235,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "deactivateRule",
          "type": "method",
          "parameters": [
            "ruleId",
            "userId"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "getArticleDetails",
          "type": "method",
          "parameters": [
            "articleNumber"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 271,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateRuleCondition",
          "type": "method",
          "parameters": [
            "condition"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 298,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "invalidVariables.length > 0"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "extractVariables",
          "type": "method",
          "parameters": [
            "condition"
          ],
          "line": 315,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRuleExecutionStats",
          "type": "method",
          "parameters": [],
          "line": 321,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ruleStats[stat.rule_id]"
          ],
          "line": 337,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "stat.triggered"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "syncWithLatestLaw",
          "type": "method",
          "parameters": [],
          "line": 364,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const update of updates"
          ],
          "line": 375,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 380,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "processLawUpdate",
          "type": "method",
          "parameters": [
            "update"
          ],
          "line": 386,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "update.update_type === 'new_article'"
          ],
          "line": 388,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "update.update_type === 'modified_article'"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "update.update_type === 'new_requirement'"
          ],
          "line": 392,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 401,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "createRuleFromArticle",
          "type": "method",
          "parameters": [
            "update"
          ],
          "line": 406,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "updateRulesForArticle",
          "type": "method",
          "parameters": [
            "update"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getComplianceGuidance",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 444,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "alert.action?.includes('EIPD')"
          ],
          "line": 463,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "alert.action?.includes('DPA')"
          ],
          "line": 471,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateDeadline",
          "type": "method",
          "parameters": [
            "action"
          ],
          "line": 483,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ensureRulesLoaded",
          "type": "method",
          "parameters": [],
          "line": 498,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "needsRefresh || this.rules.size === 0"
          ],
          "line": 502,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getArticleText",
          "type": "method",
          "parameters": [
            "articleNumber"
          ],
          "line": 507,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 518,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "suggestBestPractices",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 524,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 536,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "inferCategory",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 542,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('marketing') || finalidad.includes('publicidad')"
          ],
          "line": 545,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('empleado') || finalidad.includes('nomina')"
          ],
          "line": 548,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('cliente') || finalidad.includes('venta')"
          ],
          "line": 551,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('salud') || finalidad.includes('medico')"
          ],
          "line": 554,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "recordCompliance",
          "type": "method",
          "parameters": [
            "ratId",
            "complianceLevel",
            "userId"
          ],
          "line": 561,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 571,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getComplianceTrend",
          "type": "method",
          "parameters": [
            "tenantId",
            "days = 30"
          ],
          "line": 576,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 592,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/errorMonitoringOnly.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 12,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupErrorPatterns",
          "type": "method",
          "parameters": [],
          "line": 25,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "init",
          "type": "method",
          "parameters": [],
          "line": 60,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 70,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupGlobalErrorCapture",
          "type": "method",
          "parameters": [],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupConsoleMonitoring",
          "type": "method",
          "parameters": [],
          "line": 103,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupFetchMonitoring",
          "type": "method",
          "parameters": [],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!response.ok"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "duration > 5000"
          ],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 157,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "logError",
          "type": "method",
          "parameters": [
            "type",
            "errorData",
            "context = {}"
          ],
          "line": 174,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorEntry.severity === 'CRITICAL'"
          ],
          "line": 193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.errorLog.length > 500"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeConsoleMessage",
          "type": "method",
          "parameters": [
            "level",
            "args"
          ],
          "line": 210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [patternType",
            "config] of this.patterns"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "config.patterns.some(pattern => message.includes(pattern.toLowerCase()))"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "determineSeverity",
          "type": "method",
          "parameters": [
            "type",
            "errorData"
          ],
          "line": 228,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [patternType",
            "config] of this.patterns"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "config.patterns.some(pattern => errorText.includes(pattern.toLowerCase()))"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "type.includes('CRITICAL') || type.includes('406') || type.includes('undefined')"
          ],
          "line": 238,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "type.includes('HTTP_ERROR') || type.includes('MISSING')"
          ],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "createCriticalAlert",
          "type": "method",
          "parameters": [
            "errorEntry"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateAlertMessage",
          "type": "method",
          "parameters": [
            "errorEntry"
          ],
          "line": 276,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "errorEntry.type"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logSpecificError",
          "type": "method",
          "parameters": [
            "errorEntry"
          ],
          "line": 298,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorEntry.severity === 'CRITICAL'"
          ],
          "line": 308,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorEntry.severity === 'HIGH'"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "fileError"
          ],
          "line": 316,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "startPeriodicReporting",
          "type": "method",
          "parameters": [],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generatePeriodicReport",
          "type": "method",
          "parameters": [],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getFullReport",
          "type": "method",
          "parameters": [],
          "line": 362,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeErrorPatterns",
          "type": "method",
          "parameters": [],
          "line": 386,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [],
          "line": 403,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rls406Count > 3"
          ],
          "line": 410,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "undefinedIdCount > 2"
          ],
          "line": 418,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "criticalCount > 5"
          ],
          "line": 426,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "stop",
          "type": "method",
          "parameters": [],
          "line": 440,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 456,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/errorPreventionMonitor.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 12,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "init",
          "type": "method",
          "parameters": [],
          "line": 38,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "registerErrorPatterns",
          "type": "method",
          "parameters": [],
          "line": 60,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "detectErrorType",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [type",
            "config] of this.errorPatterns"
          ],
          "line": 96,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "config.patterns.some(pattern => errorMsg.includes(pattern))"
          ],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupGlobalErrorHandlers",
          "type": "method",
          "parameters": [],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!response.ok && this.isSupabaseRequest(args[0])"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isSupabaseRequest(args[0])"
          ],
          "line": 134,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isSupabaseError(event.reason)"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isSupabaseError({ message: errorMsg })"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isSupabaseRequest",
          "type": "method",
          "parameters": [
            "url"
          ],
          "line": 163,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isSupabaseError",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleSupabaseHttpError",
          "type": "method",
          "parameters": [
            "status",
            "url",
            "response"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "parseError"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleSupabaseNetworkError",
          "type": "method",
          "parameters": [
            "error",
            "url"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "preventError",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorType.autoFix"
          ],
          "line": 224,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "applyAutoFix",
          "type": "method",
          "parameters": [
            "errorType"
          ],
          "line": 236,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "errorType.solution"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "retryWithBackoff",
          "type": "method",
          "parameters": [
            "originalError",
            "maxRetries = 3"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let attempt = 1; attempt <= maxRetries; attempt++"
          ],
          "line": 261,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logErrorForAnalysis",
          "type": "method",
          "parameters": [
            "errorType"
          ],
          "line": 273,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "startPeriodicHealthCheck",
          "type": "method",
          "parameters": [],
          "line": 287,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "performHealthCheck",
          "type": "method",
          "parameters": [],
          "line": 296,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "successRate < 80"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 316,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getHealthReport",
          "type": "method",
          "parameters": [],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.preventedErrors.length > 10"
          ],
          "line": 341,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.healthMetrics.fallbacksUsed > this.healthMetrics.totalQueries * 0.3"
          ],
          "line": 345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "recentRLSErrors.length > 5"
          ],
          "line": 353,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "stop",
          "type": "method",
          "parameters": [],
          "line": 363,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 380,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/fileErrorLogger.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 9,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupErrorDirectory",
          "type": "method",
          "parameters": [],
          "line": 21,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 38,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "logCriticalError",
          "type": "method",
          "parameters": [
            "type",
            "details",
            "source = 'UNKNOWN'"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "logHighError",
          "type": "method",
          "parameters": [
            "type",
            "details",
            "source = 'UNKNOWN'"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "logMediumError",
          "type": "method",
          "parameters": [
            "type",
            "details",
            "source = 'UNKNOWN'"
          ],
          "line": 82,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "logEarlyWarning",
          "type": "method",
          "parameters": [
            "type",
            "predictedError",
            "preventionAction",
            "details"
          ],
          "line": 99,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "logDatabaseHealth",
          "type": "method",
          "parameters": [
            "healthReport"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "logValidationError",
          "type": "method",
          "parameters": [
            "tableName",
            "operation",
            "validationResult"
          ],
          "line": 134,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "writeErrorToFile",
          "type": "method",
          "parameters": [
            "errorEntry",
            "filename = null"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "writeToFile",
          "type": "method",
          "parameters": [
            "filename",
            "content"
          ],
          "line": 176,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "window.showSaveFilePicker"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 186,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "writeWithFileSystemAPI",
          "type": "method",
          "parameters": [
            "filename",
            "content"
          ],
          "line": 197,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.name !== 'AbortError'"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "downloadFile",
          "type": "method",
          "parameters": [
            "filename",
            "content"
          ],
          "line": 223,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "formatLogEntry",
          "type": "method",
          "parameters": [
            "type",
            "entry"
          ],
          "line": 249,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "entry.details"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "entry.predicted_error"
          ],
          "line": 269,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "entry.errors && entry.errors.length > 0"
          ],
          "line": 275,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "entry.warnings && entry.warnings.length > 0"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "entry.system_state"
          ],
          "line": 293,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "formatDetails",
          "type": "method",
          "parameters": [
            "details"
          ],
          "line": 307,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof details === 'string'"
          ],
          "line": 308,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof details === 'object'"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "formatHealthReport",
          "type": "method",
          "parameters": [
            "healthEntry"
          ],
          "line": 326,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "healthEntry.checks"
          ],
          "line": 337,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checkResult.error"
          ],
          "line": 342,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checkResult.details"
          ],
          "line": 345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "healthEntry.critical_issues && healthEntry.critical_issues.length > 0"
          ],
          "line": 352,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "captureSystemState",
          "type": "method",
          "parameters": [],
          "line": 367,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "captureContext",
          "type": "method",
          "parameters": [],
          "line": 386,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "formatSystemState",
          "type": "method",
          "parameters": [
            "state"
          ],
          "line": 398,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof state.memory === 'object'"
          ],
          "line": 402,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof state.connection === 'object'"
          ],
          "line": 405,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateDailySummary",
          "type": "method",
          "parameters": [],
          "line": 414,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "formatDailySummary",
          "type": "method",
          "parameters": [
            "summary"
          ],
          "line": 436,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "summary.most_common_errors.length > 0"
          ],
          "line": 451,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getMostCommonErrors",
          "type": "method",
          "parameters": [],
          "line": 466,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "clearErrorBuffer",
          "type": "method",
          "parameters": [],
          "line": 483,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStats",
          "type": "method",
          "parameters": [],
          "line": 491,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/frontendValidator.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateAllModules",
          "type": "method",
          "parameters": [],
          "line": 20,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const module of modules"
          ],
          "line": 42,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 48,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateModule",
          "type": "method",
          "parameters": [
            "module"
          ],
          "line": 71,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasErrors"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasWarnings"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 120,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "checkComponentFile",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const path of possiblePaths"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "response.ok"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "e"
          ],
          "line": 146,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 152,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateJSSyntax",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 160,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!componentPath"
          ],
          "line": 165,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 184,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateImports",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 192,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missingImports.length > 0"
          ],
          "line": 205,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 216,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateHTMLStructure",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 224,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateSupabaseIntegration",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 258,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateMUIUsage",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 282,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateRouting",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!routeExists"
          ],
          "line": 315,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 326,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateValidationReport",
          "type": "method",
          "parameters": [
            "results"
          ],
          "line": 334,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "summary.errorCount > 0"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "summary.warningCount > 0"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "summary.errorCount > 0"
          ],
          "line": 354,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "summary.warningCount > 0"
          ],
          "line": 363,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "saveValidationReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 383,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 402,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateComponentLive",
          "type": "method",
          "parameters": [
            "componentName",
            "mountElement = null"
          ],
          "line": 410,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.jsErrors.length > 0"
          ],
          "line": 442,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.cssErrors.length > 0 || validation.accessibilityIssues.length > 0"
          ],
          "line": 444,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.renderSuccess && validation.htmlValid"
          ],
          "line": 446,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 452,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testComponentRender",
          "type": "method",
          "parameters": [
            "componentName",
            "mountElement"
          ],
          "line": 463,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 472,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validateGeneratedHTML",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 481,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 491,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "captureJSErrors",
          "type": "method",
          "parameters": [],
          "line": 500,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateAppliedCSS",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 531,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "backgroundColor === 'rgb(255",
            "255",
            "255)' || backgroundColor === 'white'"
          ],
          "line": 541,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!usesDarkTheme && element.children.length > 0"
          ],
          "line": 560,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 568,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "checkAccessibility",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 581,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!button.textContent && !button.getAttribute('aria-label')"
          ],
          "line": 590,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "headings.length === 0 && element.children.length > 3"
          ],
          "line": 601,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "lowContrastElements.length > 0"
          ],
          "line": 611,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 619,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "measurePerformance",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 632,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "window.performance"
          ],
          "line": 643,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "performance.memory"
          ],
          "line": 648,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 654,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getComponentPath",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 665,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "componentUsesSupabase",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 677,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getComponentSpecificChecks",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 689,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "checkRouteInApp",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 716,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "hasImproperNesting",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 721,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasRequiredAttributes",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 727,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const el of interactiveElements"
          ],
          "line": 731,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!el.getAttribute('aria-label') && !el.textContent && !el.getAttribute('title')"
          ],
          "line": 732,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "quickValidation",
          "type": "method",
          "parameters": [],
          "line": 743,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "printStatusReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 760,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.errorCount === 0"
          ],
          "line": 772,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "process.env.NODE_ENV === 'development'"
          ],
          "line": 797,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/humanInteractionSimulator.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 15,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "runCompleteSystemSimulation",
          "type": "method",
          "parameters": [],
          "line": 32,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isRunning"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const testName of testSequence"
          ],
          "line": 60,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!testResult.success"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "executeTest",
          "type": "method",
          "parameters": [
            "testName"
          ],
          "line": 95,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "testName"
          ],
          "line": 111,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "simulateLoginFlow",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 164,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!loginButton"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!loginForm"
          ],
          "line": 182,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "simulateNavigationTest",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 195,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const item of navigationItems"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!navElement"
          ],
          "line": 211,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!pageLoaded"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "simulateOrganizationCreation",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!newOrgButton"
          ],
          "line": 243,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!saveButton"
          ],
          "line": 273,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!success"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!savedOrg"
          ],
          "line": 296,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "simulateRATCreationFlow",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 307,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!newRATButton"
          ],
          "line": 318,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "simulateRATFormSteps",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 331,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "fillRATStep1",
          "type": "method",
          "parameters": [],
          "line": 374,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "fillRATStep2",
          "type": "method",
          "parameters": [],
          "line": 383,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const category of categories"
          ],
          "line": 386,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checkbox"
          ],
          "line": 388,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fillRATStep3",
          "type": "method",
          "parameters": [],
          "line": 395,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "baseLegal"
          ],
          "line": 398,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fillRATStep4",
          "type": "method",
          "parameters": [],
          "line": 404,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "fillRATStep5",
          "type": "method",
          "parameters": [],
          "line": 412,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "fillRATStep6",
          "type": "method",
          "parameters": [],
          "line": 419,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "plazoSelect"
          ],
          "line": 421,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fillRATStep7",
          "type": "method",
          "parameters": [],
          "line": 427,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "noTransfer"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fillRATStep8",
          "type": "method",
          "parameters": [],
          "line": 436,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const measure of securityMeasures"
          ],
          "line": 438,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checkbox"
          ],
          "line": 440,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "finalizeRAT",
          "type": "method",
          "parameters": [],
          "line": 447,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!saveButton"
          ],
          "line": 451,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "verifyRATCreation",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 458,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!successMessage"
          ],
          "line": 464,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rats || rats.length === 0"
          ],
          "line": 475,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "humanClick",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 486,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "humanType",
          "type": "method",
          "parameters": [
            "element",
            "text",
            "options = {}"
          ],
          "line": 502,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < text.length; i++"
          ],
          "line": 515,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "findElement",
          "type": "method",
          "parameters": [
            "selectors",
            "timeout = 5000"
          ],
          "line": 530,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "Date.now() - startTime < timeout"
          ],
          "line": 535,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const selector of selectorList"
          ],
          "line": 536,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!element && selector.includes(':contains(')"
          ],
          "line": 541,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "element && this.isElementVisible(element)"
          ],
          "line": 552,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 555,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fillForm",
          "type": "method",
          "parameters": [
            "fieldMap"
          ],
          "line": 566,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [selector",
            "value] of Object.entries(fieldMap)"
          ],
          "line": 567,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "field"
          ],
          "line": 569,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "clickNextButton",
          "type": "method",
          "parameters": [],
          "line": 576,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "nextButton"
          ],
          "line": 584,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "selectOption",
          "type": "method",
          "parameters": [
            "selectElement",
            "value"
          ],
          "line": 590,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "waitForPageLoad",
          "type": "method",
          "parameters": [
            "timeout = 10000"
          ],
          "line": 598,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "Date.now() - startTime < timeout"
          ],
          "line": 601,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "document.readyState === 'complete'"
          ],
          "line": 602,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "waitForSuccess",
          "type": "method",
          "parameters": [
            "timeout = 5000"
          ],
          "line": 612,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "Date.now() - startTime < timeout"
          ],
          "line": 623,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const selector of successSelectors"
          ],
          "line": 624,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "element && this.isElementVisible(element)"
          ],
          "line": 626,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "navigateToPage",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 636,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "link"
          ],
          "line": 640,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "humanDelay",
          "type": "method",
          "parameters": [
            "type",
            "customMs"
          ],
          "line": 652,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "isElementVisible",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 660,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getCurrentElement",
          "type": "method",
          "parameters": [],
          "line": 669,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "formatDuration",
          "type": "method",
          "parameters": [
            "ms"
          ],
          "line": 673,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [
            "simulation"
          ],
          "line": 679,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "simulation.success_rate < 80"
          ],
          "line": 682,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeCommonErrors",
          "type": "method",
          "parameters": [
            "errors"
          ],
          "line": 702,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!errorGroups[key]"
          ],
          "line": 708,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getErrorRecommendation",
          "type": "method",
          "parameters": [
            "errorMessage"
          ],
          "line": 724,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorMessage.includes('no encontrado')"
          ],
          "line": 725,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorMessage.includes('base de datos')"
          ],
          "line": 728,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorMessage.includes('navegación')"
          ],
          "line": 731,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "saveSimulationResults",
          "type": "method",
          "parameters": [
            "simulation"
          ],
          "line": 737,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 748,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "simulateProviderManagement",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 754,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "simulateReportGeneration",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 759,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "simulateDashboardInteraction",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 764,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "simulateSystemConfiguration",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 769,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/iaAgentReporter.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateFullReport",
          "type": "method",
          "parameters": [],
          "line": 18,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 40,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "checkDeploymentStatus",
          "type": "method",
          "parameters": [],
          "line": 53,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "checkAgentStatus",
          "type": "method",
          "parameters": [],
          "line": 76,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "activeAgents && activeAgents.length > 0"
          ],
          "line": 85,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getRecentActivity",
          "type": "method",
          "parameters": [],
          "line": 115,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 134,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getComplianceMetrics",
          "type": "method",
          "parameters": [],
          "line": 144,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "analyzeErrors",
          "type": "method",
          "parameters": [],
          "line": 178,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkSupabaseHealth",
          "type": "method",
          "parameters": [],
          "line": 188,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getUserInteractions",
          "type": "method",
          "parameters": [],
          "line": 218,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getDocumentGeneration",
          "type": "method",
          "parameters": [],
          "line": 247,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 266,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [],
          "line": 277,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorAnalysis.errors_24h > 10"
          ],
          "line": 283,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "compliance.overall_compliance < 85"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!agentStatus.is_active"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "recommendations.length === 0"
          ],
          "line": 314,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "groupByType",
          "type": "method",
          "parameters": [
            "items",
            "typeField = 'activity_type'"
          ],
          "line": 335,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeRATs",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 344,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeNotifications",
          "type": "method",
          "parameters": [
            "notifications"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateOverallCompliance",
          "type": "method",
          "parameters": [
            "ratMetrics",
            "notificationMetrics"
          ],
          "line": 375,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratMetrics.with_sensitive_data > 0"
          ],
          "line": 379,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "notificationMetrics.overdue > 0"
          ],
          "line": 384,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateSuccessRate",
          "type": "method",
          "parameters": [
            "documents"
          ],
          "line": 391,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getMostCommonErrors",
          "type": "method",
          "parameters": [
            "errors"
          ],
          "line": 398,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "saveReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 409,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 421,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "formatConsoleReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 429,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "executeReport",
          "type": "method",
          "parameters": [],
          "line": 437,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "process.env.NODE_ENV === 'production'"
          ],
          "line": 449,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/index.js": [
        {
          "name": "superSafeSupabaseQuery",
          "type": "arrow",
          "parameters": [
            "tableName",
            "queryFn",
            "options"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSystemStatus",
          "type": "arrow",
          "parameters": [],
          "line": 255,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "runSystemTest",
          "type": "arrow",
          "parameters": [],
          "line": 260,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 13,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "init",
          "type": "method",
          "parameters": [],
          "line": 26,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isInitialized"
          ],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 45,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSystemStatus",
          "type": "method",
          "parameters": [],
          "line": 53,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateSystemSummary",
          "type": "method",
          "parameters": [],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateSystemHealth",
          "type": "method",
          "parameters": [],
          "line": 95,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logSystemStatus",
          "type": "method",
          "parameters": [],
          "line": 108,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "status.summary.recommendations.length > 0"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "superSafeQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "queryFn",
            "options = {}"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "options.fallbackFn"
          ],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "runSystemTest",
          "type": "method",
          "parameters": [],
          "line": 159,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "testSmartClient",
          "type": "method",
          "parameters": [],
          "line": 174,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testRLSGuard",
          "type": "method",
          "parameters": [],
          "line": 184,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testErrorMonitor",
          "type": "method",
          "parameters": [],
          "line": 196,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 203,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "document.readyState === 'loading'"
          ],
          "line": 215,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/inputSanitizer.js": [
        {
          "name": "sanitizeString",
          "type": "method",
          "parameters": [
            "input"
          ],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateRUT",
          "type": "method",
          "parameters": [
            "rut"
          ],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rutRegex.test(cleaned.replace(/\\./g",
            "''))"
          ],
          "line": 43,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = rutNumber.length - 1; i >= 0; i--"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "calculatedDV !== dv"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateEmail",
          "type": "method",
          "parameters": [
            "email"
          ],
          "line": 73,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!emailRegex.test(cleaned)"
          ],
          "line": 79,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "cleaned.includes('<') || cleaned.includes('>') || cleaned.includes('\"')"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "sanitizeCompanyName",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 94,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validatePhone",
          "type": "method",
          "parameters": [
            "phone"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!phoneRegex.test(cleaned)"
          ],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "sanitizeLongText",
          "type": "method",
          "parameters": [
            "text",
            "maxLength = 5000"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateURL",
          "type": "method",
          "parameters": [
            "url"
          ],
          "line": 138,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!['http:'",
            "'https:'].includes(urlObj.protocol)"
          ],
          "line": 145,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "url.includes('javascript:') || url.includes('data:')"
          ],
          "line": 150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "sanitizeObject",
          "type": "method",
          "parameters": [
            "obj"
          ],
          "line": 163,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [key",
            "value] of Object.entries(obj)"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof value === 'string'"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(value)"
          ],
          "line": 174,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof value === 'object' && value !== null"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateDate",
          "type": "method",
          "parameters": [
            "date"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isNaN(dateObj.getTime())"
          ],
          "line": 196,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "year < 1900 || year > 2100"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "sanitizeSQLParam",
          "type": "method",
          "parameters": [
            "param"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateNumber",
          "type": "method",
          "parameters": [
            "num",
            "min = null",
            "max = null"
          ],
          "line": 228,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isNaN(parsed)"
          ],
          "line": 231,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "min !== null && parsed < min"
          ],
          "line": 235,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "max !== null && parsed > max"
          ],
          "line": 239,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validatePassword",
          "type": "method",
          "parameters": [
            "password"
          ],
          "line": 249,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "password.length < 8"
          ],
          "line": 254,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!/[A-Z]/.test(password)"
          ],
          "line": 258,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!/[a-z]/.test(password)"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!/[0-9]/.test(password)"
          ],
          "line": 266,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!/[!@#$%^&*]/.test(password)"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errors.length > 0"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "sanitizeFileName",
          "type": "method",
          "parameters": [
            "fileName"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateFileSize",
          "type": "method",
          "parameters": [
            "sizeInBytes",
            "maxSizeMB = 10"
          ],
          "line": 298,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "sizeInBytes > maxSizeBytes"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateFileType",
          "type": "method",
          "parameters": [
            "fileName",
            "allowedTypes = ['pdf'",
            "'doc'",
            "'docx'",
            "'xls'",
            "'xlsx'",
            "'jpg'",
            "'jpeg'",
            "'png']"
          ],
          "line": 311,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!allowedTypes.includes(extension)"
          ],
          "line": 314,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/instantSystemTest.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "executeAllTests",
          "type": "method",
          "parameters": [],
          "line": 20,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 62,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testDatabase",
          "type": "method",
          "parameters": [],
          "line": 72,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of tables"
          ],
          "line": 87,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 94,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 107,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rat of rats"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!org"
          ],
          "line": 116,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testNavigation",
          "type": "method",
          "parameters": [],
          "line": 138,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const route of expectedRoutes"
          ],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 169,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testForms",
          "type": "method",
          "parameters": [],
          "line": 180,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < Math.min(forms.length",
            "5); i++"
          ],
          "line": 187,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testCRUDOperations",
          "type": "method",
          "parameters": [],
          "line": 223,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 246,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testCreate",
          "type": "method",
          "parameters": [],
          "line": 254,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 272,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testRead",
          "type": "method",
          "parameters": [
            "recordId"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 290,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testUpdate",
          "type": "method",
          "parameters": [
            "recordId"
          ],
          "line": 295,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 307,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testDelete",
          "type": "method",
          "parameters": [
            "recordId"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testValidationSystem",
          "type": "method",
          "parameters": [],
          "line": 332,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 357,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testPerformance",
          "type": "method",
          "parameters": [],
          "line": 368,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "performance.memory"
          ],
          "line": 388,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 395,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateSummary",
          "type": "method",
          "parameters": [
            "tests",
            "totalTime"
          ],
          "line": 406,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "displayResults",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 427,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.error"
          ],
          "line": 443,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.issues?.length > 0"
          ],
          "line": 447,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.tables"
          ],
          "line": 452,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.operations"
          ],
          "line": 458,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.metrics"
          ],
          "line": 464,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.summary.overall_status === 'NEEDS_ATTENTION'"
          ],
          "line": 473,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.summary.overall_status === 'GOOD'"
          ],
          "line": 475,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "process.env.NODE_ENV === 'development'"
          ],
          "line": 494,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "document.readyState === 'complete'"
          ],
          "line": 496,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/interactiveHelper.js": [
        {
          "name": "useHelp",
          "type": "arrow",
          "parameters": [],
          "line": 8,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "HelpProvider",
          "type": "arrow",
          "parameters": [
            "{ children }"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hideHelp",
          "type": "arrow",
          "parameters": [],
          "line": 282,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "addSmartAlert",
          "type": "arrow",
          "parameters": [
            "alert"
          ],
          "line": 286,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "removeSmartAlert",
          "type": "arrow",
          "parameters": [
            "alertId"
          ],
          "line": 290,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "SmartAlertSystem",
          "type": "arrow",
          "parameters": [
            "{ alerts",
            "onRemove }"
          ],
          "line": 313,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ContextualTooltip",
          "type": "arrow",
          "parameters": [
            "{ tooltip",
            "onClose }"
          ],
          "line": 337,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "HelpButton",
          "type": "arrow",
          "parameters": [
            "{ fieldId",
            "size = 'small'",
            "variant = 'icon' }"
          ],
          "line": 392,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleClick",
          "type": "arrow",
          "parameters": [],
          "line": 395,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "SmartValidationAlert",
          "type": "arrow",
          "parameters": [
            "{ validation",
            "onAction }"
          ],
          "line": 416,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ProgressIndicator",
          "type": "arrow",
          "parameters": [
            "{ currentStep",
            "totalSteps",
            "stepNames = [] }"
          ],
          "line": 433,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "InlineHelper",
          "type": "arrow",
          "parameters": [
            "{ fieldId",
            "userContext",
            "children }"
          ],
          "line": 484,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "RealTimeValidator",
          "type": "arrow",
          "parameters": [
            "{ fieldId",
            "value",
            "onValidation }"
          ],
          "line": 535,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "AutoCompleteField",
          "type": "arrow",
          "parameters": [
            "{ fieldId",
            "value",
            "onChange",
            "userContext",
            "...props }"
          ],
          "line": 634,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "handleSuggestionClick",
          "type": "arrow",
          "parameters": [
            "suggestion"
          ],
          "line": 658,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!context"
          ],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 17,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "loadHelpContent",
          "type": "method",
          "parameters": [],
          "line": 23,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 38,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getContextualHelp",
          "type": "method",
          "parameters": [
            "fieldId",
            "userContext = {}"
          ],
          "line": 44,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!helpItem"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "userContext.industry && helpItem.industry_specific"
          ],
          "line": 53,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "industryHelp"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "userContext.ratType && helpItem.type_specific"
          ],
          "line": 61,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeHelp"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getDefaultHelp",
          "type": "method",
          "parameters": [
            "fieldId"
          ],
          "line": 82,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logHelpUsage",
          "type": "method",
          "parameters": [
            "fieldId",
            "userId"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getSmartSuggestions",
          "type": "method",
          "parameters": [
            "fieldId",
            "currentValue",
            "context"
          ],
          "line": 120,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "trackFieldProgress",
          "type": "method",
          "parameters": [
            "fieldId",
            "userId",
            "completed",
            "timeSpent"
          ],
          "line": 137,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getPersonalizedTips",
          "type": "method",
          "parameters": [
            "userId",
            "currentStep"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!userStats || userStats.help_usage_count < 3"
          ],
          "line": 165,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "userStats?.average_time_per_step > 300"
          ],
          "line": 173,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 185,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStepSpecificTips",
          "type": "method",
          "parameters": [
            "step",
            "userStats"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "updateUserHelpStats",
          "type": "method",
          "parameters": [
            "userId",
            "action"
          ],
          "line": 219,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "fetchError && fetchError.code === 'PGRST116'"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "existing"
          ],
          "line": 240,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 254,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "variant === 'icon'"
          ],
          "line": 399,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation && !validation.valid"
          ],
          "line": 420,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "fieldId"
          ],
          "line": 490,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tips.length > 0"
          ],
          "line": 493,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && value.length > 3"
          ],
          "line": 540,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "onValidation"
          ],
          "line": 545,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 548,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 575,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "loadTemplates",
          "type": "method",
          "parameters": [],
          "line": 579,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 592,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "suggestCompletion",
          "type": "method",
          "parameters": [
            "fieldId",
            "partialValue",
            "context"
          ],
          "line": 597,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 611,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "recordCompletion",
          "type": "method",
          "parameters": [
            "fieldId",
            "finalValue",
            "wasSuggested",
            "userId"
          ],
          "line": 617,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 628,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && value.length > 10"
          ],
          "line": 644,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/logicAuditor.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 5,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "initializeRules",
          "type": "method",
          "parameters": [],
          "line": 14,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rat of ratsAltoRiesgo"
          ],
          "line": 23,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tieneEIPD"
          ],
          "line": 25,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const eipd of eipds"
          ],
          "line": 44,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "eipd.status === 'APROBADO' && tareasEIPD.length === 0"
          ],
          "line": 48,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rat of rats"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!estaEnInventario"
          ],
          "line": 70,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const tarea of tareasPendientes"
          ],
          "line": 90,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tarea.rat_id"
          ],
          "line": 91,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratExiste"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "auditarSistemaCompleto",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isAuditing"
          ],
          "line": 111,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rule of this.sequenceRules"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "inconsistencias.length === 0"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "ruleError"
          ],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 175,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "getAllCounts",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 186,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRATsByRisk",
          "type": "method",
          "parameters": [
            "tenantId",
            "riskLevel"
          ],
          "line": 209,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getEIPDsByRATs",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratIds"
          ],
          "line": 221,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getAllRATs",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 234,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getInventarioRATs",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 245,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getEIPDs",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 255,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getDPOTasksByEIPD",
          "type": "method",
          "parameters": [
            "tenantId",
            "eipdId"
          ],
          "line": 265,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getDPOPendingTasks",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 276,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkRATExists",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 287,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [
            "inconsistencies"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const category of inconsistencies"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const issue of category.issues || []"
          ],
          "line": 303,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "issue.problema"
          ],
          "line": 304,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "autoFixInconsistencies",
          "type": "method",
          "parameters": [
            "tenantId",
            "auditReport"
          ],
          "line": 342,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const recommendation of auditReport.recommendations || []"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "recommendation.action"
          ],
          "line": 353,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 374,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "autoGenerateEIPDForRAT",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 426,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "autoRegisterRATInInventory",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 432,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 472,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "cleanupOrphanTask",
          "type": "method",
          "parameters": [
            "tenantId",
            "taskId"
          ],
          "line": 478,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 499,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "saveAuditReport",
          "type": "method",
          "parameters": [
            "auditReport"
          ],
          "line": 506,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 530,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "startPeriodicAudit",
          "type": "method",
          "parameters": [
            "tenantId",
            "intervalMinutes = 30"
          ],
          "line": 537,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "auditReport.summary.failed_rules > 0"
          ],
          "line": 545,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 550,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateBeforeAction",
          "type": "method",
          "parameters": [
            "tenantId",
            "action",
            "data"
          ],
          "line": 557,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "action"
          ],
          "line": 560,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateRATCanBeClosed",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 572,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rat.nombre_actividad || !rat.base_legal"
          ],
          "line": 578,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.nivel_riesgo === 'ALTO'"
          ],
          "line": 583,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "eipds.length === 0"
          ],
          "line": 585,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!eipds.some(e => e.status === 'APROBADO')"
          ],
          "line": 587,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tareasDPO.some(t => t.estado === 'completada')"
          ],
          "line": 594,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 604,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRATById",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 612,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "getDPOTasksByRAT",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 624,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/moduleValidator.js": [
        {
          "name": "TestWrapper",
          "type": "arrow",
          "parameters": [
            "{ children }"
          ],
          "line": 22,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 31,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateAllModules",
          "type": "method",
          "parameters": [],
          "line": 41,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const module of modules"
          ],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateModule",
          "type": "method",
          "parameters": [
            "moduleInfo"
          ],
          "line": 76,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "passedTests === totalTests"
          ],
          "line": 125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "passedTests >= totalTests * 0.7"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testModuleImport",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!moduleExists"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!syntaxValid"
          ],
          "line": 177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!importsValid"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 190,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testComponentStructure",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!hasDefaultExport"
          ],
          "line": 216,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!hooksValid"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!jsxStructureValid"
          ],
          "line": 228,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 235,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testComponentProps",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 247,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!propsValid"
          ],
          "line": 261,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!callbacksValid"
          ],
          "line": 267,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testBasicRender",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 286,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!renderResult.success"
          ],
          "line": 300,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!elementsValid"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 313,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testSystemIntegration",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 325,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!routingValid"
          ],
          "line": 339,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!authValid"
          ],
          "line": 345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!apiValid"
          ],
          "line": 351,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testAccessibility",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 370,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ariaValid"
          ],
          "line": 384,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!keyboardValid"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testPerformance",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 410,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "renderTime > 100"
          ],
          "line": 424,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "memoryLeaks.length > 0"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 437,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateSpecificModule",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 450,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const test of tests"
          ],
          "line": 474,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 478,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testDataSubjectRightsSpecific",
          "type": "method",
          "parameters": [],
          "line": 493,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "testLegalUpdatesMonitorSpecific",
          "type": "method",
          "parameters": [],
          "line": 505,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "testRATSearchFilterSpecific",
          "type": "method",
          "parameters": [],
          "line": 517,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "testRATVersionControlSpecific",
          "type": "method",
          "parameters": [],
          "line": 529,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkStepperNavigation",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 544,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkFormValidation",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 553,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkSearchFunctionality",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 562,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkVersionHistory",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 571,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkFileExists",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 583,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkJSXSyntax",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 588,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkRequiredImports",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 593,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "checkDefaultExport",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 598,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "simulateRender",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 603,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "measureRenderTime",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 608,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "generateValidationReport",
          "type": "method",
          "parameters": [],
          "line": 616,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [],
          "line": 644,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.criticalErrors.length > 0"
          ],
          "line": 647,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.warnings.length > 3"
          ],
          "line": 655,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "failedModules.length > 0"
          ],
          "line": 664,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "printValidationReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 675,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const module of report.modules"
          ],
          "line": 689,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "module.errors.length > 0"
          ],
          "line": 699,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.recommendations.length > 0"
          ],
          "line": 706,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "quickValidation",
          "type": "method",
          "parameters": [],
          "line": 719,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const moduleName of recentModules"
          ],
          "line": 730,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 744,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 771,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/preventiveAI_DISABLED.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 14,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "autoCorrectInRealTime",
          "type": "method",
          "parameters": [],
          "line": 21,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "autoCreateDPOApprovalTask",
          "type": "method",
          "parameters": [],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateReport",
          "type": "method",
          "parameters": [],
          "line": 32,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/ratEditModeFix.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 9,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupEditModeEnhancements",
          "type": "method",
          "parameters": [],
          "line": 18,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "detectMissingFeatures",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "viewMode === 'edit'"
          ],
          "line": 82,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentStep !== undefined && currentStep >= 0"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasStepNavigation(componentProps)"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "currentStep"
          ],
          "line": 91,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullEmpresaOptions(componentProps)"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullCategoriasOptions(componentProps)"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullFinalidadesOptions(componentProps)"
          ],
          "line": 103,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullLegitimacionOptions(componentProps)"
          ],
          "line": 108,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullTransferenciasOptions(componentProps)"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullSeguridadOptions(componentProps)"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasStepNavigation",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasFullEmpresaOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 141,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasFullCategoriasOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 157,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasFullFinalidadesOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasFullLegitimacionOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasFullTransferenciasOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 188,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "hasFullSeguridadOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 197,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "applyEditModeFixes",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missing.length === 0"
          ],
          "line": 210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "feature"
          ],
          "line": 217,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fixWizardNavigation",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 252,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!componentProps.handleNextStep"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentStep < steps.length - 1"
          ],
          "line": 259,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!componentProps.handleBackStep"
          ],
          "line": 265,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentStep > 0"
          ],
          "line": 268,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fixEmpresaDataEditing",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable"
          ],
          "line": 286,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fixCategoriasSelection",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.categorias"
          ],
          "line": 315,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 327,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fixFinalidadesOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.finalidades"
          ],
          "line": 343,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fixLegitimacionOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 360,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.legitimacion"
          ],
          "line": 365,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 371,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fixTransferenciasOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 382,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.transferencias"
          ],
          "line": 387,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "fixSeguridadOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 408,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.medidas_seguridad"
          ],
          "line": 413,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 423,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateEditModeReport",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 434,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [
            "missing"
          ],
          "line": 452,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missing.includes('WIZARD_NAVIGATION')"
          ],
          "line": 455,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missing.includes('EMPRESA_DATA_EDITING')"
          ],
          "line": 459,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missing.length > 3"
          ],
          "line": 463,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/rateLimiter.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 6,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isAllowed",
          "type": "method",
          "parameters": [
            "key",
            "action = 'default'"
          ],
          "line": 21,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isBlocked(compositeKey)"
          ],
          "line": 25,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.checkRateLimit(key)"
          ],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "recordAttempt",
          "type": "method",
          "parameters": [
            "key",
            "action = 'default'",
            "success = false"
          ],
          "line": 41,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.attempts.has(compositeKey)"
          ],
          "line": 45,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "failedAttempts.length >= this.config.maxAttempts"
          ],
          "line": 62,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isBlocked",
          "type": "method",
          "parameters": [
            "key"
          ],
          "line": 73,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.blocked.has(key)"
          ],
          "line": 74,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "now - blockTime > this.config.blockDuration"
          ],
          "line": 81,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "block",
          "type": "method",
          "parameters": [
            "key"
          ],
          "line": 92,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "checkRateLimit",
          "type": "method",
          "parameters": [
            "key"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.requestCounts.has(rateKey)"
          ],
          "line": 105,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "count >= this.config.maxRequestsPerMinute"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "cleanupOldCounts",
          "type": "method",
          "parameters": [],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [key] of this.requestCounts"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentMinute - keyMinute > 5"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getBlockTimeRemaining",
          "type": "method",
          "parameters": [
            "key",
            "action = 'default'"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.isBlocked(compositeKey)"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "clearAttempts",
          "type": "method",
          "parameters": [
            "key",
            "action = 'default'"
          ],
          "line": 156,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStats",
          "type": "method",
          "parameters": [],
          "line": 165,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/secureLogger.js": [
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(obj)"
          ],
          "line": 21,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [key",
            "value] of Object.entries(obj)"
          ],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "SecureLogger.SENSITIVE_FIELDS.some(field => keyLower.includes(field))"
          ],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof value === 'object' && value !== null"
          ],
          "line": 34,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "strValue.length > 20"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/secureTokens.js": [
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < data.length; i++"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < input.length; i++"
          ],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "payload.exp && payload.exp < Math.floor(Date.now() / 1000)"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 89,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/semanticValidator.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 4,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "loadValidationRules",
          "type": "method",
          "parameters": [],
          "line": 9,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getDefaultRules",
          "type": "method",
          "parameters": [],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateFinalidad",
          "type": "method",
          "parameters": [
            "finalidad",
            "baseJuridica",
            "categoriasDatos = []"
          ],
          "line": 53,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.validationRules"
          ],
          "line": 67,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rule of this.validationRules"
          ],
          "line": 71,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.matchesPattern(finalidadText",
            "rule.pattern)"
          ],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!isValidBase"
          ],
          "line": 75,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rule.severity === 'error'"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rule.severity === 'warning'"
          ],
          "line": 87,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!coherenceCheck.coherent"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "complexityCheck.needsImprovement"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "matchesPattern",
          "type": "method",
          "parameters": [
            "text",
            "pattern"
          ],
          "line": 111,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "pattern instanceof RegExp"
          ],
          "line": 112,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "checkBaseJuridica",
          "type": "method",
          "parameters": [
            "currentBase",
            "requiredBase"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "checkCoherence",
          "type": "method",
          "parameters": [
            "finalidadText",
            "categoriasDatos"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "sensitiveDataDetected && routineProcessDetected"
          ],
          "line": 141,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeComplexity",
          "type": "method",
          "parameters": [
            "finalidadText"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "wordCount < 10"
          ],
          "line": 158,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasVagueTerms && !hasSpecificTerms"
          ],
          "line": 167,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "suggestImprovements",
          "type": "method",
          "parameters": [
            "finalidadText",
            "baseJuridica"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && templates?.length > 0"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "extractKeywords",
          "type": "method",
          "parameters": [
            "text"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isStopWord",
          "type": "method",
          "parameters": [
            "word"
          ],
          "line": 215,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "saveFinalidadTemplate",
          "type": "method",
          "parameters": [
            "finalidad",
            "baseJuridica",
            "categoriasDatos",
            "userId"
          ],
          "line": 220,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 243,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateAndSuggest",
          "type": "method",
          "parameters": [
            "finalidad",
            "baseJuridica",
            "categoriasDatos",
            "userId"
          ],
          "line": 248,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.valid && finalidad.length > 50"
          ],
          "line": 252,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/smartDeduplication.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 7,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeRAT",
          "type": "method",
          "parameters": [
            "newRAT",
            "existingRATs"
          ],
          "line": 16,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const existingRAT of existingRATs"
          ],
          "line": 19,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity.score > this.similarityThreshold"
          ],
          "line": 22,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateComprehensiveSimilarity",
          "type": "method",
          "parameters": [
            "ratA",
            "ratB"
          ],
          "line": 41,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "compareResponsable",
          "type": "method",
          "parameters": [
            "respA",
            "respB"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "respA.rut && respB.rut && respA.rut === respB.rut"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "compareFinalidad",
          "type": "method",
          "parameters": [
            "finalidadA",
            "finalidadB"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "compareKeywords",
          "type": "method",
          "parameters": [
            "textA",
            "textB"
          ],
          "line": 149,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "detectBusinessCategories",
          "type": "method",
          "parameters": [
            "text",
            "keywords"
          ],
          "line": 167,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [category",
            "words] of Object.entries(keywords)"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasKeyword"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeBusinessContext",
          "type": "method",
          "parameters": [
            "textA",
            "textB"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [context",
            "pattern] of Object.entries(patterns)"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasA === hasB"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "compareArrays",
          "type": "method",
          "parameters": [
            "arrayA",
            "arrayB"
          ],
          "line": 210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateStringSimilarity",
          "type": "method",
          "parameters": [
            "strA",
            "strB"
          ],
          "line": 226,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "cleanText",
          "type": "method",
          "parameters": [
            "text"
          ],
          "line": 244,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "levenshteinDistance",
          "type": "method",
          "parameters": [
            "strA",
            "strB"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i <= strB.length; i++"
          ],
          "line": 259,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let j = 0; j <= strA.length; j++"
          ],
          "line": 263,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 1; i <= strB.length; i++"
          ],
          "line": 267,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let j = 1; j <= strA.length; j++"
          ],
          "line": 268,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "strB.charAt(i - 1) === strA.charAt(j - 1)"
          ],
          "line": 269,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "compareTransferencias",
          "type": "method",
          "parameters": [
            "transferA",
            "transferB"
          ],
          "line": 287,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "transferA.existe === transferB.existe"
          ],
          "line": 295,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "transferA.existe && transferB.existe"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "compareBaseJuridica",
          "type": "method",
          "parameters": [
            "baseA",
            "baseB"
          ],
          "line": 314,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "compareFuenteDatos",
          "type": "method",
          "parameters": [
            "fuenteA",
            "fuenteB"
          ],
          "line": 326,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "detectConflicts",
          "type": "method",
          "parameters": [
            "similarities"
          ],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarities.categorias_datos > 0.9 && similarities.finalidad > 0.7"
          ],
          "line": 353,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "assessMergeOpportunity",
          "type": "method",
          "parameters": [
            "similarities"
          ],
          "line": 367,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarities.responsable > 0.9 && similarities.finalidad > 0.6"
          ],
          "line": 379,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "determineAction",
          "type": "method",
          "parameters": [
            "similarities"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarities.length === 0"
          ],
          "line": 398,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "maxSimilarity > 0.95"
          ],
          "line": 408,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "maxSimilarity > 0.85"
          ],
          "line": 417,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getRecommendation",
          "type": "method",
          "parameters": [
            "score",
            "details"
          ],
          "line": 437,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "score > 0.95"
          ],
          "line": 438,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "score > 0.85"
          ],
          "line": 446,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "score > 0.7"
          ],
          "line": 455,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "highlightDifferences",
          "type": "method",
          "parameters": [
            "details"
          ],
          "line": 473,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "details.finalidad < 0.8"
          ],
          "line": 476,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "details.categorias_datos < 0.8"
          ],
          "line": 480,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "details.base_juridica < 0.5"
          ],
          "line": 484,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "details.transferencias < 0.8"
          ],
          "line": 488,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "analyzeDepartmentPatterns",
          "type": "method",
          "parameters": [
            "ratsByDepartment"
          ],
          "line": 498,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [dept",
            "rats] of Object.entries(ratsByDepartment)"
          ],
          "line": 501,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "findCommonFinalidades",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 517,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "findDuplicateRisks",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 539,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < rats.length; i++"
          ],
          "line": 542,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let j = i + 1; j < rats.length; j++"
          ],
          "line": 543,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity > 0.8"
          ],
          "line": 546,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateBasicSimilarity",
          "type": "method",
          "parameters": [
            "ratA",
            "ratB"
          ],
          "line": 563,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "findOptimizationOpportunities",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 580,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "group.length > 1"
          ],
          "line": 587,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "groupSimilarRATs",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 603,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity > 0.7"
          ],
          "line": 617,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarRATs.length > 1"
          ],
          "line": 623,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateImprovementSuggestions",
          "type": "method",
          "parameters": [
            "rat",
            "similarRATs"
          ],
          "line": 634,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarRATs.length > 0"
          ],
          "line": 638,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "extractBestPractices",
          "type": "method",
          "parameters": [
            "similarRATs"
          ],
          "line": 669,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "completeness.length > 0 && completeness[0].score > 0.8"
          ],
          "line": 678,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "bestRAT.finalidad?.descripcion?.length > 100"
          ],
          "line": 681,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "calculateCompletenessScore",
          "type": "method",
          "parameters": [
            "rat"
          ],
          "line": 697,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat[field]"
          ],
          "line": 709,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof rat[field] === 'object' && Object.keys(rat[field]).length > 2"
          ],
          "line": 713,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "detectMissingFields",
          "type": "method",
          "parameters": [
            "rat"
          ],
          "line": 726,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('marketing') && !rat.transferencias_internacionales?.existe"
          ],
          "line": 732,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "some",
          "type": "method",
          "parameters": [
            "c => c.includes('laboral')))"
          ],
          "line": 741,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "checkForDuplicates",
          "type": "method",
          "parameters": [
            "newRAT",
            "existingRATs"
          ],
          "line": 755,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 769,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/smartSupabaseClient.js": [
        {
          "name": "logSupabaseActivity",
          "type": "arrow",
          "parameters": [],
          "line": 438,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 12,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "from",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 22,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "auth",
          "type": "method",
          "parameters": [],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStats",
          "type": "method",
          "parameters": [],
          "line": 37,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "tableName",
            "originalBuilder",
            "smartClient"
          ],
          "line": 50,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "select",
          "type": "method",
          "parameters": [
            "columns = '*'",
            "options = {}"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "eq",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "neq",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 77,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "gt",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 82,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "gte",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 87,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "lt",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 92,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "lte",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "like",
          "type": "method",
          "parameters": [
            "column",
            "pattern"
          ],
          "line": 102,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "ilike",
          "type": "method",
          "parameters": [
            "column",
            "pattern"
          ],
          "line": 107,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "in",
          "type": "method",
          "parameters": [
            "column",
            "values"
          ],
          "line": 112,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "is",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "not",
          "type": "method",
          "parameters": [
            "column",
            "operator",
            "value"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "limit",
          "type": "method",
          "parameters": [
            "count"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "order",
          "type": "method",
          "parameters": [
            "column",
            "options = {}"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "range",
          "type": "method",
          "parameters": [
            "from",
            "to"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "single",
          "type": "method",
          "parameters": [],
          "line": 148,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "maybeSingle",
          "type": "method",
          "parameters": [],
          "line": 155,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "then",
          "type": "method",
          "parameters": [
            "resolve",
            "reject"
          ],
          "line": 162,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "executeWithFallback",
          "type": "method",
          "parameters": [
            "executionType"
          ],
          "line": 174,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "attempt < 3"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "executionType"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "attempt > 0"
          ],
          "line": 196,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 203,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isRecoverableError(error) && attempt < 3"
          ],
          "line": 210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "buildQuery",
          "type": "method",
          "parameters": [
            "attemptNumber"
          ],
          "line": 229,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.queryParts.select"
          ],
          "line": 233,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const filter of filters"
          ],
          "line": 240,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "filter.type"
          ],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.queryParts.options.limit"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.queryParts.options.order"
          ],
          "line": 283,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.queryParts.options.range"
          ],
          "line": 289,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getFiltersForAttempt",
          "type": "method",
          "parameters": [
            "attemptNumber"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "attemptNumber"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isRecoverableError",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 327,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSafeEmptyResult",
          "type": "method",
          "parameters": [
            "executionType"
          ],
          "line": 346,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "executionType"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "insert",
          "type": "method",
          "parameters": [
            "values",
            "options = {}"
          ],
          "line": 359,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 367,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isRecoverableError(error) && Array.isArray(values)"
          ],
          "line": 371,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "retryError"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "update",
          "type": "method",
          "parameters": [
            "values",
            "options = {}"
          ],
          "line": 403,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 408,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "delete",
          "type": "method",
          "parameters": [
            "options = {}"
          ],
          "line": 418,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 423,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/supabaseAuditor.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "runCompleteAudit",
          "type": "method",
          "parameters": [],
          "line": 19,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of tablesToTest"
          ],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testBasicConnectivity",
          "type": "method",
          "parameters": [],
          "line": 52,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 61,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testTableCRUD",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 71,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 92,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.code === '42P01'"
          ],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data?.[0]"
          ],
          "line": 107,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 112,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "result.exists"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testInsert",
          "type": "method",
          "parameters": [
            "tableName",
            "result"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data?.[0]?.id"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 152,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "testUpdateDelete",
          "type": "method",
          "parameters": [
            "tableName",
            "recordId",
            "result"
          ],
          "line": 161,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!updateError"
          ],
          "line": 169,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 176,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!deleteError"
          ],
          "line": 187,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "generateTestData",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "showSummary",
          "type": "method",
          "parameters": [],
          "line": 260,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.errors.length > 0"
          ],
          "line": 269,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSummary",
          "type": "method",
          "parameters": [],
          "line": 282,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [tableName",
            "result] of Object.entries(this.results)"
          ],
          "line": 286,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "result.select && result.insert"
          ],
          "line": 289,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 307,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/supabaseEmpresaPersistence.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "guardarDatosEmpresa",
          "type": "method",
          "parameters": [
            "datosEmpresa",
            "opciones = {}"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!validacion.valid"
          ],
          "line": 31,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "selectError && selectError.code !== 'PGRST116'"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "existing"
          ],
          "line": 70,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "notificar"
          ],
          "line": 95,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "cargarDatosEmpresa",
          "type": "method",
          "parameters": [
            "opciones = {}"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.code === 'PGRST116'"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "validarDatos",
          "type": "method",
          "parameters": [
            "datos"
          ],
          "line": 164,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!datos || typeof datos !== 'object'"
          ],
          "line": 174,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!datos[campo] || typeof datos[campo] !== 'string' || datos[campo].trim().length === 0"
          ],
          "line": 181,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "camposFaltantes.length > 0"
          ],
          "line": 186,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datos.rut && !this.validarFormatoRUT(datos.rut)"
          ],
          "line": 195,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datos.email_empresa && !this.validarEmail(datos.email_empresa)"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validarEmail",
          "type": "method",
          "parameters": [
            "email"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validarFormatoRUT",
          "type": "method",
          "parameters": [
            "rut"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "actualizarDatosEmpresa",
          "type": "method",
          "parameters": [
            "nuevosdatos",
            "opciones = {}"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosActuales.success && datosActuales.datos"
          ],
          "line": 233,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "limpiarDatos",
          "type": "method",
          "parameters": [
            "opciones = {}"
          ],
          "line": 248,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "notificar"
          ],
          "line": 263,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "existenDatos",
          "type": "method",
          "parameters": [
            "opciones = {}"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "agregarListener",
          "type": "method",
          "parameters": [
            "callback"
          ],
          "line": 287,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "notificarCambio",
          "type": "method",
          "parameters": [
            "tipo",
            "datos"
          ],
          "line": 298,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "autoCompletarFormulario",
          "type": "method",
          "parameters": [
            "setValues",
            "opciones = {}"
          ],
          "line": 311,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "resultado.success && resultado.datos"
          ],
          "line": 319,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "valor && (sobreescribir || !setValues[campo])"
          ],
          "line": 323,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof setValues === 'function'"
          ],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setValues[campo]"
          ],
          "line": 326,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "notificarUsuario"
          ],
          "line": 332,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/supabaseErrorLogger.js": [
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "logCriticalError",
          "type": "method",
          "parameters": [
            "errorCode",
            "errorData",
            "source = 'UNKNOWN'",
            "category = 'CRITICAL'"
          ],
          "line": 25,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "logMediumError",
          "type": "method",
          "parameters": [
            "errorCode",
            "errorData",
            "source = 'UNKNOWN'",
            "category = 'MEDIUM'"
          ],
          "line": 40,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "logInfo",
          "type": "method",
          "parameters": [
            "infoCode",
            "infoData",
            "source = 'UNKNOWN'",
            "category = 'INFO'"
          ],
          "line": 52,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "createLogEntry",
          "type": "method",
          "parameters": [
            "level",
            "code",
            "data",
            "source",
            "category"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "addToBuffer",
          "type": "method",
          "parameters": [
            "logEntry"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.errorBuffer.has(key)"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.errorBuffer.get(key).length >= this.batchSize"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "saveToSupabase",
          "type": "method",
          "parameters": [
            "logEntries"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "flushBufferToSupabase",
          "type": "method",
          "parameters": [
            "bufferKey"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "flushAllBuffersToSupabase",
          "type": "method",
          "parameters": [],
          "line": 149,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [key",
            "entries] of this.errorBuffer"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "startAutoFlush",
          "type": "method",
          "parameters": [],
          "line": 169,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "addToMemoryFallback",
          "type": "method",
          "parameters": [
            "logEntry"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.errorBuffer.has(fallbackKey)"
          ],
          "line": 181,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "fallbackEntries.length > 100"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getLoggerStats",
          "type": "method",
          "parameters": [],
          "line": 197,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [key",
            "entries] of this.errorBuffer"
          ],
          "line": 205,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "key === 'memory_fallback'"
          ],
          "line": 209,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "downloadLogsFromSupabase",
          "type": "method",
          "parameters": [
            "options = {}"
          ],
          "line": 220,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 244,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "downloadLogsFile",
          "type": "method",
          "parameters": [
            "options = {}"
          ],
          "line": 259,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!result.success || result.logs.length === 0"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 283,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "formatLogsForFile",
          "type": "method",
          "parameters": [
            "logs"
          ],
          "line": 291,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "log.error_data && log.error_data !== log.error_message"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "cleanupOldLogs",
          "type": "method",
          "parameters": [
            "daysToKeep = 30"
          ],
          "line": 320,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 331,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ],
      "/frontend/src/utils/supabaseRLSGuard.js": [
        {
          "name": "safeSupabaseQuery",
          "type": "arrow",
          "parameters": [
            "tableName",
            "queryBuilder",
            "options"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateSupabaseQuery",
          "type": "arrow",
          "parameters": [
            "tableName",
            "queryType",
            "filters"
          ],
          "line": 353,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getSupabasePermissions",
          "type": "arrow",
          "parameters": [],
          "line": 357,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "init",
          "type": "method",
          "parameters": [],
          "line": 20,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 29,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "loadTableSchemas",
          "type": "method",
          "parameters": [],
          "line": 37,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of mainTables"
          ],
          "line": 47,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && data"
          ],
          "line": 56,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 62,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "err"
          ],
          "line": 69,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "testBasicPermissions",
          "type": "method",
          "parameters": [],
          "line": 82,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [table",
            "schema] of this.tableSchemas"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "schema.columns?.includes('tenant_id') && tenantId"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "permissions.select"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "validateQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "queryType",
            "filters = {}"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!permissions || !schema"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!permissions[queryType]"
          ],
          "line": 145,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filters.tenant_id && !permissions.tenant_filtered"
          ],
          "line": 150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const column of Object.keys(filters)"
          ],
          "line": 160,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!schema.columns?.includes(column)"
          ],
          "line": 161,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "safeQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "queryBuilder",
            "options = {}"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "attempt <= maxRetries"
          ],
          "line": 182,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isRLSError(error) && allowFallback && attempt <= maxRetries"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "attempt === 1"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "fallbackError"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "attempt === 2"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "simpleError"
          ],
          "line": 219,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "isRLSError",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 236,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "removeTenan_idFromQuery",
          "type": "method",
          "parameters": [
            "originalQueryBuilder"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "simplifyQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "originalQueryBuilder"
          ],
          "line": 257,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false
        },
        {
          "name": "generateTestRecord",
          "type": "method",
          "parameters": [
            "tableName",
            "columns"
          ],
          "line": 266,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const column of columns || []"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "column.includes('email')"
          ],
          "line": 275,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "column.includes('tenant_id')"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "column.includes('nombre')"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getCurrentUser",
          "type": "method",
          "parameters": [],
          "line": 289,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getCurrentTenantId",
          "type": "method",
          "parameters": [],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "cacheSuccessfulQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "queryKey"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "cacheFailedQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "error"
          ],
          "line": 304,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "setupQueryInterceptor",
          "type": "method",
          "parameters": [],
          "line": 316,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        },
        {
          "name": "getStatusReport",
          "type": "method",
          "parameters": [],
          "line": 325,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false
        }
      ]
    },
    "by_type": {
      "components": [
        {
          "name": "APIPartnersIntegration",
          "type": "arrow",
          "parameters": [],
          "line": 62,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/APIPartnersIntegration.js"
        },
        {
          "name": "generateUniqueId",
          "type": "arrow",
          "parameters": [],
          "line": 610,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/APIPartnersIntegration.js"
        },
        {
          "name": "generateSecureSecret",
          "type": "arrow",
          "parameters": [],
          "line": 614,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/APIPartnersIntegration.js"
        },
        {
          "name": "generateWebhookSecret",
          "type": "arrow",
          "parameters": [],
          "line": 620,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/APIPartnersIntegration.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "user?.is_superuser"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/APIPartnersIntegration.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 121,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/APIPartnersIntegration.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/APIPartnersIntegration.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "newPartner.webhook_url"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/APIPartnersIntegration.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/APIPartnersIntegration.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/APIPartnersIntegration.js"
        },
        {
          "name": "AdminDashboard",
          "type": "arrow",
          "parameters": [],
          "line": 60,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "getEstadoColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "getRolColor",
          "type": "arrow",
          "parameters": [
            "rol"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "getGravedadColor",
          "type": "arrow",
          "parameters": [
            "gravedad"
          ],
          "line": 164,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "handleAddHolding",
          "type": "arrow",
          "parameters": [],
          "line": 174,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "handleEditHolding",
          "type": "arrow",
          "parameters": [
            "holding"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "handleAddUser",
          "type": "arrow",
          "parameters": [],
          "line": 184,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "HoldingCard",
          "type": "arrow",
          "parameters": [
            "{ holding",
            "onEdit",
            "onView }"
          ],
          "line": 610,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "MetricasComplianceCard",
          "type": "arrow",
          "parameters": [
            "{ metricas",
            "holdings }"
          ],
          "line": 707,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "MetricasOperacionalesCard",
          "type": "arrow",
          "parameters": [
            "{ metricas }"
          ],
          "line": 765,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "MetricasTendenciasCard",
          "type": "arrow",
          "parameters": [],
          "line": 818,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "AlertCard",
          "type": "arrow",
          "parameters": [
            "{ alerta",
            "holdings }"
          ],
          "line": 869,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "ConfiguracionSistema",
          "type": "arrow",
          "parameters": [
            "{ configuracion }"
          ],
          "line": 930,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "HoldingForm",
          "type": "arrow",
          "parameters": [
            "{ holding }"
          ],
          "line": 1116,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "getEstadoColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 1202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "getRolColor",
          "type": "arrow",
          "parameters": [
            "rol"
          ],
          "line": 1213,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "getGravedadColor",
          "type": "arrow",
          "parameters": [
            "gravedad"
          ],
          "line": 1224,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tenantId"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/AdminDashboard.js"
        },
        {
          "name": "CalendarView",
          "type": "arrow",
          "parameters": [],
          "line": 58,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "getViewStartDate",
          "type": "arrow",
          "parameters": [],
          "line": 167,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "getViewEndDate",
          "type": "arrow",
          "parameters": [],
          "line": 182,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "eventsData"
          ],
          "line": 197,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "navegarMes",
          "type": "arrow",
          "parameters": [
            "direccion"
          ],
          "line": 224,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "filtrarEventos",
          "type": "arrow",
          "parameters": [],
          "line": 234,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "getDaysInMonth",
          "type": "arrow",
          "parameters": [],
          "line": 243,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "renderCalendarHeader",
          "type": "arrow",
          "parameters": [],
          "line": 292,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "renderStatsCards",
          "type": "arrow",
          "parameters": [],
          "line": 344,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "renderCalendarGrid",
          "type": "arrow",
          "parameters": [],
          "line": 415,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "renderUpcomingEvents",
          "type": "arrow",
          "parameters": [],
          "line": 554,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "renderEventDialog",
          "type": "arrow",
          "parameters": [],
          "line": 635,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 159,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "viewMode"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "viewMode"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "direccion === 'prev'"
          ],
          "line": 226,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = startingDayOfWeek - 1; i >= 0; i--"
          ],
          "line": 254,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let day = 1; day <= daysInMonth; day++"
          ],
          "line": 264,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let day = 1; day <= remainingDays; day++"
          ],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "recurso_tipo"
          ],
          "line": 714,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "renderCalendarHeader",
          "type": "component",
          "parameters": [],
          "line": 292,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "renderStatsCards",
          "type": "component",
          "parameters": [],
          "line": 344,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "renderUpcomingEvents",
          "type": "component",
          "parameters": [],
          "line": 554,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "renderEventDialog",
          "type": "component",
          "parameters": [],
          "line": 635,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/CalendarView.js"
        },
        {
          "name": "ComplianceDashboard",
          "type": "arrow",
          "parameters": [
            "{ compact = false",
            "ratId = null }"
          ],
          "line": 45,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceDashboard.js"
        },
        {
          "name": "toggleSection",
          "type": "arrow",
          "parameters": [
            "section"
          ],
          "line": 77,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceDashboard.js"
        },
        {
          "name": "getScoreColor",
          "type": "arrow",
          "parameters": [
            "score"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceDashboard.js"
        },
        {
          "name": "getHealthIcon",
          "type": "arrow",
          "parameters": [],
          "line": 90,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceDashboard.js"
        },
        {
          "name": "MetricCard",
          "type": "arrow",
          "parameters": [
            "{ title",
            "value",
            "subtitle",
            "icon",
            "color",
            "alert = false }"
          ],
          "line": 377,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceDashboard.js"
        },
        {
          "name": "CompactDashboard",
          "type": "arrow",
          "parameters": [
            "{ averageScore",
            "highRiskCount",
            "hasAlerts",
            "loading",
            "onExpand }"
          ],
          "line": 414,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceDashboard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "compact"
          ],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceDashboard.js"
        },
        {
          "name": "ComplianceMetrics",
          "type": "arrow",
          "parameters": [],
          "line": 44,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "calcularMetricasGenerales",
          "type": "arrow",
          "parameters": [
            "ratsData"
          ],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "getComplianceColor",
          "type": "arrow",
          "parameters": [
            "score"
          ],
          "line": 340,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "getRiskSeverityColor",
          "type": "arrow",
          "parameters": [
            "severity"
          ],
          "line": 346,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "getPriorityColor",
          "type": "arrow",
          "parameters": [
            "priority"
          ],
          "line": 355,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 90,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratsCompletados.length > 0"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosSensiblesSinEIPD > 0"
          ],
          "line": 182,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "transferenciasInternacionales > 0"
          ],
          "line": 190,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "baseJuridicaUnclear > 0"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "plazosIndefinidos > 0"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 211,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratsError && ratsNoCertificados?.length > 0"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!dpoError && actividadesDPO?.length > 0"
          ],
          "line": 246,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!plazoError && sinPlazoConservacion?.length > 0"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "transferenciasConRiesgo.length > 0"
          ],
          "line": 282,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "severity"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "priority"
          ],
          "line": 356,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 364,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ComplianceMetrics.js"
        },
        {
          "name": "DPAGenerator",
          "type": "arrow",
          "parameters": [],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "seleccionarProveedor",
          "type": "arrow",
          "parameters": [
            "proveedor"
          ],
          "line": 268,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "generarContenidoDPA",
          "type": "arrow",
          "parameters": [],
          "line": 354,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "descargarDPA",
          "type": "arrow",
          "parameters": [],
          "line": 465,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "renderStepContent",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 475,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "renderContratoInfo",
          "type": "arrow",
          "parameters": [],
          "line": 496,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "renderResponsableInfo",
          "type": "arrow",
          "parameters": [],
          "line": 581,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "renderEncargadoInfo",
          "type": "arrow",
          "parameters": [],
          "line": 657,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "renderTratamientoInfo",
          "type": "arrow",
          "parameters": [],
          "line": 751,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "renderSeguridadInfo",
          "type": "arrow",
          "parameters": [],
          "line": 864,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "renderTransferenciasDerechos",
          "type": "arrow",
          "parameters": [],
          "line": 907,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "renderGenerarDPA",
          "type": "arrow",
          "parameters": [],
          "line": 991,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "getTextFieldStyles",
          "type": "arrow",
          "parameters": [],
          "line": 1069,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 159,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentTenant"
          ],
          "line": 193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 227,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!dpaData.contrato.nombre_acuerdo"
          ],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!dpaData.responsable.nombre_empresa || !dpaData.encargado.nombre_empresa"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 327,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "dbError"
          ],
          "line": 333,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 476,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "renderContratoInfo",
          "type": "component",
          "parameters": [],
          "line": 496,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "renderResponsableInfo",
          "type": "component",
          "parameters": [],
          "line": 581,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "renderEncargadoInfo",
          "type": "component",
          "parameters": [],
          "line": 657,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "renderTratamientoInfo",
          "type": "component",
          "parameters": [],
          "line": 751,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "renderSeguridadInfo",
          "type": "component",
          "parameters": [],
          "line": 864,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "renderTransferenciasDerechos",
          "type": "component",
          "parameters": [],
          "line": 907,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "renderGenerarDPA",
          "type": "component",
          "parameters": [],
          "line": 991,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "getTextFieldStyles",
          "type": "component",
          "parameters": [],
          "line": 1069,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DPAGenerator.js"
        },
        {
          "name": "DiagnosticCenter",
          "type": "arrow",
          "parameters": [],
          "line": 58,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DiagnosticCenter.js"
        },
        {
          "name": "setupErrorCapture",
          "type": "arrow",
          "parameters": [],
          "line": 91,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DiagnosticCenter.js"
        },
        {
          "name": "toggleContinuousTesting",
          "type": "arrow",
          "parameters": [],
          "line": 197,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DiagnosticCenter.js"
        },
        {
          "name": "getStatusIcon",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DiagnosticCenter.js"
        },
        {
          "name": "getStatusColor",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 228,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DiagnosticCenter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "intervalRef.current"
          ],
          "line": 85,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DiagnosticCenter.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const module of criticalModules"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/DiagnosticCenter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 134,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DiagnosticCenter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/DiagnosticCenter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 175,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/DiagnosticCenter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 190,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DiagnosticCenter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "continuousTesting"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DiagnosticCenter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "intervalRef.current"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DiagnosticCenter.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status?.toLowerCase()"
          ],
          "line": 215,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DiagnosticCenter.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status?.toLowerCase()"
          ],
          "line": 229,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/DiagnosticCenter.js"
        },
        {
          "name": "EIPDTemplates",
          "type": "arrow",
          "parameters": [],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/EIPDTemplates.js"
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "templatesData"
          ],
          "line": 327,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/EIPDTemplates.js"
        },
        {
          "name": "usarTemplate",
          "type": "arrow",
          "parameters": [
            "template"
          ],
          "line": 340,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/EIPDTemplates.js"
        },
        {
          "name": "filtrarTemplates",
          "type": "arrow",
          "parameters": [],
          "line": 381,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/EIPDTemplates.js"
        },
        {
          "name": "getRiskChip",
          "type": "arrow",
          "parameters": [
            "nivel"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/EIPDTemplates.js"
        },
        {
          "name": "getIndustryInfo",
          "type": "arrow",
          "parameters": [
            "industryId"
          ],
          "line": 401,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/EIPDTemplates.js"
        },
        {
          "name": "renderTemplateCards",
          "type": "arrow",
          "parameters": [],
          "line": 405,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/EIPDTemplates.js"
        },
        {
          "name": "renderPreviewDialog",
          "type": "arrow",
          "parameters": [],
          "line": 568,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/EIPDTemplates.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 292,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/EIPDTemplates.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 320,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/EIPDTemplates.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 375,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/EIPDTemplates.js"
        },
        {
          "name": "renderTemplateCards",
          "type": "component",
          "parameters": [],
          "line": 405,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/EIPDTemplates.js"
        },
        {
          "name": "renderPreviewDialog",
          "type": "component",
          "parameters": [],
          "line": 568,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/EIPDTemplates.js"
        },
        {
          "name": "EmpresaDataManager",
          "type": "arrow",
          "parameters": [
            "{ onDataUpdate",
            "existingData = {} }"
          ],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/EmpresaDataManager.js"
        },
        {
          "name": "handleSave",
          "type": "arrow",
          "parameters": [],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/EmpresaDataManager.js"
        },
        {
          "name": "handleAddPlataforma",
          "type": "arrow",
          "parameters": [
            "plataforma"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/EmpresaDataManager.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "onDataUpdate"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/EmpresaDataManager.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!nuevasPlataformas.find(p => p.nombre === plataforma.nombre)"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/EmpresaDataManager.js"
        },
        {
          "name": "FundamentosTecnicos",
          "type": "arrow",
          "parameters": [],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/FundamentosTecnicos.js"
        },
        {
          "name": "handleDownloadReport",
          "type": "arrow",
          "parameters": [],
          "line": 59,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/FundamentosTecnicos.js"
        },
        {
          "name": "GestionProveedores",
          "type": "arrow",
          "parameters": [],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "handleAddProveedor",
          "type": "arrow",
          "parameters": [],
          "line": 318,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "getRiskColor",
          "type": "arrow",
          "parameters": [
            "riesgo"
          ],
          "line": 376,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "generateDPATemplate",
          "type": "arrow",
          "parameters": [
            "proveedor"
          ],
          "line": 385,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "handleDownloadDPATemplate",
          "type": "arrow",
          "parameters": [
            "tipo"
          ],
          "line": 417,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "renderProveedoresTab",
          "type": "arrow",
          "parameters": [],
          "line": 537,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "renderDPATemplatesTab",
          "type": "arrow",
          "parameters": [],
          "line": 727,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 195,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "response.success && response.data.length > 0"
          ],
          "line": 209,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "retryResponse.success"
          ],
          "line": 219,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validacion.secure"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 291,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "user"
          ],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dialogType === 'add'"
          ],
          "line": 329,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "response.success"
          ],
          "line": 334,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dialogType === 'edit'"
          ],
          "line": 342,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "response.success"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 370,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "riesgo"
          ],
          "line": 377,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "plantilla"
          ],
          "line": 524,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "renderProveedoresTab",
          "type": "component",
          "parameters": [],
          "line": 537,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "renderDPATemplatesTab",
          "type": "component",
          "parameters": [],
          "line": 727,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/GestionProveedores.js"
        },
        {
          "name": "ImmutableAuditLog",
          "type": "arrow",
          "parameters": [],
          "line": 70,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "generateHash",
          "type": "arrow",
          "parameters": [
            "data"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "logsData"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "exportarAuditLogs",
          "type": "arrow",
          "parameters": [
            "formato"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "getActionChip",
          "type": "arrow",
          "parameters": [
            "accion"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "renderStatsCards",
          "type": "arrow",
          "parameters": [],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "renderAuditTable",
          "type": "arrow",
          "parameters": [],
          "line": 400,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "renderIntegrityPanel",
          "type": "arrow",
          "parameters": [],
          "line": 509,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "renderDetailDialog",
          "type": "arrow",
          "parameters": [],
          "line": 603,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < str.length; i++"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 152,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filters.usuario !== 'TODOS'"
          ],
          "line": 177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filters.accion !== 'TODAS'"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filters.fechaInicio"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filters.fechaFin"
          ],
          "line": 186,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < auditLogs.length; i++"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "renderStatsCards",
          "type": "component",
          "parameters": [],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "renderAuditTable",
          "type": "component",
          "parameters": [],
          "line": 400,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "renderIntegrityPanel",
          "type": "component",
          "parameters": [],
          "line": 509,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "renderDetailDialog",
          "type": "component",
          "parameters": [],
          "line": 603,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ImmutableAuditLog.js"
        },
        {
          "name": "Layout",
          "type": "declaration",
          "parameters": [
            "{ children }"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/Layout.js"
        },
        {
          "name": "handleDrawerToggle",
          "type": "arrow",
          "parameters": [],
          "line": 132,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/Layout.js"
        },
        {
          "name": "handleNavigation",
          "type": "arrow",
          "parameters": [
            "path"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/Layout.js"
        },
        {
          "name": "handleLogoutClick",
          "type": "arrow",
          "parameters": [],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/Layout.js"
        },
        {
          "name": "handleLogoutConfirm",
          "type": "arrow",
          "parameters": [],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/Layout.js"
        },
        {
          "name": "handleLogoutCancel",
          "type": "arrow",
          "parameters": [],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/Layout.js"
        },
        {
          "name": "Layout",
          "type": "method",
          "parameters": [
            "{ children }"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/Layout.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isMobile"
          ],
          "line": 138,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/Layout.js"
        },
        {
          "name": "LayoutSimple",
          "type": "declaration",
          "parameters": [
            "{ children }"
          ],
          "line": 32,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/LayoutSimple.js"
        },
        {
          "name": "handleMenu",
          "type": "arrow",
          "parameters": [
            "event"
          ],
          "line": 38,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/LayoutSimple.js"
        },
        {
          "name": "handleClose",
          "type": "arrow",
          "parameters": [],
          "line": 42,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/LayoutSimple.js"
        },
        {
          "name": "handleNavigation",
          "type": "arrow",
          "parameters": [
            "path"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/LayoutSimple.js"
        },
        {
          "name": "handleLogout",
          "type": "arrow",
          "parameters": [],
          "line": 51,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/LayoutSimple.js"
        },
        {
          "name": "NavigationButtons",
          "type": "arrow",
          "parameters": [
            "{ currentPath",
            "navigate }"
          ],
          "line": 217,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/LayoutSimple.js"
        },
        {
          "name": "LayoutSimple",
          "type": "method",
          "parameters": [
            "{ children }"
          ],
          "line": 32,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/LayoutSimple.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentPath === '/login' || currentPath.includes('/select-')"
          ],
          "line": 231,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/LayoutSimple.js"
        },
        {
          "name": "ModuloEIPD",
          "type": "arrow",
          "parameters": [],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ModuloEIPD.js"
        },
        {
          "name": "handleNext",
          "type": "arrow",
          "parameters": [],
          "line": 272,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ModuloEIPD.js"
        },
        {
          "name": "handleBack",
          "type": "arrow",
          "parameters": [],
          "line": 276,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ModuloEIPD.js"
        },
        {
          "name": "calcularNivelRiesgo",
          "type": "arrow",
          "parameters": [],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ModuloEIPD.js"
        },
        {
          "name": "exportarEIPD",
          "type": "arrow",
          "parameters": [],
          "line": 289,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ModuloEIPD.js"
        },
        {
          "name": "renderStepContent",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 419,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ModuloEIPD.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "esNuevo && ratOrigen"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ModuloEIPD.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "esEdicion && documentoId"
          ],
          "line": 184,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ModuloEIPD.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 420,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ModuloEIPD.js"
        },
        {
          "name": "NotificationCenter",
          "type": "arrow",
          "parameters": [],
          "line": 69,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "notificationsData"
          ],
          "line": 255,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "filtrarNotificaciones",
          "type": "arrow",
          "parameters": [],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "getNotificationIcon",
          "type": "arrow",
          "parameters": [
            "tipo",
            "prioridad"
          ],
          "line": 335,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "getPriorityChip",
          "type": "arrow",
          "parameters": [
            "prioridad"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "navigateToResource",
          "type": "arrow",
          "parameters": [
            "notification"
          ],
          "line": 359,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "renderStatsCards",
          "type": "arrow",
          "parameters": [],
          "line": 382,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "renderNotificationsList",
          "type": "arrow",
          "parameters": [],
          "line": 466,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "renderSettingsTab",
          "type": "arrow",
          "parameters": [],
          "line": 631,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "renderDetailDialog",
          "type": "arrow",
          "parameters": [],
          "line": 790,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 169,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 319,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "recurso_tipo"
          ],
          "line": 362,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "renderStatsCards",
          "type": "component",
          "parameters": [],
          "line": 382,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "renderNotificationsList",
          "type": "component",
          "parameters": [],
          "line": 466,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "renderSettingsTab",
          "type": "component",
          "parameters": [],
          "line": 631,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "renderDetailDialog",
          "type": "component",
          "parameters": [],
          "line": 790,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/NotificationCenter.js"
        },
        {
          "name": "PresentacionModuloCero",
          "type": "arrow",
          "parameters": [
            "{ autoStart = false }"
          ],
          "line": 24,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/PresentacionModuloCero.js"
        },
        {
          "name": "handleOpenPresentation",
          "type": "arrow",
          "parameters": [],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/PresentacionModuloCero.js"
        },
        {
          "name": "handleClosePresentation",
          "type": "arrow",
          "parameters": [],
          "line": 31,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/PresentacionModuloCero.js"
        },
        {
          "name": "openInNewWindow",
          "type": "arrow",
          "parameters": [],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/PresentacionModuloCero.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!newWindow || newWindow.closed"
          ],
          "line": 42,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/PresentacionModuloCero.js"
        },
        {
          "name": "PreventiveAIController",
          "type": "arrow",
          "parameters": [],
          "line": 8,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/PreventiveAIController.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "initialAudit.summary.failed_rules > 0"
          ],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/PreventiveAIController.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 37,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/PreventiveAIController.js"
        },
        {
          "name": "ProcesoCompleto",
          "type": "arrow",
          "parameters": [],
          "line": 45,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProcesoCompleto.js"
        },
        {
          "name": "iniciarCierre",
          "type": "arrow",
          "parameters": [],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProcesoCompleto.js"
        },
        {
          "name": "getIconByType",
          "type": "arrow",
          "parameters": [
            "tipo"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProcesoCompleto.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "prev >= 4"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProcesoCompleto.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "tipo"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProcesoCompleto.js"
        },
        {
          "name": "ProviderManager",
          "type": "arrow",
          "parameters": [],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "getTipoColor",
          "type": "arrow",
          "parameters": [
            "tipo"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "getEstadoColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 226,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "getRiesgoColor",
          "type": "arrow",
          "parameters": [
            "riesgo"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "getDPAStatusColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 247,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "handleAddProvider",
          "type": "arrow",
          "parameters": [],
          "line": 257,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "handleEditProvider",
          "type": "arrow",
          "parameters": [
            "provider"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "handleViewDPA",
          "type": "arrow",
          "parameters": [
            "provider"
          ],
          "line": 267,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "handleAuditProvider",
          "type": "arrow",
          "parameters": [
            "provider"
          ],
          "line": 272,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "getRiesgoColorHelper",
          "type": "arrow",
          "parameters": [
            "riesgo"
          ],
          "line": 886,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "ProviderAuditCard",
          "type": "arrow",
          "parameters": [
            "{ provider",
            "onAudit }"
          ],
          "line": 897,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "ProviderRiskCard",
          "type": "arrow",
          "parameters": [
            "{ provider }"
          ],
          "line": 996,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "DPAManagementView",
          "type": "arrow",
          "parameters": [
            "{ provider }"
          ],
          "line": 1081,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "provider.dpa_vigente.estado === 'VENCIDO'"
          ],
          "line": 999,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!provider.ultima_auditoria"
          ],
          "line": 1008,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "provider.incidentes.filter(i => !i.resuelto).length > 0"
          ],
          "line": 1017,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "provider.nivel_riesgo === 'CRITICO'"
          ],
          "line": 1026,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ProviderManager.js"
        },
        {
          "name": "RATEditPage",
          "type": "arrow",
          "parameters": [],
          "line": 59,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "handleFieldChange",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 181,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "handleArrayFieldAdd",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 197,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "handleArrayFieldRemove",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "validateStep",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "handleNext",
          "type": "arrow",
          "parameters": [],
          "line": 268,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "handleBack",
          "type": "arrow",
          "parameters": [],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "DataTypesSelector",
          "type": "arrow",
          "parameters": [
            "{ selectedTypes",
            "onTypesChange",
            "error }"
          ],
          "line": 992,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "toggleTipo",
          "type": "arrow",
          "parameters": [
            "tipo"
          ],
          "line": 1006,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "RecipientsSection",
          "type": "arrow",
          "parameters": [
            "{ rat",
            "onFieldChange",
            "onArrayAdd",
            "onArrayRemove",
            "validationErrors }"
          ],
          "line": 1051,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "InternationalTransfersSection",
          "type": "arrow",
          "parameters": [
            "{ rat",
            "onFieldChange",
            "onArrayAdd",
            "onArrayRemove }"
          ],
          "line": 1179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "SecurityMeasuresSection",
          "type": "arrow",
          "parameters": [
            "{ rat",
            "onArrayAdd",
            "onArrayRemove",
            "validationErrors }"
          ],
          "line": 1248,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "CategoriasDataSelector",
          "type": "arrow",
          "parameters": [
            "{ categoriasData",
            "onCategoriasChange",
            "error }"
          ],
          "line": 1386,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "handleCategoryToggle",
          "type": "arrow",
          "parameters": [
            "categoria",
            "subcategoria",
            "valor"
          ],
          "line": 1387,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "isSelected",
          "type": "arrow",
          "parameters": [
            "categoria",
            "subcategoria",
            "valor"
          ],
          "line": 1408,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratId && ratId !== 'new'"
          ],
          "line": 125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validationErrors[field]"
          ],
          "line": 188,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && !rat[field].includes(value)"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 216,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.base_licitud === 'interes_legitimo' && !rat.base_legal"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!hasAnyCategory"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rat.destinatarios_internos || rat.destinatarios_internos.length === 0"
          ],
          "line": 248,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rat.medidas_seguridad_tecnicas || rat.medidas_seguridad_tecnicas.length === 0"
          ],
          "line": 258,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validateStep(activeStep)"
          ],
          "line": 269,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "preventiveCheck.alerts && Array.isArray(preventiveCheck.alerts) && preventiveCheck.alerts.length > 0"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "criticalAlerts.length > 0"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "warnings.length > 0"
          ],
          "line": 314,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!confirmContinue"
          ],
          "line": 317,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rat.nombre_actividad || !rat.finalidad_principal || !rat.area_responsable"
          ],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratId && ratId !== 'new'"
          ],
          "line": 361,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!verification"
          ],
          "line": 404,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 413,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 421,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "selectedTypes.includes(tipo)"
          ],
          "line": 1007,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!newCategorias[categoria]"
          ],
          "line": 1390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!newCategorias[categoria][subcategoria]"
          ],
          "line": 1394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentValues.includes(valor)"
          ],
          "line": 1399,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATEditPage.js"
        },
        {
          "name": "RATFormWithCompliance",
          "type": "arrow",
          "parameters": [],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATFormWithCompliance.js"
        },
        {
          "name": "handleInputChange",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 91,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATFormWithCompliance.js"
        },
        {
          "name": "handleCategoriaDataChange",
          "type": "arrow",
          "parameters": [
            "categoria"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATFormWithCompliance.js"
        },
        {
          "name": "getAlertIcon",
          "type": "arrow",
          "parameters": [
            "severity"
          ],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATFormWithCompliance.js"
        },
        {
          "name": "getDocumentIcon",
          "type": "arrow",
          "parameters": [
            "tipo"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATFormWithCompliance.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.nombre_actividad"
          ],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATFormWithCompliance.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "alertasCriticas.length > 0"
          ],
          "line": 82,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATFormWithCompliance.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATFormWithCompliance.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "alertas.some(a => a.severity === 'error')"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATFormWithCompliance.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "severity"
          ],
          "line": 120,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATFormWithCompliance.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "tipo"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATFormWithCompliance.js"
        },
        {
          "name": "RATListPage",
          "type": "arrow",
          "parameters": [],
          "line": 44,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATListPage.js"
        },
        {
          "name": "getEstadoColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 85,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATListPage.js"
        },
        {
          "name": "getRiesgoColor",
          "type": "arrow",
          "parameters": [
            "riesgo"
          ],
          "line": 96,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATListPage.js"
        },
        {
          "name": "getEstadoIcon",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATListPage.js"
        },
        {
          "name": "handleEdit",
          "type": "arrow",
          "parameters": [
            "rat"
          ],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATListPage.js"
        },
        {
          "name": "handleView",
          "type": "arrow",
          "parameters": [
            "rat"
          ],
          "line": 121,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATListPage.js"
        },
        {
          "name": "handleDelete",
          "type": "arrow",
          "parameters": [
            "rat"
          ],
          "line": 125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/RATListPage.js"
        },
        {
          "name": "handleActionMenu",
          "type": "arrow",
          "parameters": [
            "event",
            "ratId"
          ],
          "line": 150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATListPage.js"
        },
        {
          "name": "closeActionMenu",
          "type": "arrow",
          "parameters": [],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATListPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 77,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATListPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/RATListPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATListPage.js"
        },
        {
          "name": "handleFilterChange",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 145,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSearchFilter.js"
        },
        {
          "name": "handleMultiSelectChange",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 152,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSearchFilter.js"
        },
        {
          "name": "clearAllFilters",
          "type": "arrow",
          "parameters": [],
          "line": 159,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSearchFilter.js"
        },
        {
          "name": "saveCurrentFilter",
          "type": "arrow",
          "parameters": [],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSearchFilter.js"
        },
        {
          "name": "loadSavedFilter",
          "type": "arrow",
          "parameters": [
            "savedFilter"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSearchFilter.js"
        },
        {
          "name": "deleteSavedFilter",
          "type": "arrow",
          "parameters": [
            "filterId"
          ],
          "line": 203,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSearchFilter.js"
        },
        {
          "name": "getActiveFiltersCount",
          "type": "arrow",
          "parameters": [],
          "line": 209,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSearchFilter.js"
        },
        {
          "name": "exportFilters",
          "type": "arrow",
          "parameters": [],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSearchFilter.js"
        },
        {
          "name": "RATSystemProfessional",
          "type": "arrow",
          "parameters": [],
          "line": 276,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "checkStepComplete",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 593,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "handleNext",
          "type": "arrow",
          "parameters": [],
          "line": 622,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "handleBack",
          "type": "arrow",
          "parameters": [],
          "line": 628,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "mostrarGestionEmpresa",
          "type": "arrow",
          "parameters": [],
          "line": 677,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "volverAInicio",
          "type": "arrow",
          "parameters": [],
          "line": 683,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "mapearCategorias",
          "type": "arrow",
          "parameters": [
            "rat"
          ],
          "line": 700,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "validarDatosRATCompletos",
          "type": "arrow",
          "parameters": [
            "ratData",
            "tenant"
          ],
          "line": 862,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "PasoIdentificacion",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "setRatData }"
          ],
          "line": 1815,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "validarRUT",
          "type": "arrow",
          "parameters": [
            "rut"
          ],
          "line": 1819,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "PasoCategorias",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "setRatData",
            "currentTenant",
            "setAlertas }"
          ],
          "line": 2122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "handleIdentificacion",
          "type": "arrow",
          "parameters": [
            "event"
          ],
          "line": 2125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "handleSensibles",
          "type": "arrow",
          "parameters": [
            "event"
          ],
          "line": 2155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "getRiskColor",
          "type": "arrow",
          "parameters": [
            "risk"
          ],
          "line": 2345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "getRiskIcon",
          "type": "arrow",
          "parameters": [
            "risk"
          ],
          "line": 2355,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "getSelectedCount",
          "type": "arrow",
          "parameters": [
            "categoryId"
          ],
          "line": 2365,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "PasoBaseLegal",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "setRatData }"
          ],
          "line": 2590,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "handleChange",
          "type": "arrow",
          "parameters": [
            "event"
          ],
          "line": 2591,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "PasoFinalidad",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "setRatData }"
          ],
          "line": 2931,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "PasoTransferencias",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "setRatData }"
          ],
          "line": 3218,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "handleDestinatarioChange",
          "type": "arrow",
          "parameters": [
            "area"
          ],
          "line": 3222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "PasoRevision",
          "type": "arrow",
          "parameters": [
            "{ ratData",
            "guardarRAT }"
          ],
          "line": 3564,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "RATViewComponent",
          "type": "arrow",
          "parameters": [
            "{ ratData }"
          ],
          "line": 3664,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tieneAlgunDato"
          ],
          "line": 345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 351,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "resultado.success"
          ],
          "line": 352,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 367,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 368,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 381,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentTenant"
          ],
          "line": 394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosYaIngresados"
          ],
          "line": 400,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosGuardados.success && datosGuardados.datos"
          ],
          "line": 411,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 413,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 445,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 454,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 456,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 480,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && ultimoRAT"
          ],
          "line": 485,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 558,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!datosYaIngresados"
          ],
          "line": 561,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "result.success && Array.isArray(result.data)"
          ],
          "line": 581,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 586,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 595,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 616,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentStep < steps.length - 1"
          ],
          "line": 623,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentStep > 0"
          ],
          "line": 629,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 667,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratToEdit"
          ],
          "line": 695,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.categoriasDatos"
          ],
          "line": 708,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categoriasDatos.identificacion)"
          ],
          "line": 709,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categoriasDatos.sensibles)"
          ],
          "line": 712,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.categorias_datos"
          ],
          "line": 718,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categorias_datos.identificacion)"
          ],
          "line": 719,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categorias_datos.sensibles)"
          ],
          "line": 722,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.categorias"
          ],
          "line": 728,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categorias.identificacion)"
          ],
          "line": 729,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(rat.categorias.sensibles)"
          ],
          "line": 732,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.datos_identificacion && Array.isArray(rat.datos_identificacion)"
          ],
          "line": 738,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.datos_sensibles && Array.isArray(rat.datos_sensibles)"
          ],
          "line": 741,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 781,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratToView"
          ],
          "line": 790,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 795,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "window.confirm('¿Está seguro de eliminar este RAT? Esta acción no se puede deshacer.')"
          ],
          "line": 802,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "result.success && Array.isArray(result.data)"
          ],
          "line": 807,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 813,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 823,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 853,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable?.nombre || ratData.responsable.nombre.trim().length === 0"
          ],
          "line": 867,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable?.email || ratData.responsable.email.trim().length === 0"
          ],
          "line": 873,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable?.razonSocial || ratData.responsable.razonSocial.trim().length === 0"
          ],
          "line": 879,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable?.rut || ratData.responsable.rut.trim().length === 0"
          ],
          "line": 885,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.nombreActividad || ratData.nombreActividad.trim().length === 0"
          ],
          "line": 892,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.finalidad || ratData.finalidad.trim().length === 0"
          ],
          "line": 898,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.baseLegal || ratData.baseLegal.trim().length === 0"
          ],
          "line": 904,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tieneCategorias"
          ],
          "line": 915,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tenant || !tenant.id"
          ],
          "line": 922,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!validacionResult.valido"
          ],
          "line": 942,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 944,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 969,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.baseLegal === 'interes_legitimo'"
          ],
          "line": 1033,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!testBalancing.resultado || testBalancing.resultado === 'DESFAVORABLE'"
          ],
          "line": 1038,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "casuisticasEspecificas.requiere_atencion_especial"
          ],
          "line": 1046,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "viewMode === 'edit'"
          ],
          "line": 1053,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "resultado && resultado.id"
          ],
          "line": 1059,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "viewMode !== 'edit' && ratData.categorias?.sensibles?.length > 0"
          ],
          "line": 1063,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const subcategoria of ratData.categorias.sensibles"
          ],
          "line": 1070,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 1074,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratCompleto.metadata.requiereEIPD || ratCompleto.metadata.requiereDPIA"
          ],
          "line": 1081,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!eipdError && eipdGuardado"
          ],
          "line": 1125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 1208,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supabaseErrorLogger"
          ],
          "line": 1210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "showEmpresaManager"
          ],
          "line": 1238,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "viewMode === 'view'"
          ],
          "line": 1263,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "viewMode === 'list' || (!isCreatingRAT && showRATList)"
          ],
          "line": 1287,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = cuerpo.length - 1; i >= 0; i--"
          ],
          "line": 1826,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rut.length > 8"
          ],
          "line": 1845,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!validarRUT(rut)"
          ],
          "line": 1846,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "duplicado"
          ],
          "line": 1854,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "event.target.checked"
          ],
          "line": 2131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 2150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "event.target.checked"
          ],
          "line": 2161,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentTenant?.id"
          ],
          "line": 2172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "analisis.alertas?.length > 0"
          ],
          "line": 2177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 2193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "isArray",
          "type": "method",
          "parameters": [
            "ratData.categorias.sensibles)"
          ],
          "line": 2201,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "risk"
          ],
          "line": 2346,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "risk"
          ],
          "line": 2356,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoryId === 'sensibles'"
          ],
          "line": 2366,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "value"
          ],
          "line": 2595,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/RATSystemProfessional.js"
        },
        {
          "name": "ReportGenerator",
          "type": "arrow",
          "parameters": [],
          "line": 48,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ReportGenerator.js"
        },
        {
          "name": "generarCSVConsolidado",
          "type": "arrow",
          "parameters": [
            "reportData"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ReportGenerator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/ReportGenerator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "reportConfig.incluirAuditoria"
          ],
          "line": 137,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ReportGenerator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "formato === 'pdf'"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ReportGenerator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "formato === 'excel'"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ReportGenerator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 185,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/ReportGenerator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 278,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/ReportGenerator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ReportGenerator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.categorias_datos"
          ],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ReportGenerator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(categorias)"
          ],
          "line": 344,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ReportGenerator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "e"
          ],
          "line": 353,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/ReportGenerator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.transferencias_internacionales"
          ],
          "line": 364,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ReportGenerator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(transferencias)"
          ],
          "line": 370,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ReportGenerator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "e"
          ],
          "line": 379,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/ReportGenerator.js"
        },
        {
          "name": "handlePlayPause",
          "type": "arrow",
          "parameters": [],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/VideoAnimado.js"
        },
        {
          "name": "handleMuteToggle",
          "type": "arrow",
          "parameters": [],
          "line": 56,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/VideoAnimado.js"
        },
        {
          "name": "handleFrameClick",
          "type": "arrow",
          "parameters": [
            "frameIndex"
          ],
          "line": 60,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/VideoAnimado.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isPlaying && frames.length > 0"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/VideoAnimado.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "next === 0 && !loop"
          ],
          "line": 40,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/VideoAnimado.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!frames || frames.length === 0"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/VideoAnimado.js"
        },
        {
          "name": "TestWrapper",
          "type": "arrow",
          "parameters": [
            "{ children }"
          ],
          "line": 13,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/__tests__/AdminDashboard.test.js"
        },
        {
          "name": "TabPanel",
          "type": "declaration",
          "parameters": [
            "{ children",
            "value",
            "index",
            "...other }"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/AdminPanel.js"
        },
        {
          "name": "a11yProps",
          "type": "declaration",
          "parameters": [
            "index"
          ],
          "line": 51,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/AdminPanel.js"
        },
        {
          "name": "AdminPanel",
          "type": "declaration",
          "parameters": [],
          "line": 58,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/AdminPanel.js"
        },
        {
          "name": "handleTabChange",
          "type": "arrow",
          "parameters": [
            "event",
            "newValue"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/AdminPanel.js"
        },
        {
          "name": "getSystemStatusColor",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 67,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/AdminPanel.js"
        },
        {
          "name": "getSystemStatusText",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 76,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/AdminPanel.js"
        },
        {
          "name": "TabPanel",
          "type": "method",
          "parameters": [
            "{ children",
            "value",
            "index",
            "...other }"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/AdminPanel.js"
        },
        {
          "name": "a11yProps",
          "type": "method",
          "parameters": [
            "index"
          ],
          "line": 51,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/AdminPanel.js"
        },
        {
          "name": "AdminPanel",
          "type": "method",
          "parameters": [],
          "line": 58,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/AdminPanel.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/AdminPanel.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status"
          ],
          "line": 77,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/AdminPanel.js"
        },
        {
          "name": "IAAgentStatusPage",
          "type": "arrow",
          "parameters": [],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/IAAgentStatusPage.js"
        },
        {
          "name": "getStatusColor",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 126,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/IAAgentStatusPage.js"
        },
        {
          "name": "getStatusIcon",
          "type": "arrow",
          "parameters": [
            "status"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/IAAgentStatusPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!authLoading && user"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/IAAgentStatusPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!authLoading && !user"
          ],
          "line": 57,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/IAAgentStatusPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isAdmin"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/IAAgentStatusPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!user"
          ],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/IAAgentStatusPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "userProfile"
          ],
          "line": 94,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/IAAgentStatusPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "dbError"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/admin/IAAgentStatusPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 107,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/components/admin/IAAgentStatusPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/IAAgentStatusPage.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status?.toLowerCase()"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/IAAgentStatusPage.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "status?.toLowerCase()"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/IAAgentStatusPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "authChecking"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/IAAgentStatusPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!isAdmin"
          ],
          "line": 163,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/IAAgentStatusPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading && !report"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/IAAgentStatusPage.js"
        },
        {
          "name": "UsageDashboard",
          "type": "arrow",
          "parameters": [],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/UsageDashboard.js"
        },
        {
          "name": "getUtilizationColor",
          "type": "arrow",
          "parameters": [
            "percentage"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/UsageDashboard.js"
        },
        {
          "name": "getUtilizationLabel",
          "type": "arrow",
          "parameters": [
            "percentage"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/UsageDashboard.js"
        },
        {
          "name": "getTotalStats",
          "type": "arrow",
          "parameters": [],
          "line": 100,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/UsageDashboard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "usageError || limitsError"
          ],
          "line": 54,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/UsageDashboard.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/UsageDashboard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/UsageDashboard.js"
        },
        {
          "name": "UserManagement",
          "type": "declaration",
          "parameters": [],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/UserManagement.js"
        },
        {
          "name": "UserManagement",
          "type": "method",
          "parameters": [],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/UserManagement.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 57,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/UserManagement.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 62,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/UserManagement.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 79,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/admin/UserManagement.js"
        },
        {
          "name": "Login",
          "type": "arrow",
          "parameters": [],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/auth/Login.js"
        },
        {
          "name": "handleInputChange",
          "type": "arrow",
          "parameters": [
            "e"
          ],
          "line": 31,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/auth/Login.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!formData.email || !formData.password"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/auth/Login.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "err"
          ],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/components/auth/Login.js"
        }
      ],
      "hooks": [
        {
          "name": "useAuth",
          "type": "arrow",
          "parameters": [],
          "line": 9,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/AuthContext.js"
        },
        {
          "name": "useTenant",
          "type": "arrow",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "useDataSync",
          "type": "arrow",
          "parameters": [
            "moduleName"
          ],
          "line": 6,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/hooks/useDataSync.js"
        },
        {
          "name": "useConsistentCounts",
          "type": "arrow",
          "parameters": [],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/hooks/useDataSync.js"
        },
        {
          "name": "usesAutomatedDecisions",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 163,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "useHelp",
          "type": "arrow",
          "parameters": [],
          "line": 8,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        }
      ],
      "utilities": [
        {
          "name": "LoadingScreen",
          "type": "arrow",
          "parameters": [],
          "line": 50,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "ProtectedRoute",
          "type": "arrow",
          "parameters": [
            "{ children",
            "requiredPermissions = []",
            "allowDemo = false }"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "AppContent",
          "type": "arrow",
          "parameters": [],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "TenantSelector",
          "type": "arrow",
          "parameters": [],
          "line": 335,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "App",
          "type": "arrow",
          "parameters": [],
          "line": 394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!user"
          ],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!currentTenant"
          ],
          "line": 76,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isRestricted() && !allowDemo"
          ],
          "line": 80,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "requiredPermissions && requiredPermissions.length > 0"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!hasPermission"
          ],
          "line": 89,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "user && currentTenant?.id"
          ],
          "line": 103,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!user"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!currentTenant && user?.tenant_id !== (process.env.REACT_APP_DEMO_TENANT_ID || 'demo')"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "LoadingScreen",
          "type": "component",
          "parameters": [],
          "line": 50,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "getIndustryById",
          "type": "arrow",
          "parameters": [
            "id"
          ],
          "line": 108,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/config/industries.config.js"
        },
        {
          "name": "getIndustryRegulations",
          "type": "arrow",
          "parameters": [
            "industryId"
          ],
          "line": 112,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/config/industries.config.js"
        },
        {
          "name": "getIndustryRiskLevel",
          "type": "arrow",
          "parameters": [
            "industryId"
          ],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/config/industries.config.js"
        },
        {
          "name": "getIndustryRetention",
          "type": "arrow",
          "parameters": [
            "industryId"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/config/industries.config.js"
        },
        {
          "name": "requiresEIPD",
          "type": "arrow",
          "parameters": [
            "industryId"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/config/industries.config.js"
        },
        {
          "name": "supabaseWithTenant",
          "type": "arrow",
          "parameters": [
            "tenantId"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/config/supabaseClient.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!supabaseUrl || !supabaseKey"
          ],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/config/supabaseClient.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!supabaseUrl.includes('supabase.co')"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/config/supabaseClient.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!supabaseKey.startsWith('eyJ') && !supabaseKey.startsWith('sb_publishable_')"
          ],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/config/supabaseClient.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "user?.id"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/config/supabaseClient.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && session"
          ],
          "line": 73,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/config/supabaseClient.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/config/supabaseClient.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/config/supabaseClient.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/config/supabaseClient.js"
        },
        {
          "name": "getRAT_EstadoLabel",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 80,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/constants/estados.js"
        },
        {
          "name": "getRAT_EstadoColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/constants/estados.js"
        },
        {
          "name": "isRAT_EstadoValido",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 89,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/constants/estados.js"
        },
        {
          "name": "canRAT_TransitionTo",
          "type": "arrow",
          "parameters": [
            "estadoActual",
            "estadoDestino"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/constants/estados.js"
        },
        {
          "name": "AuthProvider",
          "type": "arrow",
          "parameters": [
            "{ children }"
          ],
          "line": 17,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/AuthContext.js"
        },
        {
          "name": "updateUser",
          "type": "arrow",
          "parameters": [
            "userData"
          ],
          "line": 163,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/AuthContext.js"
        },
        {
          "name": "isAuthenticated",
          "type": "arrow",
          "parameters": [],
          "line": 167,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/AuthContext.js"
        },
        {
          "name": "hasPermission",
          "type": "arrow",
          "parameters": [
            "permission"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/AuthContext.js"
        },
        {
          "name": "isRestricted",
          "type": "arrow",
          "parameters": [],
          "line": 177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/AuthContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!context"
          ],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/AuthContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "session?.user"
          ],
          "line": 31,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/AuthContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "session?.user"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/AuthContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/AuthContext.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/AuthContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/AuthContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/AuthContext.js"
        },
        {
          "name": "TenantProvider",
          "type": "arrow",
          "parameters": [
            "{ children }"
          ],
          "line": 19,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!context"
          ],
          "line": 13,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!isAuthenticated || !user"
          ],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!data || data.length === 0"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 56,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!user?.id"
          ],
          "line": 67,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isAuthenticated && user"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tenants && tenants.length > 0"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "savedTenantResult.success && savedTenantResult.data"
          ],
          "line": 120,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!selectedTenant"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!isAuthenticated && user?.id"
          ],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "savedTenantResult.success && savedTenantResult.data"
          ],
          "line": 150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 211,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 228,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentTenant?.id === tenantId"
          ],
          "line": 239,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 247,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentTenant?.id === tenantId"
          ],
          "line": 271,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filteredTenants.length > 0"
          ],
          "line": 272,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "defaultOrg"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 290,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "user?.id"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 307,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/contexts/TenantContext.js"
        },
        {
          "name": "testRatIdColumns",
          "type": "declaration",
          "parameters": [],
          "line": 6,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/debug_rat_id.js"
        },
        {
          "name": "testRatIdColumns",
          "type": "method",
          "parameters": [],
          "line": 6,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/debug_rat_id.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of tablesToTest"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/debug_rat_id.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 29,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/debug_rat_id.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.code === '42P01'"
          ],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/debug_rat_id.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.code === '42703'"
          ],
          "line": 32,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/debug_rat_id.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "err"
          ],
          "line": 42,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/debug_rat_id.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 59,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/debug_rat_id.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "err"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/debug_rat_id.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/hooks/useDataSync.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "changeType"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/hooks/useDataSync.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/hooks/useDataSync.js"
        },
        {
          "name": "AdminDashboard",
          "type": "arrow",
          "parameters": [],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "renderTenantsTab",
          "type": "arrow",
          "parameters": [],
          "line": 288,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "renderUsersTab",
          "type": "arrow",
          "parameters": [],
          "line": 394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "renderAuditTab",
          "type": "arrow",
          "parameters": [],
          "line": 506,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 145,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 162,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 187,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 227,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 252,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 282,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "renderTenantsTab",
          "type": "component",
          "parameters": [],
          "line": 288,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "renderUsersTab",
          "type": "component",
          "parameters": [],
          "line": 394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "renderAuditTab",
          "type": "component",
          "parameters": [],
          "line": 506,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminDashboard.js"
        },
        {
          "name": "AdminPanel",
          "type": "arrow",
          "parameters": [],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "resetFormOrg",
          "type": "arrow",
          "parameters": [],
          "line": 275,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "resetFormUser",
          "type": "arrow",
          "parameters": [],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "mostrarMensaje",
          "type": "arrow",
          "parameters": [
            "message",
            "severity"
          ],
          "line": 391,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "getPlanChip",
          "type": "arrow",
          "parameters": [
            "plan"
          ],
          "line": 395,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "getRolChip",
          "type": "arrow",
          "parameters": [
            "rol"
          ],
          "line": 405,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "Dashboard",
          "type": "arrow",
          "parameters": [],
          "line": 416,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "OrganizacionesTab",
          "type": "arrow",
          "parameters": [],
          "line": 590,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "UsuariosTab",
          "type": "arrow",
          "parameters": [],
          "line": 712,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "ConfiguracionTab",
          "type": "arrow",
          "parameters": [],
          "line": 830,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "NotificationSnackbar",
          "type": "arrow",
          "parameters": [
            "{ open",
            "autoHideDuration",
            "onClose",
            "children }"
          ],
          "line": 1331,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "orgActual.id"
          ],
          "line": 248,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 258,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 269,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!userActual.id && userActual.password !== userActual.confirmar_password"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "userActual.id"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 322,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 333,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 343,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 370,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 382,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "Dashboard",
          "type": "component",
          "parameters": [],
          "line": 416,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "OrganizacionesTab",
          "type": "component",
          "parameters": [],
          "line": 590,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "UsuariosTab",
          "type": "component",
          "parameters": [],
          "line": 712,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "ConfiguracionTab",
          "type": "component",
          "parameters": [],
          "line": 830,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/AdminPanel.js"
        },
        {
          "name": "DPIAAlgoritmos",
          "type": "arrow",
          "parameters": [],
          "line": 42,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPIAAlgoritmos.js"
        },
        {
          "name": "preLlenarDesdeRAT",
          "type": "arrow",
          "parameters": [],
          "line": 74,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPIAAlgoritmos.js"
        },
        {
          "name": "cargarDPIA",
          "type": "arrow",
          "parameters": [],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPIAAlgoritmos.js"
        },
        {
          "name": "calcularProgreso",
          "type": "arrow",
          "parameters": [],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPIAAlgoritmos.js"
        },
        {
          "name": "enviarParaRevision",
          "type": "arrow",
          "parameters": [],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPIAAlgoritmos.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "esNuevo && ratId"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPIAAlgoritmos.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "documentoId"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPIAAlgoritmos.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPIAAlgoritmos.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dpiaData.progreso < 100"
          ],
          "line": 156,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPIAAlgoritmos.js"
        },
        {
          "name": "DPOApprovalQueue",
          "type": "arrow",
          "parameters": [],
          "line": 56,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPOApprovalQueue.js"
        },
        {
          "name": "calculatePriority",
          "type": "arrow",
          "parameters": [
            "rat",
            "analysis",
            "daysSinceCreation"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPOApprovalQueue.js"
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "ratsData"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPOApprovalQueue.js"
        },
        {
          "name": "getPriorityChip",
          "type": "arrow",
          "parameters": [
            "priority"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPOApprovalQueue.js"
        },
        {
          "name": "getRiskChip",
          "type": "arrow",
          "parameters": [
            "riskLevel"
          ],
          "line": 224,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPOApprovalQueue.js"
        },
        {
          "name": "getTimeChip",
          "type": "arrow",
          "parameters": [
            "days"
          ],
          "line": 235,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPOApprovalQueue.js"
        },
        {
          "name": "filtrarRATs",
          "type": "arrow",
          "parameters": [],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPOApprovalQueue.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPOApprovalQueue.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 126,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPOApprovalQueue.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/DPOApprovalQueue.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPOApprovalQueue.js"
        },
        {
          "name": "Dashboard",
          "type": "declaration",
          "parameters": [],
          "line": 23,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/Dashboard.js"
        },
        {
          "name": "Dashboard",
          "type": "method",
          "parameters": [],
          "line": 23,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/Dashboard.js"
        },
        {
          "name": "DashboardDPO",
          "type": "arrow",
          "parameters": [],
          "line": 19,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DashboardDPO.js"
        },
        {
          "name": "EIPDCreator",
          "type": "arrow",
          "parameters": [],
          "line": 59,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "evaluarNecesidadEIPD",
          "type": "arrow",
          "parameters": [],
          "line": 184,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "calcularNivelRiesgo",
          "type": "arrow",
          "parameters": [],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "renderStepContent",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 253,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "renderInformacionGeneral",
          "type": "arrow",
          "parameters": [],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "renderCriteriosNecesidad",
          "type": "arrow",
          "parameters": [],
          "line": 339,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "renderDescripcionSistematica",
          "type": "arrow",
          "parameters": [],
          "line": 522,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "renderEvaluacionRiesgos",
          "type": "arrow",
          "parameters": [],
          "line": 610,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "renderNecesidadProporcionalidad",
          "type": "arrow",
          "parameters": [],
          "line": 750,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "renderMedidasMitigacion",
          "type": "arrow",
          "parameters": [],
          "line": 811,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "renderConclusiones",
          "type": "arrow",
          "parameters": [],
          "line": 928,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "getTextFieldStyles",
          "type": "arrow",
          "parameters": [],
          "line": 1031,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratId"
          ],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratId"
          ],
          "line": 234,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 245,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 254,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 1118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "renderInformacionGeneral",
          "type": "component",
          "parameters": [],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "renderCriteriosNecesidad",
          "type": "component",
          "parameters": [],
          "line": 339,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "renderDescripcionSistematica",
          "type": "component",
          "parameters": [],
          "line": 522,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "renderEvaluacionRiesgos",
          "type": "component",
          "parameters": [],
          "line": 610,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "renderNecesidadProporcionalidad",
          "type": "component",
          "parameters": [],
          "line": 750,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "renderMedidasMitigacion",
          "type": "component",
          "parameters": [],
          "line": 811,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "renderConclusiones",
          "type": "component",
          "parameters": [],
          "line": 928,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "getTextFieldStyles",
          "type": "component",
          "parameters": [],
          "line": 1031,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDCreator.js"
        },
        {
          "name": "EIPDListPage",
          "type": "arrow",
          "parameters": [],
          "line": 36,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDListPage.js"
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "eipdData"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDListPage.js"
        },
        {
          "name": "getRiskColor",
          "type": "arrow",
          "parameters": [
            "riesgo"
          ],
          "line": 114,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDListPage.js"
        },
        {
          "name": "getStatusColor",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDListPage.js"
        },
        {
          "name": "descargarEIPD",
          "type": "arrow",
          "parameters": [
            "eipd"
          ],
          "line": 132,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDListPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDListPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 96,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDListPage.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "riesgo"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDListPage.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "estado"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/EIPDListPage.js"
        },
        {
          "name": "GestionAsociaciones",
          "type": "arrow",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/GestionAsociaciones.js"
        },
        {
          "name": "GlosarioLPDP",
          "type": "arrow",
          "parameters": [],
          "line": 81,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/GlosarioLPDP.js"
        },
        {
          "name": "copyToClipboard",
          "type": "arrow",
          "parameters": [
            "text"
          ],
          "line": 1878,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/GlosarioLPDP.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!termino || typeof termino !== 'object' || !termino.termino || !termino.definicion"
          ],
          "line": 1835,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/GlosarioLPDP.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!termino.categoria || !categorias[termino.categoria]"
          ],
          "line": 1857,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/GlosarioLPDP.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "selectedCategory === 'criticos'"
          ],
          "line": 1863,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/GlosarioLPDP.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "selectedCategory === 'novedades_chile'"
          ],
          "line": 1866,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/GlosarioLPDP.js"
        },
        {
          "name": "ModuloCero",
          "type": "declaration",
          "parameters": [],
          "line": 6,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ModuloCero_SAFE.js"
        },
        {
          "name": "ModuloCero",
          "type": "method",
          "parameters": [],
          "line": 6,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ModuloCero_SAFE.js"
        },
        {
          "name": "PaletaColores",
          "type": "arrow",
          "parameters": [],
          "line": 67,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/PaletaColores.js"
        },
        {
          "name": "ProcesoCompletoPage",
          "type": "arrow",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ProcesoCompleto.js"
        },
        {
          "name": "ProviderManager",
          "type": "arrow",
          "parameters": [],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "providersData"
          ],
          "line": 216,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "getRiskChip",
          "type": "arrow",
          "parameters": [
            "riskLevel"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "getStatusChip",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 273,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "getContractStatusChip",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "filtrarProveedores",
          "type": "arrow",
          "parameters": [],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "renderProveedoresTab",
          "type": "arrow",
          "parameters": [],
          "line": 308,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "renderContratosTab",
          "type": "arrow",
          "parameters": [],
          "line": 453,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "renderTransferenciasTab",
          "type": "arrow",
          "parameters": [],
          "line": 523,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "evaluarRiesgoProveedor",
          "type": "arrow",
          "parameters": [
            "provider"
          ],
          "line": 599,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 159,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 209,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "renderProveedoresTab",
          "type": "component",
          "parameters": [],
          "line": 308,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "renderContratosTab",
          "type": "component",
          "parameters": [],
          "line": 453,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "renderTransferenciasTab",
          "type": "component",
          "parameters": [],
          "line": 523,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/ProviderManager.js"
        },
        {
          "name": "RATEditPage",
          "type": "arrow",
          "parameters": [],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "getStatusChip",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 290,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "renderStepContent",
          "type": "arrow",
          "parameters": [
            "step"
          ],
          "line": 309,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "renderResponsableStep",
          "type": "arrow",
          "parameters": [],
          "line": 328,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "renderCategoriasDatosStep",
          "type": "arrow",
          "parameters": [],
          "line": 417,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "renderBaseJuridicaStep",
          "type": "arrow",
          "parameters": [],
          "line": 463,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "renderFinalidadStep",
          "type": "arrow",
          "parameters": [],
          "line": 499,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "renderDestinatariosStep",
          "type": "arrow",
          "parameters": [],
          "line": 530,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "renderConfirmacionStep",
          "type": "arrow",
          "parameters": [],
          "line": 588,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "getTextFieldStyles",
          "type": "arrow",
          "parameters": [],
          "line": 709,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratExistente"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 145,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "JSON.stringify(ratData) === JSON.stringify(originalRATData)"
          ],
          "line": 158,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 249,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "analysisResults?.riskLevel === 'ALTO'"
          ],
          "line": 268,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "step"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "loading"
          ],
          "line": 721,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "renderResponsableStep",
          "type": "component",
          "parameters": [],
          "line": 328,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "renderCategoriasDatosStep",
          "type": "component",
          "parameters": [],
          "line": 417,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "renderBaseJuridicaStep",
          "type": "component",
          "parameters": [],
          "line": 463,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "renderFinalidadStep",
          "type": "component",
          "parameters": [],
          "line": 499,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "renderDestinatariosStep",
          "type": "component",
          "parameters": [],
          "line": 530,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "renderConfirmacionStep",
          "type": "component",
          "parameters": [],
          "line": 588,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "getTextFieldStyles",
          "type": "component",
          "parameters": [],
          "line": 709,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATEditPage.js"
        },
        {
          "name": "RATListPage",
          "type": "arrow",
          "parameters": [],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATListPage.js"
        },
        {
          "name": "calcularEstadisticas",
          "type": "arrow",
          "parameters": [
            "ratsData"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATListPage.js"
        },
        {
          "name": "getStatusChip",
          "type": "arrow",
          "parameters": [
            "estado"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATListPage.js"
        },
        {
          "name": "getRiskChip",
          "type": "arrow",
          "parameters": [
            "riskLevel"
          ],
          "line": 160,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATListPage.js"
        },
        {
          "name": "filtrarRATs",
          "type": "arrow",
          "parameters": [],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATListPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rats.length > 0"
          ],
          "line": 81,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATListPage.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATListPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATListPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/RATListPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/RATListPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/RATListPage.js"
        },
        {
          "name": "child",
          "type": "method",
          "parameters": [
            "even"
          ],
          "line": 325,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATListPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/RATListPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 483,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/RATListPage.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 521,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/RATListPage.js"
        },
        {
          "name": "SistemaPrincipal",
          "type": "arrow",
          "parameters": [],
          "line": 34,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/SistemaPrincipal.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "config = {}"
          ],
          "line": 8,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.apiKey"
          ],
          "line": 17,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.debug"
          ],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "evaluateRAT",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 39,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "response.data.automation_triggers.length > 0"
          ],
          "line": 48,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 54,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "getDashboard",
          "type": "method",
          "parameters": [
            "filters = {}"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 73,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "generateEIPD",
          "type": "method",
          "parameters": [
            "ratId",
            "options = {}"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 108,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "generateDPA",
          "type": "method",
          "parameters": [
            "ratId",
            "providerInfo",
            "options = {}"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "registerWebhook",
          "type": "method",
          "parameters": [
            "webhookUrl",
            "events = []",
            "secret = null"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "getRegulatoryUpdates",
          "type": "method",
          "parameters": [
            "since = null"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "batchEvaluateRATs",
          "type": "method",
          "parameters": [
            "ratsData",
            "options = {}"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const batch of batches"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "batches.indexOf(batch) < batches.length - 1"
          ],
          "line": 220,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "healthCheck",
          "type": "method",
          "parameters": [],
          "line": 242,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "on",
          "type": "method",
          "parameters": [
            "event",
            "callback"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.eventListeners.has(event)"
          ],
          "line": 271,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "emit",
          "type": "method",
          "parameters": [
            "event",
            "data"
          ],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.eventListeners.has(event)"
          ],
          "line": 281,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "makeRequest",
          "type": "method",
          "parameters": [
            "method",
            "endpoint",
            "data = null"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data && (method === 'POST' || method === 'PUT')"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let attempt = 1; attempt <= this.retryAttempts; attempt++"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!response.success"
          ],
          "line": 317,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 323,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "attempt < this.retryAttempts && this.isRetryableError(error)"
          ],
          "line": 326,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "simulateHTTPCall",
          "type": "method",
          "parameters": [
            "method",
            "endpoint",
            "data"
          ],
          "line": 340,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "`${method} ${endpoint}`"
          ],
          "line": 348,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "normalizeRATData",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 380,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "normalizeProviderInfo",
          "type": "method",
          "parameters": [
            "providerInfo"
          ],
          "line": 393,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "buildQueryParams",
          "type": "method",
          "parameters": [
            "filters"
          ],
          "line": 403,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value !== undefined && value !== null"
          ],
          "line": 406,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "chunkArray",
          "type": "method",
          "parameters": [
            "array",
            "size"
          ],
          "line": 413,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < array.length; i += size"
          ],
          "line": 415,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "isRetryableError",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 421,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "generateSecret",
          "type": "method",
          "parameters": [],
          "line": 426,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "sleep",
          "type": "method",
          "parameters": [
            "ms"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "log",
          "type": "method",
          "parameters": [
            "...args"
          ],
          "line": 434,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.debug"
          ],
          "line": 435,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "logError",
          "type": "method",
          "parameters": [
            "...args"
          ],
          "line": 440,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 448,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "isHighRisk",
          "type": "method",
          "parameters": [],
          "line": 459,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "requiresEIPD",
          "type": "method",
          "parameters": [],
          "line": 463,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "requiresDPA",
          "type": "method",
          "parameters": [],
          "line": 467,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "getComplianceScore",
          "type": "method",
          "parameters": [],
          "line": 471,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 477,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "getHealthStatus",
          "type": "method",
          "parameters": [],
          "line": 485,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "getTotalActivities",
          "type": "method",
          "parameters": [],
          "line": 489,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "getAverageScore",
          "type": "method",
          "parameters": [],
          "line": 493,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 499,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "isComplete",
          "type": "method",
          "parameters": [],
          "line": 508,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "getNextRequiredAction",
          "type": "method",
          "parameters": [],
          "line": 512,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 518,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "isReadyForSigning",
          "type": "method",
          "parameters": [],
          "line": 529,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "getRequiredActions",
          "type": "method",
          "parameters": [],
          "line": 533,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 539,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 548,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "isHighImpact",
          "type": "method",
          "parameters": [],
          "line": 559,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "code",
            "message",
            "originalError = null"
          ],
          "line": 566,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/sdk/LPDPHubSDK.js"
        },
        {
          "name": "iniciarTestAutomatizado",
          "type": "declaration",
          "parameters": [],
          "line": 584,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 13,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "typeText",
          "type": "method",
          "parameters": [
            "selector",
            "text",
            "speed = 50"
          ],
          "line": 18,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!element"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let char of text"
          ],
          "line": 28,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "clickButton",
          "type": "method",
          "parameters": [
            "selector"
          ],
          "line": 39,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!element"
          ],
          "line": 41,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "selectOption",
          "type": "method",
          "parameters": [
            "selector",
            "value"
          ],
          "line": 61,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!element"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "toggleCheckbox",
          "type": "method",
          "parameters": [
            "selector",
            "checked = true"
          ],
          "line": 76,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!element"
          ],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "element.checked !== checked"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "navigateTo",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "waitForElement",
          "type": "method",
          "parameters": [
            "selector",
            "timeout = 5000"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "Date.now() - startTime < timeout"
          ],
          "line": 103,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "document.querySelector(selector)"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "scrollToElement",
          "type": "method",
          "parameters": [
            "selector"
          ],
          "line": 116,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "crearRATBasico",
          "type": "method",
          "parameters": [],
          "line": 136,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "crearEIPD",
          "type": "method",
          "parameters": [
            "ratId"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "crearProveedor",
          "type": "method",
          "parameters": [],
          "line": 282,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "crearRATConEIPD",
          "type": "method",
          "parameters": [
            "eipdId"
          ],
          "line": 320,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "crearRATCompleto",
          "type": "method",
          "parameters": [
            "proveedorId",
            "eipdId"
          ],
          "line": 375,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "editarRegistros",
          "type": "method",
          "parameters": [
            "ratId",
            "proveedorId",
            "eipdId"
          ],
          "line": 445,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "ejecutarPruebaCompleta",
          "type": "method",
          "parameters": [],
          "line": 520,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 569,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "iniciarTestAutomatizado",
          "type": "method",
          "parameters": [],
          "line": 584,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "resultado.success"
          ],
          "line": 592,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof module !== 'undefined' && module.exports"
          ],
          "line": 602,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 607,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/tests/userSimulation.test.js"
        },
        {
          "name": "rgba",
          "type": "arrow",
          "parameters": [
            "color",
            "opacity"
          ],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/theme/colors.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 4,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "initialize",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && config"
          ],
          "line": 18,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isActive"
          ],
          "line": 22,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "superviseRATCreation",
          "type": "method",
          "parameters": [
            "ratData",
            "userId",
            "tenantId"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!businessLogicCheck.valid"
          ],
          "line": 45,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!legalComplianceCheck.compliant"
          ],
          "line": 57,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dataQualityCheck.score < 80"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "duplicateCheck.hasDuplicates"
          ],
          "line": 79,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "duplicateCheck.severity === 'critical'"
          ],
          "line": 87,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dpoTasksCheck.tasksRequired.length > 0"
          ],
          "line": 96,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "supervision.interventions.length > 0"
          ],
          "line": 108,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "validateBusinessLogic",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "validateLegalCompliance",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 159,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 176,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "assessDataQuality",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 185,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable?.nombre || ratData.responsable.nombre.length < 5"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.finalidad?.descripcion || ratData.finalidad.descripcion.length < 50"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.categorias_datos || ratData.categorias_datos.length === 0"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.plazos_retencion || ratData.plazos_retencion === 'indefinido'"
          ],
          "line": 204,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "checkForIntelligentDuplicates",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 225,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "performIntelligentDuplicateAnalysis",
          "type": "method",
          "parameters": [
            "newRAT",
            "existingRATs"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const existingRAT of existingRATs"
          ],
          "line": 235,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity.score > maxSimilarity"
          ],
          "line": 238,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity.score > 0.7"
          ],
          "line": 243,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "maxSimilarity > 0.95"
          ],
          "line": 252,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "maxSimilarity > 0.8"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "maxSimilarity > 0.6"
          ],
          "line": 272,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "calculateIntelligentSimilarity",
          "type": "method",
          "parameters": [
            "ratA",
            "ratB"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "compareRUT",
          "type": "method",
          "parameters": [
            "rutA",
            "rutB"
          ],
          "line": 311,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "compareSemanticContent",
          "type": "method",
          "parameters": [
            "textA",
            "textB"
          ],
          "line": 316,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "extractKeywords",
          "type": "method",
          "parameters": [
            "text"
          ],
          "line": 328,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "compareArraySimilarity",
          "type": "method",
          "parameters": [
            "arrA",
            "arrB"
          ],
          "line": 336,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "getRecommendation",
          "type": "method",
          "parameters": [
            "similarityScore"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "assessRequiredDPOTasks",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 356,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasSensitiveData || hasAutomatedDecisions || isHighVolume"
          ],
          "line": 369,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasInternationalTransfers"
          ],
          "line": 379,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.base_juridica?.tipo === 'consentimiento'"
          ],
          "line": 389,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "checkExistingEIPD",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 402,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const eipd of existingEIPDs"
          ],
          "line": 412,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity > 0.8"
          ],
          "line": 414,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 425,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "compareEIPDRelevance",
          "type": "method",
          "parameters": [
            "ratData",
            "eipd"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "checkExistingDPA",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 443,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.transferencias_internacionales?.paises"
          ],
          "line": 444,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "existingDPAs.length > 0"
          ],
          "line": 460,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 470,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "autoAssignDPOTasks",
          "type": "method",
          "parameters": [
            "tasks",
            "ratId",
            "tenantId"
          ],
          "line": 475,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const task of tasks"
          ],
          "line": 483,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "task.auto_assignable?.assignable"
          ],
          "line": 485,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "assignmentResult.success"
          ],
          "line": 492,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "creationResult.success"
          ],
          "line": 505,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 516,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "assignExistingDocument",
          "type": "method",
          "parameters": [
            "task",
            "assignmentInfo",
            "ratId"
          ],
          "line": 524,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 540,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "createNewDPOTask",
          "type": "method",
          "parameters": [
            "task",
            "ratId",
            "tenantId"
          ],
          "line": 545,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 564,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "logSupervision",
          "type": "method",
          "parameters": [
            "supervision",
            "userId",
            "tenantId"
          ],
          "line": 569,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 582,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "notifyInterventions",
          "type": "method",
          "parameters": [
            "interventions",
            "userId"
          ],
          "line": 587,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const intervention of interventions"
          ],
          "line": 588,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 602,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "getInterventionTitle",
          "type": "method",
          "parameters": [
            "type"
          ],
          "line": 608,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "performPeriodicSupervision",
          "type": "method",
          "parameters": [],
          "line": 620,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rat of recentRATs"
          ],
          "line": 630,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 643,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "getSupervisionDashboard",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 649,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "stats.length > 0"
          ],
          "line": 667,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 691,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "startSupervision",
          "type": "method",
          "parameters": [],
          "line": 696,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "enableAISupervisor",
          "type": "method",
          "parameters": [
            "userId"
          ],
          "line": 704,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 721,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "getInstructions",
          "type": "method",
          "parameters": [],
          "line": 726,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/aiSupervisor.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "executeCompleteTest",
          "type": "method",
          "parameters": [],
          "line": 19,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 47,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "testDatabaseConnections",
          "type": "method",
          "parameters": [],
          "line": 63,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of tables"
          ],
          "line": 70,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 79,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "testBasicDatabaseOperations",
          "type": "method",
          "parameters": [],
          "line": 93,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "updateError"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "selectError"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "deleteError"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "testAllForms",
          "type": "method",
          "parameters": [],
          "line": 162,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "forms.length === 0"
          ],
          "line": 165,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < forms.length; i++"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "testSingleForm",
          "type": "method",
          "parameters": [
            "form",
            "formId"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let j = 0; j < requiredFields.length; j++"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!field.value && field.hasAttribute('required')"
          ],
          "line": 195,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "field.value && !this.isValidEmail(field.value)"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "field.value"
          ],
          "line": 208,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "field.value && !pattern.test(field.value)"
          ],
          "line": 219,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "field.value"
          ],
          "line": 221,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 226,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "testAllButtons",
          "type": "method",
          "parameters": [],
          "line": 234,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "buttons.length === 0"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < buttons.length; i++"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "testSingleButton",
          "type": "method",
          "parameters": [
            "button",
            "index"
          ],
          "line": 248,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!isVisible"
          ],
          "line": 257,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isDisabled"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "button.type === 'submit'"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!form"
          ],
          "line": 276,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 283,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "testNavigation",
          "type": "method",
          "parameters": [],
          "line": 291,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "navLinks.length === 0"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const expectedRoute of expectedRoutes"
          ],
          "line": 304,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "linkExists"
          ],
          "line": 309,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < Math.min(navLinks.length",
            "10); i++"
          ],
          "line": 317,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!href"
          ],
          "line": 322,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "href.startsWith('#')"
          ],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "testCRUDOperations",
          "type": "method",
          "parameters": [],
          "line": 335,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of tables"
          ],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "testTableCRUD",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 343,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "listError"
          ],
          "line": 351,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "listData && listData.length > 0"
          ],
          "line": 359,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "singleError"
          ],
          "line": 367,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "testData"
          ],
          "line": 376,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "createError"
          ],
          "line": 383,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "updateError"
          ],
          "line": 395,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "deleteError"
          ],
          "line": 407,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 415,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "testValidations",
          "type": "method",
          "parameters": [],
          "line": 423,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "aiAgentActive"
          ],
          "line": 440,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "testModuleInteractions",
          "type": "method",
          "parameters": [],
          "line": 450,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "testOrganizationRATRelation",
          "type": "method",
          "parameters": [],
          "line": 461,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!orgs || orgs.length === 0"
          ],
          "line": 469,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 480,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 486,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "testRATProviderRelation",
          "type": "method",
          "parameters": [],
          "line": 491,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "testDPONotifications",
          "type": "method",
          "parameters": [],
          "line": 495,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 502,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 508,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "addResult",
          "type": "method",
          "parameters": [
            "prueba",
            "resultado",
            "motivo"
          ],
          "line": 514,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "getTestDataForTable",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 523,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "getUpdateDataForTable",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 548,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "isValidEmail",
          "type": "method",
          "parameters": [
            "email"
          ],
          "line": 558,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "generateSimpleReport",
          "type": "method",
          "parameters": [
            "executionTime"
          ],
          "line": 565,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "displayReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 586,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.failed > 0"
          ],
          "line": 613,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.warnings > 0"
          ],
          "line": 615,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/completeSystemTester.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 17,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "setupValidationRules",
          "type": "method",
          "parameters": [],
          "line": 28,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "validateBeforeInsert",
          "type": "method",
          "parameters": [
            "tableName",
            "data"
          ],
          "line": 79,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rules"
          ],
          "line": 94,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < records.length; i++"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules.field_validations"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules.referential_integrity"
          ],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules.business_rules"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "validateBeforeUpdate",
          "type": "method",
          "parameters": [
            "tableName",
            "data",
            "whereClause"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!whereValidation.valid"
          ],
          "line": 165,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!existenceValidation.exists"
          ],
          "line": 173,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules.field_validations"
          ],
          "line": 182,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rules.referential_integrity"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "validateRequiredFields",
          "type": "method",
          "parameters": [
            "record",
            "requiredFields",
            "recordIndex = 0"
          ],
          "line": 211,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value === undefined || value === null || value === ''"
          ],
          "line": 217,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof value === 'string' && value.trim() === ''"
          ],
          "line": 219,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "validateFieldFormats",
          "type": "method",
          "parameters": [
            "record",
            "fieldValidations",
            "recordIndex = 0"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rules.required && (value === undefined || value === null)"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "rules.type"
          ],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && !this.isValidEmail(value)"
          ],
          "line": 243,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && !this.isValidRUT(value)"
          ],
          "line": 249,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && !this.isValidPhone(value)"
          ],
          "line": 255,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && rules.minLength && value.length < rules.minLength"
          ],
          "line": 261,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && rules.maxLength && value.length > rules.maxLength"
          ],
          "line": 264,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "validateReferentialIntegrity",
          "type": "method",
          "parameters": [
            "record",
            "refRules",
            "recordIndex = 0"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [fieldName",
            "refRule] of Object.entries(refRules)"
          ],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "refRule.nullable && (!value || value === null)"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value"
          ],
          "line": 288,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "count === 0"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 303,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "validateBusinessRules",
          "type": "method",
          "parameters": [
            "tableName",
            "record",
            "businessRules",
            "recordIndex = 0"
          ],
          "line": 315,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rule of businessRules"
          ],
          "line": 318,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!result.valid"
          ],
          "line": 322,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rule.critical"
          ],
          "line": 323,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 330,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "applyBusinessRule",
          "type": "method",
          "parameters": [
            "tableName",
            "record",
            "ruleName",
            "recordIndex"
          ],
          "line": 341,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "ruleName"
          ],
          "line": 342,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "validateUniqueRUT",
          "type": "method",
          "parameters": [
            "record",
            "recordIndex"
          ],
          "line": 363,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!record.rut"
          ],
          "line": 364,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "count > 0"
          ],
          "line": 375,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 381,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "validateUniqueRATPerActivity",
          "type": "method",
          "parameters": [
            "record",
            "recordIndex"
          ],
          "line": 389,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!record.nombre_actividad || !record.tenant_id"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "count > 0"
          ],
          "line": 402,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 408,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "validateCompleteDPOInfo",
          "type": "method",
          "parameters": [
            "record",
            "recordIndex"
          ],
          "line": 416,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missingFields.length > 0"
          ],
          "line": 420,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "validateRiskLevel",
          "type": "method",
          "parameters": [
            "record",
            "recordIndex"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "record.nivel_riesgo"
          ],
          "line": 431,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!validLevels.includes(record.nivel_riesgo)"
          ],
          "line": 433,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "validateWhereClause",
          "type": "method",
          "parameters": [
            "whereClause"
          ],
          "line": 444,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!whereClause || typeof whereClause !== 'object'"
          ],
          "line": 447,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!hasUniqueField"
          ],
          "line": 459,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value === undefined || value === 'undefined'"
          ],
          "line": 466,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "validateRecordExists",
          "type": "method",
          "parameters": [
            "tableName",
            "whereClause"
          ],
          "line": 478,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 491,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 497,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "sanitizeDataForLog",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 505,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "sanitized[field]"
          ],
          "line": 511,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof sanitized[key] === 'string' && sanitized[key].length > 100"
          ],
          "line": 518,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "logValidationResults",
          "type": "method",
          "parameters": [
            "validation"
          ],
          "line": 529,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.valid"
          ],
          "line": 530,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.warnings.length > 0"
          ],
          "line": 547,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!validation.valid"
          ],
          "line": 557,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.integrityChecks.length > 200"
          ],
          "line": 562,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.validationErrors.length > 100"
          ],
          "line": 565,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "isValidEmail",
          "type": "method",
          "parameters": [
            "email"
          ],
          "line": 573,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "isValidRUT",
          "type": "method",
          "parameters": [
            "rut"
          ],
          "line": 578,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "isValidPhone",
          "type": "method",
          "parameters": [
            "phone"
          ],
          "line": 584,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "generateIntegrityReport",
          "type": "method",
          "parameters": [],
          "line": 593,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "summarizeErrors",
          "type": "method",
          "parameters": [],
          "line": 607,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!summary[table]"
          ],
          "line": 612,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "operation === 'INSERT'"
          ],
          "line": 632,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "operation === 'UPDATE'"
          ],
          "line": 634,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dataIntegrityValidator.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 18,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "startMonitoring",
          "type": "method",
          "parameters": [],
          "line": 37,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isMonitoring"
          ],
          "line": 38,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 58,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "performInitialHealthCheck",
          "type": "method",
          "parameters": [],
          "line": 67,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "testConnectivity",
          "type": "method",
          "parameters": [],
          "line": 113,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.message.includes('timeout')"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.message.includes('network')"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "responseTime > 3000"
          ],
          "line": 149,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "testMainTables",
          "type": "method",
          "parameters": [],
          "line": 166,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const tableName of mainTables"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.message.includes('does not exist')"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.message.includes('permission')"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "failedTables === 0"
          ],
          "line": 225,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "failedTables < mainTables.length / 2"
          ],
          "line": 227,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "testReferentialIntegrity",
          "type": "method",
          "parameters": [],
          "line": 245,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratError && orphanRATs"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rat of orphanRATs"
          ],
          "line": 257,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!orgExists"
          ],
          "line": 264,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!provError && orphanProviders"
          ],
          "line": 283,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const provider of orphanProviders"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratExists"
          ],
          "line": 291,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.issues.length > 0"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 313,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "testRLSPermissions",
          "type": "method",
          "parameters": [],
          "line": 325,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const testCase of testCases"
          ],
          "line": 336,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "withFilterError && withFilterError.message.includes('406')"
          ],
          "line": 357,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 366,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "testDataConsistency",
          "type": "method",
          "parameters": [],
          "line": 385,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "incompleteRATs && incompleteRATs.length > 0"
          ],
          "line": 396,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "duplicateOrgs"
          ],
          "line": 418,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "count > 1"
          ],
          "line": 425,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.inconsistencies.length > 0"
          ],
          "line": 439,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 446,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "calculateOverallStatus",
          "type": "method",
          "parameters": [
            "checks"
          ],
          "line": 458,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "logCriticalIssue",
          "type": "method",
          "parameters": [
            "type",
            "details"
          ],
          "line": 470,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "logConnectionIssue",
          "type": "method",
          "parameters": [
            "type",
            "error",
            "responseTime"
          ],
          "line": 495,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "issue.severity === 'CRITICAL'"
          ],
          "line": 509,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "logConsistencyError",
          "type": "method",
          "parameters": [
            "category",
            "details"
          ],
          "line": 529,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.severity === 'HIGH' || error.severity === 'CRITICAL'"
          ],
          "line": 542,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "setupPeriodicChecks",
          "type": "method",
          "parameters": [],
          "line": 562,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 567,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "setupRealtimeErrorDetection",
          "type": "method",
          "parameters": [],
          "line": 576,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "message.includes('Supabase') || message.includes('PostgreSQL')"
          ],
          "line": 584,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "analyzeRealTimeError",
          "type": "method",
          "parameters": [
            "message",
            "args"
          ],
          "line": 595,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "lowerMessage.includes('406') || lowerMessage.includes('not acceptable')"
          ],
          "line": 598,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "lowerMessage.includes('timeout') || lowerMessage.includes('network')"
          ],
          "line": 602,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "lowerMessage.includes('undefined') && lowerMessage.includes('id')"
          ],
          "line": 606,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "generateHealthReport",
          "type": "method",
          "parameters": [],
          "line": 614,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "generateDBRecommendations",
          "type": "method",
          "parameters": [],
          "line": 640,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.criticalIssues.length > 3"
          ],
          "line": 643,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rls406Errors.length > 1"
          ],
          "line": 655,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.consistencyErrors.length > 5"
          ],
          "line": 663,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "printHealthReport",
          "type": "method",
          "parameters": [],
          "line": 677,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.latest_check"
          ],
          "line": 684,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.recommendations.length > 0"
          ],
          "line": 691,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "stopMonitoring",
          "type": "method",
          "parameters": [],
          "line": 707,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 721,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/databaseHealthMonitor.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 4,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "loadRules",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "getRulesByCategory",
          "type": "method",
          "parameters": [
            "category"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rule of this.rules.values()"
          ],
          "line": 37,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rule.category === category"
          ],
          "line": 38,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "evaluateRAT",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rule of this.rules.values()"
          ],
          "line": 57,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "result.triggered"
          ],
          "line": 60,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "result.severity"
          ],
          "line": 61,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "applyRule",
          "type": "method",
          "parameters": [
            "rule",
            "ratData"
          ],
          "line": 87,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "conditionMet"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "evaluateCondition",
          "type": "method",
          "parameters": [
            "condition",
            "ratData"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "executeCondition",
          "type": "method",
          "parameters": [
            "condition",
            "context"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "e"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "hasSensitiveData",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "hasInternationalTransfers",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "isHighVolume",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 158,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "extractContext",
          "type": "method",
          "parameters": [
            "rule",
            "ratData"
          ],
          "line": 167,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rule.context_fields"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "getNestedValue",
          "type": "method",
          "parameters": [
            "obj",
            "path"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "logRuleExecution",
          "type": "method",
          "parameters": [
            "ruleId",
            "ratId",
            "triggered"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "ensureRulesLoaded",
          "type": "method",
          "parameters": [],
          "line": 198,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "needsRefresh || this.rules.size === 0"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "createRule",
          "type": "method",
          "parameters": [
            "ruleData",
            "userId"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 229,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "updateRule",
          "type": "method",
          "parameters": [
            "ruleId",
            "updates",
            "userId"
          ],
          "line": 235,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "deactivateRule",
          "type": "method",
          "parameters": [
            "ruleId",
            "userId"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "getArticleDetails",
          "type": "method",
          "parameters": [
            "articleNumber"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 271,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "validateRuleCondition",
          "type": "method",
          "parameters": [
            "condition"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 298,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "invalidVariables.length > 0"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "extractVariables",
          "type": "method",
          "parameters": [
            "condition"
          ],
          "line": 315,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "getRuleExecutionStats",
          "type": "method",
          "parameters": [],
          "line": 321,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ruleStats[stat.rule_id]"
          ],
          "line": 337,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "stat.triggered"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "syncWithLatestLaw",
          "type": "method",
          "parameters": [],
          "line": 364,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const update of updates"
          ],
          "line": 375,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 380,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "processLawUpdate",
          "type": "method",
          "parameters": [
            "update"
          ],
          "line": 386,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "update.update_type === 'new_article'"
          ],
          "line": 388,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "update.update_type === 'modified_article'"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "update.update_type === 'new_requirement'"
          ],
          "line": 392,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 401,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "createRuleFromArticle",
          "type": "method",
          "parameters": [
            "update"
          ],
          "line": 406,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "updateRulesForArticle",
          "type": "method",
          "parameters": [
            "update"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "getComplianceGuidance",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 444,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "alert.action?.includes('EIPD')"
          ],
          "line": 463,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "alert.action?.includes('DPA')"
          ],
          "line": 471,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "calculateDeadline",
          "type": "method",
          "parameters": [
            "action"
          ],
          "line": 483,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "ensureRulesLoaded",
          "type": "method",
          "parameters": [],
          "line": 498,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "needsRefresh || this.rules.size === 0"
          ],
          "line": 502,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "getArticleText",
          "type": "method",
          "parameters": [
            "articleNumber"
          ],
          "line": 507,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 518,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "suggestBestPractices",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 524,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 536,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "inferCategory",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 542,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('marketing') || finalidad.includes('publicidad')"
          ],
          "line": 545,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('empleado') || finalidad.includes('nomina')"
          ],
          "line": 548,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('cliente') || finalidad.includes('venta')"
          ],
          "line": 551,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('salud') || finalidad.includes('medico')"
          ],
          "line": 554,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "recordCompliance",
          "type": "method",
          "parameters": [
            "ratId",
            "complianceLevel",
            "userId"
          ],
          "line": 561,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 571,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "getComplianceTrend",
          "type": "method",
          "parameters": [
            "tenantId",
            "days = 30"
          ],
          "line": 576,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 592,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/dynamicLegalRules.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 12,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "setupErrorPatterns",
          "type": "method",
          "parameters": [],
          "line": 25,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "init",
          "type": "method",
          "parameters": [],
          "line": 60,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 70,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "setupGlobalErrorCapture",
          "type": "method",
          "parameters": [],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "setupConsoleMonitoring",
          "type": "method",
          "parameters": [],
          "line": 103,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "setupFetchMonitoring",
          "type": "method",
          "parameters": [],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!response.ok"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "duration > 5000"
          ],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 157,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "logError",
          "type": "method",
          "parameters": [
            "type",
            "errorData",
            "context = {}"
          ],
          "line": 174,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorEntry.severity === 'CRITICAL'"
          ],
          "line": 193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.errorLog.length > 500"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "analyzeConsoleMessage",
          "type": "method",
          "parameters": [
            "level",
            "args"
          ],
          "line": 210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [patternType",
            "config] of this.patterns"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "config.patterns.some(pattern => message.includes(pattern.toLowerCase()))"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "determineSeverity",
          "type": "method",
          "parameters": [
            "type",
            "errorData"
          ],
          "line": 228,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [patternType",
            "config] of this.patterns"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "config.patterns.some(pattern => errorText.includes(pattern.toLowerCase()))"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "type.includes('CRITICAL') || type.includes('406') || type.includes('undefined')"
          ],
          "line": 238,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "type.includes('HTTP_ERROR') || type.includes('MISSING')"
          ],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "createCriticalAlert",
          "type": "method",
          "parameters": [
            "errorEntry"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "generateAlertMessage",
          "type": "method",
          "parameters": [
            "errorEntry"
          ],
          "line": 276,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "errorEntry.type"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "logSpecificError",
          "type": "method",
          "parameters": [
            "errorEntry"
          ],
          "line": 298,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorEntry.severity === 'CRITICAL'"
          ],
          "line": 308,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorEntry.severity === 'HIGH'"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "fileError"
          ],
          "line": 316,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "startPeriodicReporting",
          "type": "method",
          "parameters": [],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "generatePeriodicReport",
          "type": "method",
          "parameters": [],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "getFullReport",
          "type": "method",
          "parameters": [],
          "line": 362,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "analyzeErrorPatterns",
          "type": "method",
          "parameters": [],
          "line": 386,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [],
          "line": 403,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rls406Count > 3"
          ],
          "line": 410,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "undefinedIdCount > 2"
          ],
          "line": 418,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "criticalCount > 5"
          ],
          "line": 426,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "stop",
          "type": "method",
          "parameters": [],
          "line": 440,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 456,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorMonitoringOnly.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 12,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "init",
          "type": "method",
          "parameters": [],
          "line": 38,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 52,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "registerErrorPatterns",
          "type": "method",
          "parameters": [],
          "line": 60,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "detectErrorType",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [type",
            "config] of this.errorPatterns"
          ],
          "line": 96,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "config.patterns.some(pattern => errorMsg.includes(pattern))"
          ],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "setupGlobalErrorHandlers",
          "type": "method",
          "parameters": [],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!response.ok && this.isSupabaseRequest(args[0])"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isSupabaseRequest(args[0])"
          ],
          "line": 134,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isSupabaseError(event.reason)"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isSupabaseError({ message: errorMsg })"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "isSupabaseRequest",
          "type": "method",
          "parameters": [
            "url"
          ],
          "line": 163,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "isSupabaseError",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "handleSupabaseHttpError",
          "type": "method",
          "parameters": [
            "status",
            "url",
            "response"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "parseError"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "handleSupabaseNetworkError",
          "type": "method",
          "parameters": [
            "error",
            "url"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "preventError",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorType.autoFix"
          ],
          "line": 224,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "applyAutoFix",
          "type": "method",
          "parameters": [
            "errorType"
          ],
          "line": 236,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "errorType.solution"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "retryWithBackoff",
          "type": "method",
          "parameters": [
            "originalError",
            "maxRetries = 3"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let attempt = 1; attempt <= maxRetries; attempt++"
          ],
          "line": 261,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "logErrorForAnalysis",
          "type": "method",
          "parameters": [
            "errorType"
          ],
          "line": 273,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "startPeriodicHealthCheck",
          "type": "method",
          "parameters": [],
          "line": 287,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "performHealthCheck",
          "type": "method",
          "parameters": [],
          "line": 296,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "successRate < 80"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 316,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "getHealthReport",
          "type": "method",
          "parameters": [],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.preventedErrors.length > 10"
          ],
          "line": 341,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.healthMetrics.fallbacksUsed > this.healthMetrics.totalQueries * 0.3"
          ],
          "line": 345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "recentRLSErrors.length > 5"
          ],
          "line": 353,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "stop",
          "type": "method",
          "parameters": [],
          "line": 363,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 380,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/errorPreventionMonitor.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 9,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "setupErrorDirectory",
          "type": "method",
          "parameters": [],
          "line": 21,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 38,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "logCriticalError",
          "type": "method",
          "parameters": [
            "type",
            "details",
            "source = 'UNKNOWN'"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "logHighError",
          "type": "method",
          "parameters": [
            "type",
            "details",
            "source = 'UNKNOWN'"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "logMediumError",
          "type": "method",
          "parameters": [
            "type",
            "details",
            "source = 'UNKNOWN'"
          ],
          "line": 82,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "logEarlyWarning",
          "type": "method",
          "parameters": [
            "type",
            "predictedError",
            "preventionAction",
            "details"
          ],
          "line": 99,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "logDatabaseHealth",
          "type": "method",
          "parameters": [
            "healthReport"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "logValidationError",
          "type": "method",
          "parameters": [
            "tableName",
            "operation",
            "validationResult"
          ],
          "line": 134,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "writeErrorToFile",
          "type": "method",
          "parameters": [
            "errorEntry",
            "filename = null"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "writeToFile",
          "type": "method",
          "parameters": [
            "filename",
            "content"
          ],
          "line": 176,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "window.showSaveFilePicker"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 186,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "writeWithFileSystemAPI",
          "type": "method",
          "parameters": [
            "filename",
            "content"
          ],
          "line": 197,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.name !== 'AbortError'"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "downloadFile",
          "type": "method",
          "parameters": [
            "filename",
            "content"
          ],
          "line": 223,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "formatLogEntry",
          "type": "method",
          "parameters": [
            "type",
            "entry"
          ],
          "line": 249,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "entry.details"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "entry.predicted_error"
          ],
          "line": 269,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "entry.errors && entry.errors.length > 0"
          ],
          "line": 275,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "entry.warnings && entry.warnings.length > 0"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "entry.system_state"
          ],
          "line": 293,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "formatDetails",
          "type": "method",
          "parameters": [
            "details"
          ],
          "line": 307,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof details === 'string'"
          ],
          "line": 308,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof details === 'object'"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "formatHealthReport",
          "type": "method",
          "parameters": [
            "healthEntry"
          ],
          "line": 326,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "healthEntry.checks"
          ],
          "line": 337,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checkResult.error"
          ],
          "line": 342,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checkResult.details"
          ],
          "line": 345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "healthEntry.critical_issues && healthEntry.critical_issues.length > 0"
          ],
          "line": 352,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "captureSystemState",
          "type": "method",
          "parameters": [],
          "line": 367,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "captureContext",
          "type": "method",
          "parameters": [],
          "line": 386,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "formatSystemState",
          "type": "method",
          "parameters": [
            "state"
          ],
          "line": 398,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof state.memory === 'object'"
          ],
          "line": 402,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof state.connection === 'object'"
          ],
          "line": 405,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "generateDailySummary",
          "type": "method",
          "parameters": [],
          "line": 414,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "formatDailySummary",
          "type": "method",
          "parameters": [
            "summary"
          ],
          "line": 436,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "summary.most_common_errors.length > 0"
          ],
          "line": 451,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "getMostCommonErrors",
          "type": "method",
          "parameters": [],
          "line": 466,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "clearErrorBuffer",
          "type": "method",
          "parameters": [],
          "line": 483,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "getStats",
          "type": "method",
          "parameters": [],
          "line": 491,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/fileErrorLogger.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "validateAllModules",
          "type": "method",
          "parameters": [],
          "line": 20,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const module of modules"
          ],
          "line": 42,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 48,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "validateModule",
          "type": "method",
          "parameters": [
            "module"
          ],
          "line": 71,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasErrors"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasWarnings"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 120,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "checkComponentFile",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const path of possiblePaths"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "response.ok"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "e"
          ],
          "line": 146,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 152,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "validateJSSyntax",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 160,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!componentPath"
          ],
          "line": 165,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 184,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "validateImports",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 192,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missingImports.length > 0"
          ],
          "line": 205,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 216,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "validateHTMLStructure",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 224,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "validateSupabaseIntegration",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 258,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "validateMUIUsage",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 282,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "validateRouting",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!routeExists"
          ],
          "line": 315,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 326,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "generateValidationReport",
          "type": "method",
          "parameters": [
            "results"
          ],
          "line": 334,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "summary.errorCount > 0"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "summary.warningCount > 0"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "summary.errorCount > 0"
          ],
          "line": 354,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "summary.warningCount > 0"
          ],
          "line": 363,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "saveValidationReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 383,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 402,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "validateComponentLive",
          "type": "method",
          "parameters": [
            "componentName",
            "mountElement = null"
          ],
          "line": 410,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.jsErrors.length > 0"
          ],
          "line": 442,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.cssErrors.length > 0 || validation.accessibilityIssues.length > 0"
          ],
          "line": 444,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.renderSuccess && validation.htmlValid"
          ],
          "line": 446,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 452,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "testComponentRender",
          "type": "method",
          "parameters": [
            "componentName",
            "mountElement"
          ],
          "line": 463,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 472,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "validateGeneratedHTML",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 481,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 491,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "captureJSErrors",
          "type": "method",
          "parameters": [],
          "line": 500,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "validateAppliedCSS",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 531,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "backgroundColor === 'rgb(255",
            "255",
            "255)' || backgroundColor === 'white'"
          ],
          "line": 541,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!usesDarkTheme && element.children.length > 0"
          ],
          "line": 560,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 568,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "checkAccessibility",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 581,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!button.textContent && !button.getAttribute('aria-label')"
          ],
          "line": 590,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "headings.length === 0 && element.children.length > 3"
          ],
          "line": 601,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "lowContrastElements.length > 0"
          ],
          "line": 611,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 619,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "measurePerformance",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 632,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "window.performance"
          ],
          "line": 643,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "performance.memory"
          ],
          "line": 648,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 654,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "getComponentPath",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 665,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "componentUsesSupabase",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 677,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "getComponentSpecificChecks",
          "type": "method",
          "parameters": [
            "componentName"
          ],
          "line": 689,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "checkRouteInApp",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 716,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "hasImproperNesting",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 721,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "hasRequiredAttributes",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 727,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const el of interactiveElements"
          ],
          "line": 731,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!el.getAttribute('aria-label') && !el.textContent && !el.getAttribute('title')"
          ],
          "line": 732,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "quickValidation",
          "type": "method",
          "parameters": [],
          "line": 743,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "printStatusReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 760,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.errorCount === 0"
          ],
          "line": 772,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "process.env.NODE_ENV === 'development'"
          ],
          "line": 797,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/frontendValidator.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 15,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "runCompleteSystemSimulation",
          "type": "method",
          "parameters": [],
          "line": 32,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isRunning"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const testName of testSequence"
          ],
          "line": 60,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!testResult.success"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "executeTest",
          "type": "method",
          "parameters": [
            "testName"
          ],
          "line": 95,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "testName"
          ],
          "line": 111,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "simulateLoginFlow",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 164,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!loginButton"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!loginForm"
          ],
          "line": 182,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "simulateNavigationTest",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 195,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const item of navigationItems"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!navElement"
          ],
          "line": 211,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!pageLoaded"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "simulateOrganizationCreation",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!newOrgButton"
          ],
          "line": 243,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!saveButton"
          ],
          "line": 273,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!success"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!savedOrg"
          ],
          "line": 296,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "simulateRATCreationFlow",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 307,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!newRATButton"
          ],
          "line": 318,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "simulateRATFormSteps",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 331,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "fillRATStep1",
          "type": "method",
          "parameters": [],
          "line": 374,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "fillRATStep2",
          "type": "method",
          "parameters": [],
          "line": 383,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const category of categories"
          ],
          "line": 386,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checkbox"
          ],
          "line": 388,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "fillRATStep3",
          "type": "method",
          "parameters": [],
          "line": 395,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "baseLegal"
          ],
          "line": 398,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "fillRATStep4",
          "type": "method",
          "parameters": [],
          "line": 404,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "fillRATStep5",
          "type": "method",
          "parameters": [],
          "line": 412,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "fillRATStep6",
          "type": "method",
          "parameters": [],
          "line": 419,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "plazoSelect"
          ],
          "line": 421,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "fillRATStep7",
          "type": "method",
          "parameters": [],
          "line": 427,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "noTransfer"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "fillRATStep8",
          "type": "method",
          "parameters": [],
          "line": 436,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const measure of securityMeasures"
          ],
          "line": 438,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checkbox"
          ],
          "line": 440,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "finalizeRAT",
          "type": "method",
          "parameters": [],
          "line": 447,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!saveButton"
          ],
          "line": 451,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "verifyRATCreation",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 458,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!successMessage"
          ],
          "line": 464,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rats || rats.length === 0"
          ],
          "line": 475,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "humanClick",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 486,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "humanType",
          "type": "method",
          "parameters": [
            "element",
            "text",
            "options = {}"
          ],
          "line": 502,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < text.length; i++"
          ],
          "line": 515,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "findElement",
          "type": "method",
          "parameters": [
            "selectors",
            "timeout = 5000"
          ],
          "line": 530,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "Date.now() - startTime < timeout"
          ],
          "line": 535,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const selector of selectorList"
          ],
          "line": 536,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!element && selector.includes(':contains(')"
          ],
          "line": 541,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "element && this.isElementVisible(element)"
          ],
          "line": 552,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 555,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "fillForm",
          "type": "method",
          "parameters": [
            "fieldMap"
          ],
          "line": 566,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [selector",
            "value] of Object.entries(fieldMap)"
          ],
          "line": 567,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "field"
          ],
          "line": 569,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "clickNextButton",
          "type": "method",
          "parameters": [],
          "line": 576,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "nextButton"
          ],
          "line": 584,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "selectOption",
          "type": "method",
          "parameters": [
            "selectElement",
            "value"
          ],
          "line": 590,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "waitForPageLoad",
          "type": "method",
          "parameters": [
            "timeout = 10000"
          ],
          "line": 598,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "Date.now() - startTime < timeout"
          ],
          "line": 601,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "document.readyState === 'complete'"
          ],
          "line": 602,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "waitForSuccess",
          "type": "method",
          "parameters": [
            "timeout = 5000"
          ],
          "line": 612,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "Date.now() - startTime < timeout"
          ],
          "line": 623,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const selector of successSelectors"
          ],
          "line": 624,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "element && this.isElementVisible(element)"
          ],
          "line": 626,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "navigateToPage",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 636,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "link"
          ],
          "line": 640,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "humanDelay",
          "type": "method",
          "parameters": [
            "type",
            "customMs"
          ],
          "line": 652,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "isElementVisible",
          "type": "method",
          "parameters": [
            "element"
          ],
          "line": 660,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "getCurrentElement",
          "type": "method",
          "parameters": [],
          "line": 669,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "formatDuration",
          "type": "method",
          "parameters": [
            "ms"
          ],
          "line": 673,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [
            "simulation"
          ],
          "line": 679,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "simulation.success_rate < 80"
          ],
          "line": 682,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "analyzeCommonErrors",
          "type": "method",
          "parameters": [
            "errors"
          ],
          "line": 702,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!errorGroups[key]"
          ],
          "line": 708,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "getErrorRecommendation",
          "type": "method",
          "parameters": [
            "errorMessage"
          ],
          "line": 724,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorMessage.includes('no encontrado')"
          ],
          "line": 725,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorMessage.includes('base de datos')"
          ],
          "line": 728,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorMessage.includes('navegación')"
          ],
          "line": 731,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "saveSimulationResults",
          "type": "method",
          "parameters": [
            "simulation"
          ],
          "line": 737,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 748,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "simulateProviderManagement",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 754,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "simulateReportGeneration",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 759,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "simulateDashboardInteraction",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 764,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "simulateSystemConfiguration",
          "type": "method",
          "parameters": [
            "testResult"
          ],
          "line": 769,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/humanInteractionSimulator.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "generateFullReport",
          "type": "method",
          "parameters": [],
          "line": 18,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 40,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "checkDeploymentStatus",
          "type": "method",
          "parameters": [],
          "line": 53,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "checkAgentStatus",
          "type": "method",
          "parameters": [],
          "line": 76,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "activeAgents && activeAgents.length > 0"
          ],
          "line": 85,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "getRecentActivity",
          "type": "method",
          "parameters": [],
          "line": 115,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 134,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "getComplianceMetrics",
          "type": "method",
          "parameters": [],
          "line": 144,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "analyzeErrors",
          "type": "method",
          "parameters": [],
          "line": 178,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "checkSupabaseHealth",
          "type": "method",
          "parameters": [],
          "line": 188,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "getUserInteractions",
          "type": "method",
          "parameters": [],
          "line": 218,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 237,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "getDocumentGeneration",
          "type": "method",
          "parameters": [],
          "line": 247,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 266,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [],
          "line": 277,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errorAnalysis.errors_24h > 10"
          ],
          "line": 283,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "compliance.overall_compliance < 85"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!agentStatus.is_active"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "recommendations.length === 0"
          ],
          "line": 314,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "groupByType",
          "type": "method",
          "parameters": [
            "items",
            "typeField = 'activity_type'"
          ],
          "line": 335,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "analyzeRATs",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 344,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "analyzeNotifications",
          "type": "method",
          "parameters": [
            "notifications"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "calculateOverallCompliance",
          "type": "method",
          "parameters": [
            "ratMetrics",
            "notificationMetrics"
          ],
          "line": 375,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratMetrics.with_sensitive_data > 0"
          ],
          "line": 379,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "notificationMetrics.overdue > 0"
          ],
          "line": 384,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "calculateSuccessRate",
          "type": "method",
          "parameters": [
            "documents"
          ],
          "line": 391,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "getMostCommonErrors",
          "type": "method",
          "parameters": [
            "errors"
          ],
          "line": 398,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "saveReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 409,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 421,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "formatConsoleReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 429,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "executeReport",
          "type": "method",
          "parameters": [],
          "line": 437,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "process.env.NODE_ENV === 'production'"
          ],
          "line": 449,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/iaAgentReporter.js"
        },
        {
          "name": "superSafeSupabaseQuery",
          "type": "arrow",
          "parameters": [
            "tableName",
            "queryFn",
            "options"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "getSystemStatus",
          "type": "arrow",
          "parameters": [],
          "line": 255,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "runSystemTest",
          "type": "arrow",
          "parameters": [],
          "line": 260,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 13,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "init",
          "type": "method",
          "parameters": [],
          "line": 26,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isInitialized"
          ],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 45,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "getSystemStatus",
          "type": "method",
          "parameters": [],
          "line": 53,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "generateSystemSummary",
          "type": "method",
          "parameters": [],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "calculateSystemHealth",
          "type": "method",
          "parameters": [],
          "line": 95,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "logSystemStatus",
          "type": "method",
          "parameters": [],
          "line": 108,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "status.summary.recommendations.length > 0"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "superSafeQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "queryFn",
            "options = {}"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "options.fallbackFn"
          ],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "runSystemTest",
          "type": "method",
          "parameters": [],
          "line": 159,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "testSmartClient",
          "type": "method",
          "parameters": [],
          "line": 174,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "testRLSGuard",
          "type": "method",
          "parameters": [],
          "line": 184,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "testErrorMonitor",
          "type": "method",
          "parameters": [],
          "line": 196,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 203,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "document.readyState === 'loading'"
          ],
          "line": 215,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/index.js"
        },
        {
          "name": "sanitizeString",
          "type": "method",
          "parameters": [
            "input"
          ],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "validateRUT",
          "type": "method",
          "parameters": [
            "rut"
          ],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rutRegex.test(cleaned.replace(/\\./g",
            "''))"
          ],
          "line": 43,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = rutNumber.length - 1; i >= 0; i--"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "calculatedDV !== dv"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "validateEmail",
          "type": "method",
          "parameters": [
            "email"
          ],
          "line": 73,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!emailRegex.test(cleaned)"
          ],
          "line": 79,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "cleaned.includes('<') || cleaned.includes('>') || cleaned.includes('\"')"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "sanitizeCompanyName",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 94,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "validatePhone",
          "type": "method",
          "parameters": [
            "phone"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!phoneRegex.test(cleaned)"
          ],
          "line": 119,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "sanitizeLongText",
          "type": "method",
          "parameters": [
            "text",
            "maxLength = 5000"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "validateURL",
          "type": "method",
          "parameters": [
            "url"
          ],
          "line": 138,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!['http:'",
            "'https:'].includes(urlObj.protocol)"
          ],
          "line": 145,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "url.includes('javascript:') || url.includes('data:')"
          ],
          "line": 150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "sanitizeObject",
          "type": "method",
          "parameters": [
            "obj"
          ],
          "line": 163,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [key",
            "value] of Object.entries(obj)"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof value === 'string'"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(value)"
          ],
          "line": 174,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof value === 'object' && value !== null"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "validateDate",
          "type": "method",
          "parameters": [
            "date"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isNaN(dateObj.getTime())"
          ],
          "line": 196,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "year < 1900 || year > 2100"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "sanitizeSQLParam",
          "type": "method",
          "parameters": [
            "param"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "validateNumber",
          "type": "method",
          "parameters": [
            "num",
            "min = null",
            "max = null"
          ],
          "line": 228,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "isNaN(parsed)"
          ],
          "line": 231,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "min !== null && parsed < min"
          ],
          "line": 235,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "max !== null && parsed > max"
          ],
          "line": 239,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "validatePassword",
          "type": "method",
          "parameters": [
            "password"
          ],
          "line": 249,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "password.length < 8"
          ],
          "line": 254,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!/[A-Z]/.test(password)"
          ],
          "line": 258,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!/[a-z]/.test(password)"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!/[0-9]/.test(password)"
          ],
          "line": 266,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!/[!@#$%^&*]/.test(password)"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "errors.length > 0"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "sanitizeFileName",
          "type": "method",
          "parameters": [
            "fileName"
          ],
          "line": 284,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "validateFileSize",
          "type": "method",
          "parameters": [
            "sizeInBytes",
            "maxSizeMB = 10"
          ],
          "line": 298,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "sizeInBytes > maxSizeBytes"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "validateFileType",
          "type": "method",
          "parameters": [
            "fileName",
            "allowedTypes = ['pdf'",
            "'doc'",
            "'docx'",
            "'xls'",
            "'xlsx'",
            "'jpg'",
            "'jpeg'",
            "'png']"
          ],
          "line": 311,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!allowedTypes.includes(extension)"
          ],
          "line": 314,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/inputSanitizer.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "executeAllTests",
          "type": "method",
          "parameters": [],
          "line": 20,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 62,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "testDatabase",
          "type": "method",
          "parameters": [],
          "line": 72,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of tables"
          ],
          "line": 87,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 94,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 107,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rat of rats"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!org"
          ],
          "line": 116,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "testNavigation",
          "type": "method",
          "parameters": [],
          "line": 138,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const route of expectedRoutes"
          ],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 169,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "testForms",
          "type": "method",
          "parameters": [],
          "line": 180,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < Math.min(forms.length",
            "5); i++"
          ],
          "line": 187,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "testCRUDOperations",
          "type": "method",
          "parameters": [],
          "line": 223,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 246,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "testCreate",
          "type": "method",
          "parameters": [],
          "line": 254,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 272,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "testRead",
          "type": "method",
          "parameters": [
            "recordId"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 290,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "testUpdate",
          "type": "method",
          "parameters": [
            "recordId"
          ],
          "line": 295,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 307,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "testDelete",
          "type": "method",
          "parameters": [
            "recordId"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "testValidationSystem",
          "type": "method",
          "parameters": [],
          "line": 332,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 357,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "testPerformance",
          "type": "method",
          "parameters": [],
          "line": 368,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "performance.memory"
          ],
          "line": 388,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 395,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "generateSummary",
          "type": "method",
          "parameters": [
            "tests",
            "totalTime"
          ],
          "line": 406,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "displayResults",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 427,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.error"
          ],
          "line": 443,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.issues?.length > 0"
          ],
          "line": 447,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.tables"
          ],
          "line": 452,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.operations"
          ],
          "line": 458,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "test.metrics"
          ],
          "line": 464,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.summary.overall_status === 'NEEDS_ATTENTION'"
          ],
          "line": 473,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.summary.overall_status === 'GOOD'"
          ],
          "line": 475,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "process.env.NODE_ENV === 'development'"
          ],
          "line": 494,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "document.readyState === 'complete'"
          ],
          "line": 496,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/instantSystemTest.js"
        },
        {
          "name": "HelpProvider",
          "type": "arrow",
          "parameters": [
            "{ children }"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "hideHelp",
          "type": "arrow",
          "parameters": [],
          "line": 282,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "addSmartAlert",
          "type": "arrow",
          "parameters": [
            "alert"
          ],
          "line": 286,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "removeSmartAlert",
          "type": "arrow",
          "parameters": [
            "alertId"
          ],
          "line": 290,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "SmartAlertSystem",
          "type": "arrow",
          "parameters": [
            "{ alerts",
            "onRemove }"
          ],
          "line": 313,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "ContextualTooltip",
          "type": "arrow",
          "parameters": [
            "{ tooltip",
            "onClose }"
          ],
          "line": 337,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "HelpButton",
          "type": "arrow",
          "parameters": [
            "{ fieldId",
            "size = 'small'",
            "variant = 'icon' }"
          ],
          "line": 392,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "handleClick",
          "type": "arrow",
          "parameters": [],
          "line": 395,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "SmartValidationAlert",
          "type": "arrow",
          "parameters": [
            "{ validation",
            "onAction }"
          ],
          "line": 416,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "ProgressIndicator",
          "type": "arrow",
          "parameters": [
            "{ currentStep",
            "totalSteps",
            "stepNames = [] }"
          ],
          "line": 433,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "InlineHelper",
          "type": "arrow",
          "parameters": [
            "{ fieldId",
            "userContext",
            "children }"
          ],
          "line": 484,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "RealTimeValidator",
          "type": "arrow",
          "parameters": [
            "{ fieldId",
            "value",
            "onValidation }"
          ],
          "line": 535,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "AutoCompleteField",
          "type": "arrow",
          "parameters": [
            "{ fieldId",
            "value",
            "onChange",
            "userContext",
            "...props }"
          ],
          "line": 634,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "handleSuggestionClick",
          "type": "arrow",
          "parameters": [
            "suggestion"
          ],
          "line": 658,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!context"
          ],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 17,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "loadHelpContent",
          "type": "method",
          "parameters": [],
          "line": 23,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 38,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "getContextualHelp",
          "type": "method",
          "parameters": [
            "fieldId",
            "userContext = {}"
          ],
          "line": 44,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!helpItem"
          ],
          "line": 46,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "userContext.industry && helpItem.industry_specific"
          ],
          "line": 53,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "industryHelp"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "userContext.ratType && helpItem.type_specific"
          ],
          "line": 61,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeHelp"
          ],
          "line": 63,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "getDefaultHelp",
          "type": "method",
          "parameters": [
            "fieldId"
          ],
          "line": 82,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "logHelpUsage",
          "type": "method",
          "parameters": [
            "fieldId",
            "userId"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "getSmartSuggestions",
          "type": "method",
          "parameters": [
            "fieldId",
            "currentValue",
            "context"
          ],
          "line": 120,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 131,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "trackFieldProgress",
          "type": "method",
          "parameters": [
            "fieldId",
            "userId",
            "completed",
            "timeSpent"
          ],
          "line": 137,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "getPersonalizedTips",
          "type": "method",
          "parameters": [
            "userId",
            "currentStep"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!userStats || userStats.help_usage_count < 3"
          ],
          "line": 165,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "userStats?.average_time_per_step > 300"
          ],
          "line": 173,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 185,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "getStepSpecificTips",
          "type": "method",
          "parameters": [
            "step",
            "userStats"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "updateUserHelpStats",
          "type": "method",
          "parameters": [
            "userId",
            "action"
          ],
          "line": 219,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "fetchError && fetchError.code === 'PGRST116'"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "existing"
          ],
          "line": 240,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 254,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "variant === 'icon'"
          ],
          "line": 399,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation && !validation.valid"
          ],
          "line": 420,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "fieldId"
          ],
          "line": 490,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tips.length > 0"
          ],
          "line": 493,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && value.length > 3"
          ],
          "line": 540,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "onValidation"
          ],
          "line": 545,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 548,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 575,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "loadTemplates",
          "type": "method",
          "parameters": [],
          "line": 579,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 592,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "suggestCompletion",
          "type": "method",
          "parameters": [
            "fieldId",
            "partialValue",
            "context"
          ],
          "line": 597,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 611,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "recordCompletion",
          "type": "method",
          "parameters": [
            "fieldId",
            "finalValue",
            "wasSuggested",
            "userId"
          ],
          "line": 617,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 628,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "value && value.length > 10"
          ],
          "line": 644,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/interactiveHelper.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 5,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "initializeRules",
          "type": "method",
          "parameters": [],
          "line": 14,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rat of ratsAltoRiesgo"
          ],
          "line": 23,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tieneEIPD"
          ],
          "line": 25,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const eipd of eipds"
          ],
          "line": 44,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "eipd.status === 'APROBADO' && tareasEIPD.length === 0"
          ],
          "line": 48,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rat of rats"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!estaEnInventario"
          ],
          "line": 70,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const tarea of tareasPendientes"
          ],
          "line": 90,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tarea.rat_id"
          ],
          "line": 91,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratExiste"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "auditarSistemaCompleto",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isAuditing"
          ],
          "line": 111,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rule of this.sequenceRules"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "inconsistencias.length === 0"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "ruleError"
          ],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 175,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "getAllCounts",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 186,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "getRATsByRisk",
          "type": "method",
          "parameters": [
            "tenantId",
            "riskLevel"
          ],
          "line": 209,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "getEIPDsByRATs",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratIds"
          ],
          "line": 221,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "getAllRATs",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 234,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "getInventarioRATs",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 245,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "getEIPDs",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 255,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "getDPOTasksByEIPD",
          "type": "method",
          "parameters": [
            "tenantId",
            "eipdId"
          ],
          "line": 265,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "getDPOPendingTasks",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 276,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "checkRATExists",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 287,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [
            "inconsistencies"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const category of inconsistencies"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const issue of category.issues || []"
          ],
          "line": 303,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "issue.problema"
          ],
          "line": 304,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "autoFixInconsistencies",
          "type": "method",
          "parameters": [
            "tenantId",
            "auditReport"
          ],
          "line": 342,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const recommendation of auditReport.recommendations || []"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "recommendation.action"
          ],
          "line": 353,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 374,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "autoGenerateEIPDForRAT",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 426,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "autoRegisterRATInInventory",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 432,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 472,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "cleanupOrphanTask",
          "type": "method",
          "parameters": [
            "tenantId",
            "taskId"
          ],
          "line": 478,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 499,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "saveAuditReport",
          "type": "method",
          "parameters": [
            "auditReport"
          ],
          "line": 506,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 530,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "startPeriodicAudit",
          "type": "method",
          "parameters": [
            "tenantId",
            "intervalMinutes = 30"
          ],
          "line": 537,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "auditReport.summary.failed_rules > 0"
          ],
          "line": 545,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 550,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "validateBeforeAction",
          "type": "method",
          "parameters": [
            "tenantId",
            "action",
            "data"
          ],
          "line": 557,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "action"
          ],
          "line": 560,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "validateRATCanBeClosed",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 572,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!rat.nombre_actividad || !rat.base_legal"
          ],
          "line": 578,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat.nivel_riesgo === 'ALTO'"
          ],
          "line": 583,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "eipds.length === 0"
          ],
          "line": 585,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!eipds.some(e => e.status === 'APROBADO')"
          ],
          "line": 587,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tareasDPO.some(t => t.estado === 'completada')"
          ],
          "line": 594,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 604,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "getRATById",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 612,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "getDPOTasksByRAT",
          "type": "method",
          "parameters": [
            "tenantId",
            "ratId"
          ],
          "line": 624,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/logicAuditor.js"
        },
        {
          "name": "TestWrapper",
          "type": "arrow",
          "parameters": [
            "{ children }"
          ],
          "line": 22,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 31,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "validateAllModules",
          "type": "method",
          "parameters": [],
          "line": 41,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const module of modules"
          ],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "validateModule",
          "type": "method",
          "parameters": [
            "moduleInfo"
          ],
          "line": 76,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "passedTests === totalTests"
          ],
          "line": 125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "passedTests >= totalTests * 0.7"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "testModuleImport",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!moduleExists"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!syntaxValid"
          ],
          "line": 177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!importsValid"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 190,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "testComponentStructure",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!hasDefaultExport"
          ],
          "line": 216,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!hooksValid"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!jsxStructureValid"
          ],
          "line": 228,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 235,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "testComponentProps",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 247,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!propsValid"
          ],
          "line": 261,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!callbacksValid"
          ],
          "line": 267,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "testBasicRender",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 286,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!renderResult.success"
          ],
          "line": 300,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!elementsValid"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 313,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "testSystemIntegration",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 325,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!routingValid"
          ],
          "line": 339,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!authValid"
          ],
          "line": 345,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!apiValid"
          ],
          "line": 351,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "testAccessibility",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 370,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ariaValid"
          ],
          "line": 384,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!keyboardValid"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "testPerformance",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 410,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "renderTime > 100"
          ],
          "line": 424,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "memoryLeaks.length > 0"
          ],
          "line": 430,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 437,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "validateSpecificModule",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 450,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const test of tests"
          ],
          "line": 474,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 478,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "testDataSubjectRightsSpecific",
          "type": "method",
          "parameters": [],
          "line": 493,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "testLegalUpdatesMonitorSpecific",
          "type": "method",
          "parameters": [],
          "line": 505,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "testRATSearchFilterSpecific",
          "type": "method",
          "parameters": [],
          "line": 517,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "testRATVersionControlSpecific",
          "type": "method",
          "parameters": [],
          "line": 529,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "checkStepperNavigation",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 544,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "checkFormValidation",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 553,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "checkSearchFunctionality",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 562,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "checkVersionHistory",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 571,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "checkFileExists",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 583,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "checkJSXSyntax",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 588,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "checkRequiredImports",
          "type": "method",
          "parameters": [
            "path"
          ],
          "line": 593,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "checkDefaultExport",
          "type": "method",
          "parameters": [
            "path",
            "name"
          ],
          "line": 598,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "simulateRender",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 603,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "measureRenderTime",
          "type": "method",
          "parameters": [
            "name"
          ],
          "line": 608,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "generateValidationReport",
          "type": "method",
          "parameters": [],
          "line": 616,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [],
          "line": 644,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.criticalErrors.length > 0"
          ],
          "line": 647,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.warnings.length > 3"
          ],
          "line": 655,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "failedModules.length > 0"
          ],
          "line": 664,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "printValidationReport",
          "type": "method",
          "parameters": [
            "report"
          ],
          "line": 675,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const module of report.modules"
          ],
          "line": 689,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "module.errors.length > 0"
          ],
          "line": 699,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "report.recommendations.length > 0"
          ],
          "line": 706,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "quickValidation",
          "type": "method",
          "parameters": [],
          "line": 719,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const moduleName of recentModules"
          ],
          "line": 730,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 744,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 771,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/moduleValidator.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 14,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/preventiveAI_DISABLED.js"
        },
        {
          "name": "autoCorrectInRealTime",
          "type": "method",
          "parameters": [],
          "line": 21,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/preventiveAI_DISABLED.js"
        },
        {
          "name": "autoCreateDPOApprovalTask",
          "type": "method",
          "parameters": [],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/preventiveAI_DISABLED.js"
        },
        {
          "name": "generateReport",
          "type": "method",
          "parameters": [],
          "line": 32,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/preventiveAI_DISABLED.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 9,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "setupEditModeEnhancements",
          "type": "method",
          "parameters": [],
          "line": 18,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "detectMissingFeatures",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 78,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "viewMode === 'edit'"
          ],
          "line": 82,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentStep !== undefined && currentStep >= 0"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasStepNavigation(componentProps)"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "currentStep"
          ],
          "line": 91,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullEmpresaOptions(componentProps)"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullCategoriasOptions(componentProps)"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullFinalidadesOptions(componentProps)"
          ],
          "line": 103,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullLegitimacionOptions(componentProps)"
          ],
          "line": 108,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullTransferenciasOptions(componentProps)"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.hasFullSeguridadOptions(componentProps)"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "hasStepNavigation",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "hasFullEmpresaOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 141,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "hasFullCategoriasOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 157,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "hasFullFinalidadesOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "hasFullLegitimacionOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "hasFullTransferenciasOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 188,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "hasFullSeguridadOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 197,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "applyEditModeFixes",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missing.length === 0"
          ],
          "line": 210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "feature"
          ],
          "line": 217,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "fixWizardNavigation",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 252,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!componentProps.handleNextStep"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentStep < steps.length - 1"
          ],
          "line": 259,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!componentProps.handleBackStep"
          ],
          "line": 265,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentStep > 0"
          ],
          "line": 268,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "fixEmpresaDataEditing",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.responsable"
          ],
          "line": 286,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "fixCategoriasSelection",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.categorias"
          ],
          "line": 315,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 327,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "fixFinalidadesOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.finalidades"
          ],
          "line": 343,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "fixLegitimacionOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 360,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.legitimacion"
          ],
          "line": 365,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 371,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "fixTransferenciasOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 382,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.transferencias"
          ],
          "line": 387,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "fixSeguridadOptions",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 408,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.medidas_seguridad"
          ],
          "line": 413,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setRatData"
          ],
          "line": 423,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "generateEditModeReport",
          "type": "method",
          "parameters": [
            "componentProps"
          ],
          "line": 434,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "generateRecommendations",
          "type": "method",
          "parameters": [
            "missing"
          ],
          "line": 452,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missing.includes('WIZARD_NAVIGATION')"
          ],
          "line": 455,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missing.includes('EMPRESA_DATA_EDITING')"
          ],
          "line": 459,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "missing.length > 3"
          ],
          "line": 463,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/ratEditModeFix.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 6,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "isAllowed",
          "type": "method",
          "parameters": [
            "key",
            "action = 'default'"
          ],
          "line": 21,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isBlocked(compositeKey)"
          ],
          "line": 25,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.checkRateLimit(key)"
          ],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "recordAttempt",
          "type": "method",
          "parameters": [
            "key",
            "action = 'default'",
            "success = false"
          ],
          "line": 41,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.attempts.has(compositeKey)"
          ],
          "line": 45,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "failedAttempts.length >= this.config.maxAttempts"
          ],
          "line": 62,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "isBlocked",
          "type": "method",
          "parameters": [
            "key"
          ],
          "line": 73,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.blocked.has(key)"
          ],
          "line": 74,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "now - blockTime > this.config.blockDuration"
          ],
          "line": 81,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "block",
          "type": "method",
          "parameters": [
            "key"
          ],
          "line": 92,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "checkRateLimit",
          "type": "method",
          "parameters": [
            "key"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.requestCounts.has(rateKey)"
          ],
          "line": 105,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "count >= this.config.maxRequestsPerMinute"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "cleanupOldCounts",
          "type": "method",
          "parameters": [],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [key] of this.requestCounts"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "currentMinute - keyMinute > 5"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "getBlockTimeRemaining",
          "type": "method",
          "parameters": [
            "key",
            "action = 'default'"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.isBlocked(compositeKey)"
          ],
          "line": 142,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "clearAttempts",
          "type": "method",
          "parameters": [
            "key",
            "action = 'default'"
          ],
          "line": 156,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "getStats",
          "type": "method",
          "parameters": [],
          "line": 165,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/rateLimiter.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Array.isArray(obj)"
          ],
          "line": 21,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/secureLogger.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [key",
            "value] of Object.entries(obj)"
          ],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/secureLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "SecureLogger.SENSITIVE_FIELDS.some(field => keyLower.includes(field))"
          ],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/secureLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof value === 'object' && value !== null"
          ],
          "line": 34,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/secureLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "strValue.length > 20"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/secureLogger.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < data.length; i++"
          ],
          "line": 55,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/secureTokens.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < input.length; i++"
          ],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/secureTokens.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "payload.exp && payload.exp < Math.floor(Date.now() / 1000)"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/secureTokens.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 89,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/secureTokens.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 4,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "loadValidationRules",
          "type": "method",
          "parameters": [],
          "line": 9,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "getDefaultRules",
          "type": "method",
          "parameters": [],
          "line": 27,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "validateFinalidad",
          "type": "method",
          "parameters": [
            "finalidad",
            "baseJuridica",
            "categoriasDatos = []"
          ],
          "line": 53,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.validationRules"
          ],
          "line": 67,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const rule of this.validationRules"
          ],
          "line": 71,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.matchesPattern(finalidadText",
            "rule.pattern)"
          ],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!isValidBase"
          ],
          "line": 75,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rule.severity === 'error'"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rule.severity === 'warning'"
          ],
          "line": 87,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!coherenceCheck.coherent"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "complexityCheck.needsImprovement"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "matchesPattern",
          "type": "method",
          "parameters": [
            "text",
            "pattern"
          ],
          "line": 111,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "pattern instanceof RegExp"
          ],
          "line": 112,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "checkBaseJuridica",
          "type": "method",
          "parameters": [
            "currentBase",
            "requiredBase"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "checkCoherence",
          "type": "method",
          "parameters": [
            "finalidadText",
            "categoriasDatos"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "sensitiveDataDetected && routineProcessDetected"
          ],
          "line": 141,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "analyzeComplexity",
          "type": "method",
          "parameters": [
            "finalidadText"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "wordCount < 10"
          ],
          "line": 158,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasVagueTerms && !hasSpecificTerms"
          ],
          "line": 167,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "suggestImprovements",
          "type": "method",
          "parameters": [
            "finalidadText",
            "baseJuridica"
          ],
          "line": 179,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && templates?.length > 0"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "extractKeywords",
          "type": "method",
          "parameters": [
            "text"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "isStopWord",
          "type": "method",
          "parameters": [
            "word"
          ],
          "line": 215,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "saveFinalidadTemplate",
          "type": "method",
          "parameters": [
            "finalidad",
            "baseJuridica",
            "categoriasDatos",
            "userId"
          ],
          "line": 220,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 243,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "validateAndSuggest",
          "type": "method",
          "parameters": [
            "finalidad",
            "baseJuridica",
            "categoriasDatos",
            "userId"
          ],
          "line": 248,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "validation.valid && finalidad.length > 50"
          ],
          "line": 252,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/semanticValidator.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 7,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "analyzeRAT",
          "type": "method",
          "parameters": [
            "newRAT",
            "existingRATs"
          ],
          "line": 16,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const existingRAT of existingRATs"
          ],
          "line": 19,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity.score > this.similarityThreshold"
          ],
          "line": 22,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "calculateComprehensiveSimilarity",
          "type": "method",
          "parameters": [
            "ratA",
            "ratB"
          ],
          "line": 41,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "compareResponsable",
          "type": "method",
          "parameters": [
            "respA",
            "respB"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "respA.rut && respB.rut && respA.rut === respB.rut"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "compareFinalidad",
          "type": "method",
          "parameters": [
            "finalidadA",
            "finalidadB"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "compareKeywords",
          "type": "method",
          "parameters": [
            "textA",
            "textB"
          ],
          "line": 149,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "detectBusinessCategories",
          "type": "method",
          "parameters": [
            "text",
            "keywords"
          ],
          "line": 167,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [category",
            "words] of Object.entries(keywords)"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasKeyword"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "analyzeBusinessContext",
          "type": "method",
          "parameters": [
            "textA",
            "textB"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [context",
            "pattern] of Object.entries(patterns)"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "hasA === hasB"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "compareArrays",
          "type": "method",
          "parameters": [
            "arrayA",
            "arrayB"
          ],
          "line": 210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "calculateStringSimilarity",
          "type": "method",
          "parameters": [
            "strA",
            "strB"
          ],
          "line": 226,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "cleanText",
          "type": "method",
          "parameters": [
            "text"
          ],
          "line": 244,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "levenshteinDistance",
          "type": "method",
          "parameters": [
            "strA",
            "strB"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i <= strB.length; i++"
          ],
          "line": 259,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let j = 0; j <= strA.length; j++"
          ],
          "line": 263,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 1; i <= strB.length; i++"
          ],
          "line": 267,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let j = 1; j <= strA.length; j++"
          ],
          "line": 268,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "strB.charAt(i - 1) === strA.charAt(j - 1)"
          ],
          "line": 269,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "compareTransferencias",
          "type": "method",
          "parameters": [
            "transferA",
            "transferB"
          ],
          "line": 287,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "transferA.existe === transferB.existe"
          ],
          "line": 295,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "transferA.existe && transferB.existe"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "compareBaseJuridica",
          "type": "method",
          "parameters": [
            "baseA",
            "baseB"
          ],
          "line": 314,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "compareFuenteDatos",
          "type": "method",
          "parameters": [
            "fuenteA",
            "fuenteB"
          ],
          "line": 326,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "detectConflicts",
          "type": "method",
          "parameters": [
            "similarities"
          ],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarities.categorias_datos > 0.9 && similarities.finalidad > 0.7"
          ],
          "line": 353,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "assessMergeOpportunity",
          "type": "method",
          "parameters": [
            "similarities"
          ],
          "line": 367,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarities.responsable > 0.9 && similarities.finalidad > 0.6"
          ],
          "line": 379,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "determineAction",
          "type": "method",
          "parameters": [
            "similarities"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarities.length === 0"
          ],
          "line": 398,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "maxSimilarity > 0.95"
          ],
          "line": 408,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "maxSimilarity > 0.85"
          ],
          "line": 417,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "getRecommendation",
          "type": "method",
          "parameters": [
            "score",
            "details"
          ],
          "line": 437,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "score > 0.95"
          ],
          "line": 438,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "score > 0.85"
          ],
          "line": 446,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "score > 0.7"
          ],
          "line": 455,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "highlightDifferences",
          "type": "method",
          "parameters": [
            "details"
          ],
          "line": 473,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "details.finalidad < 0.8"
          ],
          "line": 476,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "details.categorias_datos < 0.8"
          ],
          "line": 480,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "details.base_juridica < 0.5"
          ],
          "line": 484,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "details.transferencias < 0.8"
          ],
          "line": 488,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "analyzeDepartmentPatterns",
          "type": "method",
          "parameters": [
            "ratsByDepartment"
          ],
          "line": 498,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [dept",
            "rats] of Object.entries(ratsByDepartment)"
          ],
          "line": 501,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "findCommonFinalidades",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 517,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "findDuplicateRisks",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 539,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 0; i < rats.length; i++"
          ],
          "line": 542,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let j = i + 1; j < rats.length; j++"
          ],
          "line": 543,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity > 0.8"
          ],
          "line": 546,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "calculateBasicSimilarity",
          "type": "method",
          "parameters": [
            "ratA",
            "ratB"
          ],
          "line": 563,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "findOptimizationOpportunities",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 580,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "group.length > 1"
          ],
          "line": 587,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "groupSimilarRATs",
          "type": "method",
          "parameters": [
            "rats"
          ],
          "line": 603,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarity > 0.7"
          ],
          "line": 617,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarRATs.length > 1"
          ],
          "line": 623,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "generateImprovementSuggestions",
          "type": "method",
          "parameters": [
            "rat",
            "similarRATs"
          ],
          "line": 634,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "similarRATs.length > 0"
          ],
          "line": 638,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "extractBestPractices",
          "type": "method",
          "parameters": [
            "similarRATs"
          ],
          "line": 669,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "completeness.length > 0 && completeness[0].score > 0.8"
          ],
          "line": 678,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "bestRAT.finalidad?.descripcion?.length > 100"
          ],
          "line": 681,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "calculateCompletenessScore",
          "type": "method",
          "parameters": [
            "rat"
          ],
          "line": 697,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "rat[field]"
          ],
          "line": 709,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof rat[field] === 'object' && Object.keys(rat[field]).length > 2"
          ],
          "line": 713,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "detectMissingFields",
          "type": "method",
          "parameters": [
            "rat"
          ],
          "line": 726,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('marketing') && !rat.transferencias_internacionales?.existe"
          ],
          "line": 732,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "some",
          "type": "method",
          "parameters": [
            "c => c.includes('laboral')))"
          ],
          "line": 741,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "checkForDuplicates",
          "type": "method",
          "parameters": [
            "newRAT",
            "existingRATs"
          ],
          "line": 755,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 769,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartDeduplication.js"
        },
        {
          "name": "logSupabaseActivity",
          "type": "arrow",
          "parameters": [],
          "line": 438,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 12,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "from",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 22,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "auth",
          "type": "method",
          "parameters": [],
          "line": 30,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "getStats",
          "type": "method",
          "parameters": [],
          "line": 37,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [
            "tableName",
            "originalBuilder",
            "smartClient"
          ],
          "line": 50,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "select",
          "type": "method",
          "parameters": [
            "columns = '*'",
            "options = {}"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "eq",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 72,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "neq",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 77,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "gt",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 82,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "gte",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 87,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "lt",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 92,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "lte",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "like",
          "type": "method",
          "parameters": [
            "column",
            "pattern"
          ],
          "line": 102,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "ilike",
          "type": "method",
          "parameters": [
            "column",
            "pattern"
          ],
          "line": 107,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "in",
          "type": "method",
          "parameters": [
            "column",
            "values"
          ],
          "line": 112,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "is",
          "type": "method",
          "parameters": [
            "column",
            "value"
          ],
          "line": 117,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "not",
          "type": "method",
          "parameters": [
            "column",
            "operator",
            "value"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "limit",
          "type": "method",
          "parameters": [
            "count"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "order",
          "type": "method",
          "parameters": [
            "column",
            "options = {}"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "range",
          "type": "method",
          "parameters": [
            "from",
            "to"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "single",
          "type": "method",
          "parameters": [],
          "line": 148,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "maybeSingle",
          "type": "method",
          "parameters": [],
          "line": 155,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "then",
          "type": "method",
          "parameters": [
            "resolve",
            "reject"
          ],
          "line": 162,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "executeWithFallback",
          "type": "method",
          "parameters": [
            "executionType"
          ],
          "line": 174,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "attempt < 3"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "executionType"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "attempt > 0"
          ],
          "line": 196,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 203,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isRecoverableError(error) && attempt < 3"
          ],
          "line": 210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "buildQuery",
          "type": "method",
          "parameters": [
            "attemptNumber"
          ],
          "line": 229,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.queryParts.select"
          ],
          "line": 233,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const filter of filters"
          ],
          "line": 240,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "filter.type"
          ],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.queryParts.options.limit"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.queryParts.options.order"
          ],
          "line": 283,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.queryParts.options.range"
          ],
          "line": 289,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "getFiltersForAttempt",
          "type": "method",
          "parameters": [
            "attemptNumber"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "attemptNumber"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "isRecoverableError",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 327,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "getSafeEmptyResult",
          "type": "method",
          "parameters": [
            "executionType"
          ],
          "line": 346,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "executionType"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "insert",
          "type": "method",
          "parameters": [
            "values",
            "options = {}"
          ],
          "line": 359,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 367,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isRecoverableError(error) && Array.isArray(values)"
          ],
          "line": 371,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "retryError"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "update",
          "type": "method",
          "parameters": [
            "values",
            "options = {}"
          ],
          "line": 403,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 408,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "delete",
          "type": "method",
          "parameters": [
            "options = {}"
          ],
          "line": 418,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 423,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/smartSupabaseClient.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "runCompleteAudit",
          "type": "method",
          "parameters": [],
          "line": 19,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of tablesToTest"
          ],
          "line": 35,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "testBasicConnectivity",
          "type": "method",
          "parameters": [],
          "line": 52,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 61,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "testTableCRUD",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 71,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 92,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.code === '42P01'"
          ],
          "line": 97,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data?.[0]"
          ],
          "line": 107,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 112,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "result.exists"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "testInsert",
          "type": "method",
          "parameters": [
            "tableName",
            "result"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data?.[0]?.id"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 152,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "testUpdateDelete",
          "type": "method",
          "parameters": [
            "tableName",
            "recordId",
            "result"
          ],
          "line": 161,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!updateError"
          ],
          "line": 169,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 176,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!deleteError"
          ],
          "line": 187,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "generateTestData",
          "type": "method",
          "parameters": [
            "tableName"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "showSummary",
          "type": "method",
          "parameters": [],
          "line": 260,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.errors.length > 0"
          ],
          "line": 269,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "getSummary",
          "type": "method",
          "parameters": [],
          "line": 282,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [tableName",
            "result] of Object.entries(this.results)"
          ],
          "line": 286,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "result.select && result.insert"
          ],
          "line": 289,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 307,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseAuditor.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "guardarDatosEmpresa",
          "type": "method",
          "parameters": [
            "datosEmpresa",
            "opciones = {}"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!validacion.valid"
          ],
          "line": 31,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "selectError && selectError.code !== 'PGRST116'"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "existing"
          ],
          "line": 70,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "notificar"
          ],
          "line": 95,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "cargarDatosEmpresa",
          "type": "method",
          "parameters": [
            "opciones = {}"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error.code === 'PGRST116'"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "validarDatos",
          "type": "method",
          "parameters": [
            "datos"
          ],
          "line": 164,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!datos || typeof datos !== 'object'"
          ],
          "line": 174,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!datos[campo] || typeof datos[campo] !== 'string' || datos[campo].trim().length === 0"
          ],
          "line": 181,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "camposFaltantes.length > 0"
          ],
          "line": 186,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datos.rut && !this.validarFormatoRUT(datos.rut)"
          ],
          "line": 195,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datos.email_empresa && !this.validarEmail(datos.email_empresa)"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "validarEmail",
          "type": "method",
          "parameters": [
            "email"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "validarFormatoRUT",
          "type": "method",
          "parameters": [
            "rut"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "actualizarDatosEmpresa",
          "type": "method",
          "parameters": [
            "nuevosdatos",
            "opciones = {}"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosActuales.success && datosActuales.datos"
          ],
          "line": 233,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "limpiarDatos",
          "type": "method",
          "parameters": [
            "opciones = {}"
          ],
          "line": 248,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "notificar"
          ],
          "line": 263,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "existenDatos",
          "type": "method",
          "parameters": [
            "opciones = {}"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "agregarListener",
          "type": "method",
          "parameters": [
            "callback"
          ],
          "line": 287,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "notificarCambio",
          "type": "method",
          "parameters": [
            "tipo",
            "datos"
          ],
          "line": 298,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "autoCompletarFormulario",
          "type": "method",
          "parameters": [
            "setValues",
            "opciones = {}"
          ],
          "line": 311,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "resultado.success && resultado.datos"
          ],
          "line": 319,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "valor && (sobreescribir || !setValues[campo])"
          ],
          "line": 323,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof setValues === 'function'"
          ],
          "line": 324,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "setValues[campo]"
          ],
          "line": 326,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "notificarUsuario"
          ],
          "line": 332,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseEmpresaPersistence.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "logCriticalError",
          "type": "method",
          "parameters": [
            "errorCode",
            "errorData",
            "source = 'UNKNOWN'",
            "category = 'CRITICAL'"
          ],
          "line": 25,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "logMediumError",
          "type": "method",
          "parameters": [
            "errorCode",
            "errorData",
            "source = 'UNKNOWN'",
            "category = 'MEDIUM'"
          ],
          "line": 40,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "logInfo",
          "type": "method",
          "parameters": [
            "infoCode",
            "infoData",
            "source = 'UNKNOWN'",
            "category = 'INFO'"
          ],
          "line": 52,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "createLogEntry",
          "type": "method",
          "parameters": [
            "level",
            "code",
            "data",
            "source",
            "category"
          ],
          "line": 64,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "addToBuffer",
          "type": "method",
          "parameters": [
            "logEntry"
          ],
          "line": 83,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.errorBuffer.has(key)"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.errorBuffer.get(key).length >= this.batchSize"
          ],
          "line": 93,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "saveToSupabase",
          "type": "method",
          "parameters": [
            "logEntries"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "flushBufferToSupabase",
          "type": "method",
          "parameters": [
            "bufferKey"
          ],
          "line": 135,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "flushAllBuffersToSupabase",
          "type": "method",
          "parameters": [],
          "line": 149,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [key",
            "entries] of this.errorBuffer"
          ],
          "line": 153,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "startAutoFlush",
          "type": "method",
          "parameters": [],
          "line": 169,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "addToMemoryFallback",
          "type": "method",
          "parameters": [
            "logEntry"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!this.errorBuffer.has(fallbackKey)"
          ],
          "line": 181,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "fallbackEntries.length > 100"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "getLoggerStats",
          "type": "method",
          "parameters": [],
          "line": 197,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [key",
            "entries] of this.errorBuffer"
          ],
          "line": 205,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "key === 'memory_fallback'"
          ],
          "line": 209,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "downloadLogsFromSupabase",
          "type": "method",
          "parameters": [
            "options = {}"
          ],
          "line": 220,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 244,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "downloadLogsFile",
          "type": "method",
          "parameters": [
            "options = {}"
          ],
          "line": 259,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!result.success || result.logs.length === 0"
          ],
          "line": 262,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 283,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "formatLogsForFile",
          "type": "method",
          "parameters": [
            "logs"
          ],
          "line": 291,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "log.error_data && log.error_data !== log.error_message"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "cleanupOldLogs",
          "type": "method",
          "parameters": [
            "daysToKeep = 30"
          ],
          "line": 320,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 331,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 338,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "typeof window !== 'undefined'"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseErrorLogger.js"
        },
        {
          "name": "safeSupabaseQuery",
          "type": "arrow",
          "parameters": [
            "tableName",
            "queryBuilder",
            "options"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "validateSupabaseQuery",
          "type": "arrow",
          "parameters": [
            "tableName",
            "queryType",
            "filters"
          ],
          "line": 353,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "getSupabasePermissions",
          "type": "arrow",
          "parameters": [],
          "line": 357,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 11,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "init",
          "type": "method",
          "parameters": [],
          "line": 20,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 29,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "loadTableSchemas",
          "type": "method",
          "parameters": [],
          "line": 37,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const table of mainTables"
          ],
          "line": 47,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && data"
          ],
          "line": 56,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 62,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "err"
          ],
          "line": 69,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "testBasicPermissions",
          "type": "method",
          "parameters": [],
          "line": 82,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [table",
            "schema] of this.tableSchemas"
          ],
          "line": 86,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "schema.columns?.includes('tenant_id') && tenantId"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "permissions.select"
          ],
          "line": 115,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 125,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "validateQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "queryType",
            "filters = {}"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!permissions || !schema"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!permissions[queryType]"
          ],
          "line": 145,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "filters.tenant_id && !permissions.tenant_filtered"
          ],
          "line": 150,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const column of Object.keys(filters)"
          ],
          "line": 160,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!schema.columns?.includes(column)"
          ],
          "line": 161,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "safeQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "queryBuilder",
            "options = {}"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "while",
          "type": "method",
          "parameters": [
            "attempt <= maxRetries"
          ],
          "line": 182,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 191,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.isRLSError(error) && allowFallback && attempt <= maxRetries"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "attempt === 1"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "fallbackError"
          ],
          "line": 207,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "attempt === 2"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "simpleError"
          ],
          "line": 219,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "isRLSError",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 236,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "removeTenan_idFromQuery",
          "type": "method",
          "parameters": [
            "originalQueryBuilder"
          ],
          "line": 250,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "simplifyQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "originalQueryBuilder"
          ],
          "line": 257,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "generateTestRecord",
          "type": "method",
          "parameters": [
            "tableName",
            "columns"
          ],
          "line": 266,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const column of columns || []"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "column.includes('email')"
          ],
          "line": 275,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "column.includes('tenant_id')"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "column.includes('nombre')"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "getCurrentUser",
          "type": "method",
          "parameters": [],
          "line": 289,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "getCurrentTenantId",
          "type": "method",
          "parameters": [],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "cacheSuccessfulQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "queryKey"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "cacheFailedQuery",
          "type": "method",
          "parameters": [
            "tableName",
            "error"
          ],
          "line": 304,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "setupQueryInterceptor",
          "type": "method",
          "parameters": [],
          "line": 316,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        },
        {
          "name": "getStatusReport",
          "type": "method",
          "parameters": [],
          "line": 325,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/utils/supabaseRLSGuard.js"
        }
      ],
      "services": [
        {
          "name": "getInventario",
          "type": "method",
          "parameters": [],
          "line": 13,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 23,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "createItem",
          "type": "method",
          "parameters": [
            "item"
          ],
          "line": 29,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 40,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "getUsuarios",
          "type": "method",
          "parameters": [],
          "line": 49,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 59,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "getRoles",
          "type": "method",
          "parameters": [],
          "line": 65,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "getOrganizaciones",
          "type": "method",
          "parameters": [],
          "line": 76,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 80,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "getDashboard",
          "type": "method",
          "parameters": [],
          "line": 85,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "getConfiguracion",
          "type": "method",
          "parameters": [],
          "line": 97,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "getLogs",
          "type": "method",
          "parameters": [],
          "line": 101,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 105,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "actualizarOrganizacion",
          "type": "method",
          "parameters": [
            "id",
            "data"
          ],
          "line": 110,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "crearOrganizacion",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 114,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "desactivarOrganizacion",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "actualizarUsuario",
          "type": "method",
          "parameters": [
            "id",
            "data"
          ],
          "line": 122,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "crearUsuario",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 126,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "desactivarUsuario",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "resetPassword",
          "type": "method",
          "parameters": [
            "userId"
          ],
          "line": 134,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "actualizarConfiguracion",
          "type": "method",
          "parameters": [
            "config"
          ],
          "line": 138,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "crearRespaldo",
          "type": "method",
          "parameters": [],
          "line": 142,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "getOrganizaciones",
          "type": "method",
          "parameters": [],
          "line": 152,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "getUsuarios",
          "type": "method",
          "parameters": [],
          "line": 189,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "getDashboard",
          "type": "method",
          "parameters": [],
          "line": 205,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "getConfiguracion",
          "type": "method",
          "parameters": [],
          "line": 218,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "getLogs",
          "type": "method",
          "parameters": [
            "filtros = {}"
          ],
          "line": 236,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "actualizarOrganizacion",
          "type": "method",
          "parameters": [
            "id",
            "data"
          ],
          "line": 256,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "crearOrganizacion",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 261,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "desactivarOrganizacion",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 266,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "actualizarUsuario",
          "type": "method",
          "parameters": [
            "id",
            "data"
          ],
          "line": 271,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "crearUsuario",
          "type": "method",
          "parameters": [
            "data"
          ],
          "line": 276,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "desactivarUsuario",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 281,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "resetPassword",
          "type": "method",
          "parameters": [
            "userId"
          ],
          "line": 286,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "actualizarConfiguracion",
          "type": "method",
          "parameters": [
            "config"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "crearRespaldo",
          "type": "method",
          "parameters": [],
          "line": 299,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/api.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "analizarCategoriaSeleccionada",
          "type": "method",
          "parameters": [
            "categoria",
            "subcategoria",
            "ratData",
            "tenantId"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "categoria"
          ],
          "line": 116,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.id"
          ],
          "line": 138,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 146,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "analizarDatosSalud",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "resultado"
          ],
          "line": 158,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!esAutorizado"
          ],
          "line": 161,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.base_licitud === 'interes_legitimo'"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "analizarDatosBiometricos",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "resultado"
          ],
          "line": 197,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!necesidadJustificada"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.base_licitud !== 'consentimiento'"
          ],
          "line": 209,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "analizarMenores14",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "resultado"
          ],
          "line": 239,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.base_licitud !== 'consentimiento'"
          ],
          "line": 241,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "analizarGeolocalizacion",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "resultado"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadValidacion.restricciones"
          ],
          "line": 287,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.transferencias_internacionales?.length > 0 && precision === 'gps_exacto'"
          ],
          "line": 292,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "guardarAnalisisCategoria",
          "type": "method",
          "parameters": [
            "resultado",
            "ratId",
            "tenantId"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratId || ratId === 'undefined'"
          ],
          "line": 312,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 349,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "verificarProfesionalSalud",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 356,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!tenantId || tenantId === 'undefined'"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 372,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "evaluarNecesidadBiometricos",
          "type": "method",
          "parameters": [
            "finalidad"
          ],
          "line": 378,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "determinarPrecisionGeo",
          "type": "method",
          "parameters": [
            "descripcion"
          ],
          "line": 388,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "desc.includes('gps') || desc.includes('coordenadas exactas')"
          ],
          "line": 391,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "desc.includes('ciudad') || desc.includes('región')"
          ],
          "line": 394,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "desc.includes('país')"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "validarFinalidadGeo",
          "type": "method",
          "parameters": [
            "finalidad"
          ],
          "line": 403,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('seguridad')"
          ],
          "line": 406,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('marketing')"
          ],
          "line": 409,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('estadístico')"
          ],
          "line": 415,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('tracking') || finalidadLower.includes('seguimiento')"
          ],
          "line": 421,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/categoryAnalysisEngine.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 5,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "getMasterData",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 13,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.cache.has(cacheKey)"
          ],
          "line": 18,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "Date.now() - cached.timestamp < 30000"
          ],
          "line": 20,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "subscribe",
          "type": "method",
          "parameters": [
            "componentName",
            "tenantId",
            "callback"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "notifySubscribers",
          "type": "method",
          "parameters": [
            "tenantId",
            "masterData"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "key.includes(tenantId)"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 132,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "invalidateAndRefresh",
          "type": "method",
          "parameters": [
            "tenantId",
            "changeType = 'general'"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "onRATCreated",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 156,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "onRATUpdated",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 161,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "onEIPDGenerated",
          "type": "method",
          "parameters": [
            "eipdData",
            "tenantId"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "onDPOTaskCreated",
          "type": "method",
          "parameters": [
            "taskData",
            "tenantId"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "startAutoSync",
          "type": "method",
          "parameters": [
            "tenantId",
            "intervalMs = 60000"
          ],
          "line": 177,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.syncInterval"
          ],
          "line": 178,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 185,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "stopAutoSync",
          "type": "method",
          "parameters": [],
          "line": 193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.syncInterval"
          ],
          "line": 194,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "getDataForModule",
          "type": "method",
          "parameters": [
            "moduleName",
            "tenantId"
          ],
          "line": 202,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "moduleName"
          ],
          "line": 205,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/dataSync.js"
        },
        {
          "name": "obtenerInformacionSectorial",
          "type": "declaration",
          "parameters": [
            "industria",
            "incluirFundamentos = true"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/industryStandardsService.js"
        },
        {
          "name": "generarReporteFundamentos",
          "type": "declaration",
          "parameters": [
            "industrias = null"
          ],
          "line": 340,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/industryStandardsService.js"
        },
        {
          "name": "obtenerInformacionSectorial",
          "type": "method",
          "parameters": [
            "industria",
            "incluirFundamentos = true"
          ],
          "line": 302,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/industryStandardsService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!info"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/industryStandardsService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "incluirFundamentos"
          ],
          "line": 322,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/industryStandardsService.js"
        },
        {
          "name": "generarReporteFundamentos",
          "type": "method",
          "parameters": [
            "industrias = null"
          ],
          "line": 340,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/industryStandardsService.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 12,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "analizarClientePartner",
          "type": "method",
          "parameters": [
            "partnerData"
          ],
          "line": 17,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!partnerValido"
          ],
          "line": 23,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 50,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "ejecutarAnalisisIA",
          "type": "method",
          "parameters": [
            "clienteData"
          ],
          "line": 60,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "mapearCategoriasPartner",
          "type": "method",
          "parameters": [
            "categoriasPartner"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const categoria of categoriasPartner"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "categoria"
          ],
          "line": 107,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "determinarDocumentosObligatorios",
          "type": "method",
          "parameters": [
            "riesgoCalculado",
            "tratamiento"
          ],
          "line": 127,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "riesgoCalculado.clasificacion?.requiere_eipd"
          ],
          "line": 130,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tratamiento.decisiones_automatizadas"
          ],
          "line": 141,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "generarAlertasCriticas",
          "type": "method",
          "parameters": [
            "tratamiento",
            "riesgoCalculado"
          ],
          "line": 156,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tratamiento.destinos_transferencia?.some(d => d.includes('Estados Unidos'))"
          ],
          "line": 159,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tratamiento.decisiones_automatizadas"
          ],
          "line": 168,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "enviarWebhookRATCompletado",
          "type": "method",
          "parameters": [
            "ratId",
            "partnerIds = []"
          ],
          "line": 181,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const partnerId of partnerIds"
          ],
          "line": 203,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 215,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "obtenerDatosCompletosRAT",
          "type": "method",
          "parameters": [
            "ratId"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "generarUUID",
          "type": "method",
          "parameters": [],
          "line": 278,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "replace",
          "type": "method",
          "parameters": [
            "/[xy]/g",
            "function(c"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "generarSignatureHMAC",
          "type": "method",
          "parameters": [
            "datos"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "generarHashIntegridad",
          "type": "method",
          "parameters": [
            "documento"
          ],
          "line": 290,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "determinarEtapasCompletadas",
          "type": "method",
          "parameters": [
            "actividades"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "actividades?.some(a => a.tipo_actividad.includes('RAT'))"
          ],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "actividades?.some(a => a.tipo_actividad.includes('EIPD'))"
          ],
          "line": 300,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "actividades?.some(a => a.estado === ACTIVIDAD_DPO_ESTADOS.COMPLETADA)"
          ],
          "line": 303,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "calcularScoreCompliance",
          "type": "method",
          "parameters": [
            "ratData",
            "documentos"
          ],
          "line": 310,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/partnerSyncEngine.js"
        },
        {
          "name": "getCurrentTenant",
          "type": "method",
          "parameters": [],
          "line": 8,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "data?.tenant_id"
          ],
          "line": 21,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 34,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "getSupabaseClient",
          "type": "method",
          "parameters": [],
          "line": 41,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "createProveedor",
          "type": "method",
          "parameters": [
            "proveedorData"
          ],
          "line": 48,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 66,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 74,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "getProveedores",
          "type": "method",
          "parameters": [],
          "line": 81,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && (!data || data.length === 0)"
          ],
          "line": 98,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const variant of tenantVariants"
          ],
          "line": 104,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "variant !== tenantId"
          ],
          "line": 105,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!variantResult.error && variantResult.data && variantResult.data.length > 0"
          ],
          "line": 113,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && (!data || data.length === 0)"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 133,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!error && data && data.length > 0"
          ],
          "line": 137,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 147,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "updateProveedor",
          "type": "method",
          "parameters": [
            "proveedorId",
            "updates"
          ],
          "line": 154,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 180,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "deleteProveedor",
          "type": "method",
          "parameters": [
            "proveedorId"
          ],
          "line": 187,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 206,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "createDPA",
          "type": "method",
          "parameters": [
            "proveedorId",
            "dpaData"
          ],
          "line": 213,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "dpaError"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 252,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "createEvaluacionSeguridad",
          "type": "method",
          "parameters": [
            "proveedorId",
            "evaluacionData"
          ],
          "line": 259,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 277,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 296,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "asociarProveedorRAT",
          "type": "method",
          "parameters": [
            "proveedorId",
            "ratId"
          ],
          "line": 303,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 321,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 329,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "getProveedoresByRAT",
          "type": "method",
          "parameters": [
            "ratId"
          ],
          "line": 336,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 350,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "validarAislacionTenant",
          "type": "method",
          "parameters": [],
          "line": 365,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "otroTenant && otroTenant.length > 0"
          ],
          "line": 379,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tenantsUnicos.length > 1"
          ],
          "line": 392,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tenantsUnicos.length === 1 && tenantsUnicos[0] !== tenantId"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 405,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "calcularNivelRiesgo",
          "type": "method",
          "parameters": [
            "puntuacion"
          ],
          "line": 413,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "getEstadisticasTenant",
          "type": "method",
          "parameters": [],
          "line": 420,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 444,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/proveedoresService.js"
        },
        {
          "name": "createDPOActivities",
          "type": "method",
          "parameters": [
            "alerts",
            "ratId",
            "tenantId"
          ],
          "line": 11,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "authError"
          ],
          "line": 24,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!alerts || alerts.length === 0"
          ],
          "line": 34,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 65,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "fallbackError"
          ],
          "line": 89,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 100,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "function",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 106,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosSensiblesDetectados.length > 0"
          ],
          "line": 118,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.decisiones_automatizadas === true || ratData.decisiones_automatizadas === 'si'"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.destinatarios_externos?.length > 0"
          ],
          "line": 160,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "proveedoresInternacionales.length > 0"
          ],
          "line": 166,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "factoresRiesgo.length >= 2"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "detectArea",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 270,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "text",
            "keywords"
          ],
          "line": 288,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "detectSensitiveData",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 292,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['médic'",
            "'salud'",
            "'enfermedad'",
            "'diagnóstic'",
            "'tratamiento'])"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['socioeconómic'",
            "'económic'",
            "'scoring'",
            "'creditici'",
            "'ingresos'",
            "'renta'])"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['biométric'",
            "'huella'",
            "'facial'",
            "'iris'",
            "'reconocimiento'])"
          ],
          "line": 311,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['menor'",
            "'niño'",
            "'estudiante'",
            "'escolar'",
            "'adolescente'])"
          ],
          "line": 317,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['penal'",
            "'judicial'",
            "'antecedente'",
            "'criminal'",
            "'delito'])"
          ],
          "line": 323,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['racial'",
            "'étnico'",
            "'origen'",
            "'etnia'",
            "'raza'])"
          ],
          "line": 329,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['polític'",
            "'ideología'",
            "'partido'",
            "'voto'",
            "'elección'])"
          ],
          "line": 335,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['religios'",
            "'fe'",
            "'credo'",
            "'iglesia'",
            "'creencia'])"
          ],
          "line": 341,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "matchKeywords",
          "type": "method",
          "parameters": [
            "texto",
            "['sexual'",
            "'orientación'",
            "'intimidad'",
            "'género'])"
          ],
          "line": 347,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "evaluateRiskFactors",
          "type": "method",
          "parameters": [
            "ratData",
            "datosSensibles",
            "area"
          ],
          "line": 354,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "datosSensibles.length >= 2"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.volumen_datos === 'masivo' || parseInt(ratData.cantidad_titulares) > 10000"
          ],
          "line": 363,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.decisiones_automatizadas && datosSensibles.length > 0"
          ],
          "line": 368,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.destinatarios_externos?.length > 0 && datosSensibles.length > 0"
          ],
          "line": 373,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "['salud'",
            "'financiero'",
            "'educacion'",
            "'gobierno'].includes(area)"
          ],
          "line": 378,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "toLowerCase",
          "type": "method",
          "parameters": [
            ").includes('segment')"
          ],
          "line": 384,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "parseInt",
          "type": "method",
          "parameters": [
            "ratData.tiempo_retencion) > 5"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "getIndustrySpecificAlerts",
          "type": "method",
          "parameters": [
            "area",
            "ratData",
            "checks"
          ],
          "line": 397,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "area"
          ],
          "line": 401,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checks.tienePacientes && !ratData.consentimiento_explicito"
          ],
          "line": 403,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checks.tieneMenores"
          ],
          "line": 422,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checks.evaluaCredito"
          ],
          "line": 441,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "checks.tieneDatosPublicos"
          ],
          "line": 460,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "analyzeDataVolume",
          "type": "method",
          "parameters": [
            "ratData",
            "area"
          ],
          "line": 482,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "cantidad > 100000"
          ],
          "line": 488,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "cantidad > 10000"
          ],
          "line": 503,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "analyzeLegitimation",
          "type": "method",
          "parameters": [
            "ratData",
            "area"
          ],
          "line": 523,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.base_licitud || ratData.base_licitud === ''"
          ],
          "line": 527,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "analyzeRetention",
          "type": "method",
          "parameters": [
            "ratData",
            "area"
          ],
          "line": 547,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!ratData.tiempo_retencion || ratData.tiempo_retencion === 'indefinido'"
          ],
          "line": 551,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "getIndustrySpecificChecks",
          "type": "method",
          "parameters": [
            "area",
            "ratData"
          ],
          "line": 573,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "area"
          ],
          "line": 576,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "getSectorDisplayName",
          "type": "method",
          "parameters": [
            "area"
          ],
          "line": 620,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "getSectorEmoji",
          "type": "method",
          "parameters": [
            "area"
          ],
          "line": 637,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "isInternationalProvider",
          "type": "method",
          "parameters": [
            "nombre"
          ],
          "line": 642,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "function",
          "type": "method",
          "parameters": [
            "notificaciones"
          ],
          "line": 651,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratIntelligenceEngine.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 12,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "getRats",
          "type": "method",
          "parameters": [
            "options = {}"
          ],
          "line": 17,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 26,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "createRAT",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 33,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 43,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "updateRAT",
          "type": "method",
          "parameters": [
            "id",
            "ratData"
          ],
          "line": 50,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 61,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "deleteRAT",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 68,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 77,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "getRATById",
          "type": "method",
          "parameters": [
            "id"
          ],
          "line": 84,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 94,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "setCurrentTenant",
          "type": "method",
          "parameters": [
            "tenant",
            "userId"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!userId || !tenant"
          ],
          "line": 105,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 123,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "getCurrentTenant",
          "type": "method",
          "parameters": [
            "userId"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!userId"
          ],
          "line": 138,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 149,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 155,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "getCompletedRATs",
          "type": "method",
          "parameters": [],
          "line": 162,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/ratService.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "calcularRiesgoTotal",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 90,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 132,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "calcularPuntosCategorias",
          "type": "method",
          "parameters": [
            "categoriasDatos"
          ],
          "line": 143,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.identificacion"
          ],
          "line": 149,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.sensibles_art14"
          ],
          "line": 157,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.especiales"
          ],
          "line": 164,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.tecnicas"
          ],
          "line": 171,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "calcularPuntosFinalidad",
          "type": "method",
          "parameters": [
            "finalidad"
          ],
          "line": 181,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('decisiones automáticas') || finalidadLower.includes('algoritmo')"
          ],
          "line": 186,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('perfilado') || finalidadLower.includes('segmentación')"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('comportamiento') || finalidadLower.includes('análisis usuario')"
          ],
          "line": 192,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('marketing') && finalidadLower.includes('dirigido')"
          ],
          "line": 195,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('marketing')"
          ],
          "line": 198,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('contrato') || finalidadLower.includes('comercial')"
          ],
          "line": 201,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidadLower.includes('legal') || finalidadLower.includes('cumplimiento')"
          ],
          "line": 204,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "calcularPuntosTransferencias",
          "type": "method",
          "parameters": [
            "transferencias",
            "tenantId"
          ],
          "line": 212,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const transferencia of transferencias"
          ],
          "line": 217,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!pais || pais === 'chile'"
          ],
          "line": 220,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "['alemania'",
            "'francia'",
            "'españa'",
            "'italia'",
            "'holanda'].includes(pais)"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "['reino unido'",
            "'suiza'",
            "'canadá'",
            "'japón'",
            "'argentina'].includes(pais)"
          ],
          "line": 224,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "pais === 'estados unidos'"
          ],
          "line": 226,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "['brasil'",
            "'méxico'].includes(pais)"
          ],
          "line": 232,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "verificarPrivacyShield",
          "type": "method",
          "parameters": [
            "proveedorId"
          ],
          "line": 243,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "calcularPuntosVolumen",
          "type": "method",
          "parameters": [
            "volumen"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "calcularPuntosTecnologia",
          "type": "method",
          "parameters": [
            "tecnologia"
          ],
          "line": 274,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('decisiones automáticas') || tecLower.includes('algoritmo decisional')"
          ],
          "line": 279,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('deep learning') || tecLower.includes('neural')"
          ],
          "line": 282,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('machine learning') || tecLower.includes('ml')"
          ],
          "line": 285,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('inteligencia artificial') || tecLower.includes('ia')"
          ],
          "line": 288,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('automatización') || tecLower.includes('procesos automáticos')"
          ],
          "line": 291,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('base datos') || tecLower.includes('sql')"
          ],
          "line": 294,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tecLower.includes('manual') || tecLower.includes('revisión humana')"
          ],
          "line": 297,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "clasificarRiesgo",
          "type": "method",
          "parameters": [
            "puntuacionTotal"
          ],
          "line": 305,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "puntuacionTotal <= 5"
          ],
          "line": 306,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "puntuacionTotal <= 12"
          ],
          "line": 319,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "puntuacionTotal <= 20"
          ],
          "line": 331,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "puntuacionTotal <= 30"
          ],
          "line": 344,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "aplicarAutoEfectos",
          "type": "method",
          "parameters": [
            "clasificacion",
            "ratData",
            "tenantId"
          ],
          "line": 374,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.nivel === 'ALTO' || clasificacion.nivel === 'CRITICO'"
          ],
          "line": 377,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.nivel === 'CRITICO'"
          ],
          "line": 391,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "generarEIPDAutomatica",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "clasificacion"
          ],
          "line": 404,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "crearActividadDPO",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "clasificacion"
          ],
          "line": 432,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "crearNotificacionDPO",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "clasificacion"
          ],
          "line": 457,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "generarDPIAAutomatica",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 479,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "crearAlertaSistema",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 500,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "generarMedidasMitigacion",
          "type": "method",
          "parameters": [
            "clasificacion"
          ],
          "line": 530,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.requiere_eipd"
          ],
          "line": 533,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.requiere_dpia"
          ],
          "line": 536,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.consulta_previa_agencia"
          ],
          "line": 539,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.medidas_excepcionales"
          ],
          "line": 542,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "clasificacion.monitoreo_continuo"
          ],
          "line": 545,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/riskCalculationEngine.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "procesarCasuisticaEspecifica",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const casuistica of casuisticasDetectadas"
          ],
          "line": 116,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 129,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "detectarCasuisticas",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 136,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.contieneCategoria(ratData.categorias_datos",
            "'datos_geneticos')"
          ],
          "line": 140,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.esDecisionFinanciera(ratData)"
          ],
          "line": 149,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "this.esInvestigacionAcademica(ratData",
            "tenantId)"
          ],
          "line": 158,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "procesarCasuistica",
          "type": "method",
          "parameters": [
            "casuistica",
            "ratData",
            "tenantId"
          ],
          "line": 170,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "tipo"
          ],
          "line": 173,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "procesarCasoGeneticos",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "config"
          ],
          "line": 189,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!autorizacionISP"
          ],
          "line": 200,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [efecto",
            "valor] of Object.entries(config.auto_efectos)"
          ],
          "line": 210,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "procesarCasoFinanciero",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "config"
          ],
          "line": 222,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!autorizacionCMF"
          ],
          "line": 233,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.decisiones_automatizadas"
          ],
          "line": 242,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [efecto",
            "valor] of Object.entries(config.auto_efectos_regulatorios)"
          ],
          "line": 251,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "procesarCasoAcademico",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId",
            "config"
          ],
          "line": 260,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!comiteEtica"
          ],
          "line": 271,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const [efecto",
            "valor] of Object.entries(config.auto_efectos_academicos)"
          ],
          "line": 280,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "contieneCategoria",
          "type": "method",
          "parameters": [
            "categorias",
            "categoria"
          ],
          "line": 289,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "esDecisionFinanciera",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 299,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "esInvestigacionAcademica",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 308,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "aplicarAutoEfecto",
          "type": "method",
          "parameters": [
            "ratId",
            "tenantId",
            "efecto",
            "valor"
          ],
          "line": 331,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "switch",
          "type": "method",
          "parameters": [
            "efecto"
          ],
          "line": 333,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "valor"
          ],
          "line": 343,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "valor"
          ],
          "line": 358,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 363,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "generarDocumentosGeneticos",
          "type": "method",
          "parameters": [
            "ratId",
            "tenantId"
          ],
          "line": 369,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "const doc of tiposDocumentos"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 410,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "verificarAutorizacionISP",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 419,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "verificarAutorizacionCMF",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 434,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "verificarComiteEtica",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 449,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": true,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "programarAuditoriasPeriodicas",
          "type": "method",
          "parameters": [
            "ratId",
            "tenantId",
            "frecuencia"
          ],
          "line": 464,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "for",
          "type": "method",
          "parameters": [
            "let i = 1; i <= 4; i++"
          ],
          "line": 473,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "obtenerContextoFinanciero",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 495,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 512,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "obtenerContextoAcademico",
          "type": "method",
          "parameters": [
            "tenantId"
          ],
          "line": 523,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 541,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/specificCasesEngine.js"
        },
        {
          "name": "constructor",
          "type": "method",
          "parameters": [],
          "line": 10,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "ejecutarTestBalancing",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 58,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 101,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "evaluarInteresEmpresa",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 112,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('seguridad') || finalidad.includes('fraude')"
          ],
          "line": 120,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('mejorar') || finalidad.includes('optimizar')"
          ],
          "line": 124,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('marketing') || finalidad.includes('comercial')"
          ],
          "line": 128,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('investigación') || finalidad.includes('análisis')"
          ],
          "line": 132,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.descripcion && ratData.descripcion.length > 50"
          ],
          "line": 139,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "tipoInteres === 'seguridad_empresa' || tipoInteres === 'cumplimiento_contractual'"
          ],
          "line": 148,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "evaluarNecesidadTratamiento",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 164,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "totalCategorias <= 2"
          ],
          "line": 172,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "totalCategorias > 5"
          ],
          "line": 175,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "includes",
          "type": "method",
          "parameters": [
            "'alternativa disponible'))"
          ],
          "line": 183,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.length > 100 && finalidad.includes('específicamente')"
          ],
          "line": 193,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "ratData.descripcion?.includes('imposible') || ratData.descripcion?.includes('imprescindible')"
          ],
          "line": 199,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "evaluarImpactoDerechos",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 214,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriaEspecial"
          ],
          "line": 230,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "calcularBalanzaFinal",
          "type": "method",
          "parameters": [
            "evaluacionInteres",
            "evaluacionNecesidad",
            "evaluacionImpacto"
          ],
          "line": 247,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "balance >= 3"
          ],
          "line": 255,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "balance >= 0"
          ],
          "line": 257,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "documentarResultado",
          "type": "method",
          "parameters": [
            "ratData",
            "evaluacionInteres",
            "evaluacionNecesidad",
            "evaluacionImpacto",
            "resultadoBalanza"
          ],
          "line": 276,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "aplicarEfectosBalancing",
          "type": "method",
          "parameters": [
            "resultadoBalanza",
            "ratData",
            "tenantId"
          ],
          "line": 301,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "!resultadoBalanza.permitir_continuar"
          ],
          "line": 341,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "resultadoBalanza.requiere_medidas"
          ],
          "line": 362,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "catch",
          "type": "method",
          "parameters": [
            "error"
          ],
          "line": 383,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "determinarRelacionTitular",
          "type": "method",
          "parameters": [
            "ratData",
            "tenantId"
          ],
          "line": 390,
          "complexity": "low",
          "is_async": true,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "relacionExistente?.length > 0"
          ],
          "line": 401,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('empleado') || finalidad.includes('trabajador')"
          ],
          "line": 406,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('público') || finalidad.includes('gobierno')"
          ],
          "line": 409,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('comercial') || finalidad.includes('venta')"
          ],
          "line": 412,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "determinarNivelPrivacidad",
          "type": "method",
          "parameters": [
            "categoriasDatos"
          ],
          "line": 423,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.sensibles_art14 || categoriasDatos.biometricos || categoriasDatos.geneticos"
          ],
          "line": 427,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.financieros || categoriasDatos.salud || categoriasDatos.ubicacion"
          ],
          "line": 432,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "categoriasDatos.laborales || categoriasDatos.comerciales"
          ],
          "line": 437,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "determinarCategoriaEspecialTitular",
          "type": "method",
          "parameters": [
            "ratData"
          ],
          "line": 446,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('empleado') || finalidad.includes('trabajador')"
          ],
          "line": 453,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('vulnerable') || finalidad.includes('discapacidad')"
          ],
          "line": 456,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        },
        {
          "name": "if",
          "type": "method",
          "parameters": [
            "finalidad.includes('cliente frecuente') || finalidad.includes('fidelización')"
          ],
          "line": 459,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/services/testBalancingEngine.js"
        }
      ],
      "handlers": [
        {
          "name": "handleTenantSelect",
          "type": "arrow",
          "parameters": [
            "tenant"
          ],
          "line": 339,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/App.js"
        },
        {
          "name": "handleInputChange",
          "type": "arrow",
          "parameters": [
            "field",
            "value"
          ],
          "line": 109,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/DPIAAlgoritmos.js"
        },
        {
          "name": "handleExpandTerm",
          "type": "arrow",
          "parameters": [
            "key"
          ],
          "line": 1874,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": false,
          "file": "/frontend/src/pages/GlosarioLPDP.js"
        },
        {
          "name": "handleEditRAT",
          "type": "arrow",
          "parameters": [
            "ratId"
          ],
          "line": 188,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/RATListPage.js"
        },
        {
          "name": "handleViewRAT",
          "type": "arrow",
          "parameters": [
            "ratId"
          ],
          "line": 192,
          "complexity": "low",
          "is_async": false,
          "has_try_catch": true,
          "file": "/frontend/src/pages/RATListPage.js"
        }
      ]
    },
    "total_count": 2587,
    "complexity_distribution": {
      "low": 2587
    }
  },
  "dependencies_map": {
    "import_graph": {
      "/frontend/src/App.js": [
        {
          "imported": "CssBaseline",
          "source": "@mui/material/CssBaseline",
          "type": "default"
        },
        {
          "imported": "darkTheme",
          "source": "./theme/darkTheme",
          "type": "default"
        },
        {
          "imported": "LayoutSimple",
          "source": "./components/LayoutSimple",
          "type": "default"
        },
        {
          "imported": "Login",
          "source": "./components/auth/Login",
          "type": "default"
        },
        {
          "imported": "AdminPanel",
          "source": "./pages/AdminPanel",
          "type": "default"
        },
        {
          "imported": "UserManagement",
          "source": "./components/admin/UserManagement",
          "type": "default"
        },
        {
          "imported": "IAAgentStatusPage",
          "source": "./components/admin/IAAgentStatusPage",
          "type": "default"
        },
        {
          "imported": "GlosarioLPDP",
          "source": "./pages/GlosarioLPDP",
          "type": "default"
        },
        {
          "imported": "ModuloEIPD",
          "source": "./components/ModuloEIPD",
          "type": "default"
        },
        {
          "imported": "PreventiveAIController",
          "source": "./components/PreventiveAIController",
          "type": "default"
        },
        {
          "imported": "GestionProveedores",
          "source": "./components/GestionProveedores",
          "type": "default"
        },
        {
          "imported": "RATFormWithCompliance",
          "source": "./components/RATFormWithCompliance",
          "type": "default"
        },
        {
          "imported": "DashboardDPO",
          "source": "./pages/DashboardDPO",
          "type": "default"
        },
        {
          "imported": "ProcesoCompletoPage",
          "source": "./pages/ProcesoCompleto",
          "type": "default"
        },
        {
          "imported": "GestionAsociaciones",
          "source": "./pages/GestionAsociaciones",
          "type": "default"
        },
        {
          "imported": "DPIAAlgoritmos",
          "source": "./pages/DPIAAlgoritmos",
          "type": "default"
        },
        {
          "imported": "RATSystemProfessional",
          "source": "./components/RATSystemProfessional",
          "type": "default"
        },
        {
          "imported": "RATListPage",
          "source": "./pages/RATListPage",
          "type": "default"
        },
        {
          "imported": "RATEditPage",
          "source": "./pages/RATEditPage",
          "type": "default"
        },
        {
          "imported": "DPOApprovalQueue",
          "source": "./pages/DPOApprovalQueue",
          "type": "default"
        },
        {
          "imported": "ComplianceMetrics",
          "source": "./components/ComplianceMetrics",
          "type": "default"
        },
        {
          "imported": "EIPDCreator",
          "source": "./pages/EIPDCreator",
          "type": "default"
        },
        {
          "imported": "EIPDListPage",
          "source": "./pages/EIPDListPage",
          "type": "default"
        },
        {
          "imported": "ProviderManager",
          "source": "./pages/ProviderManager",
          "type": "default"
        },
        {
          "imported": "AdminDashboard",
          "source": "./components/AdminDashboard",
          "type": "default"
        },
        {
          "imported": "RATSearchFilter",
          "source": "./components/RATSearchFilter",
          "type": "default"
        },
        {
          "imported": "NotificationCenter",
          "source": "./components/NotificationCenter",
          "type": "default"
        },
        {
          "imported": "DPAGenerator",
          "source": "./components/DPAGenerator",
          "type": "default"
        },
        {
          "imported": "APIPartnersIntegration",
          "source": "./components/APIPartnersIntegration",
          "type": "default"
        },
        {
          "imported": "ReportGenerator",
          "source": "./components/ReportGenerator",
          "type": "default"
        },
        {
          "imported": "EIPDTemplates",
          "source": "./components/EIPDTemplates",
          "type": "default"
        },
        {
          "imported": "CalendarView",
          "source": "./components/CalendarView",
          "type": "default"
        },
        {
          "imported": "ImmutableAuditLog",
          "source": "./components/ImmutableAuditLog",
          "type": "default"
        },
        {
          "imported": "DiagnosticCenter",
          "source": "./components/DiagnosticCenter",
          "type": "default"
        },
        {
          "imported": "PaletaColores",
          "source": "./pages/PaletaColores",
          "type": "default"
        },
        {
          "imported": "SistemaPrincipal",
          "source": "./pages/SistemaPrincipal",
          "type": "default"
        },
        {
          "imported": " BrowserRouter as Router, Routes, Route, Navigate ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": " ThemeProvider, createTheme ",
          "source": "@mui/material/styles",
          "type": "named"
        },
        {
          "imported": " Box, CircularProgress ",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": " AuthProvider, useAuth ",
          "source": "./contexts/AuthContext",
          "type": "named"
        },
        {
          "imported": " TenantProvider, useTenant ",
          "source": "./contexts/TenantContext",
          "type": "named"
        }
      ],
      "/frontend/src/components/APIPartnersIntegration.js": [
        {
          "imported": "PageLayout",
          "source": "./PageLayout",
          "type": "default"
        },
        {
          "imported": "\n  Box,\n  Paper,\n  Typography,\n  Button,\n  Grid,\n  Card,\n  CardContent,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  Switch,\n  Alert,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Divider,\n  Badge,\n  Tooltip\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\n  Api as APIIcon,\n  Key as KeyIcon,\n  Webhook as WebhookIcon,\n  Analytics as MetricsIcon,\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  Refresh as RefreshIcon,\n  Send as SendIcon,\n  CheckCircle as SuccessIcon,\n  Error as ErrorIcon,\n  Warning as WarningIcon,\n  Info as InfoIcon,\n  Code as CodeIcon,\n  Security as SecurityIcon,\n  Timeline as TimelineIcon,\n  TrendingUp as TrendingIcon\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        },
        {
          "imported": " useAuth ",
          "source": "../contexts/AuthContext",
          "type": "named"
        }
      ],
      "/frontend/src/components/AdminDashboard.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        },
        {
          "imported": "\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  Alert,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Switch,\r\n  FormControlLabel,\r\n  Divider,\r\n  Tabs,\r\n  Tab,\r\n  LinearProgress,\r\n  Badge,\r\n  Avatar,\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Business as BusinessIcon,\r\n  People as PeopleIcon,\r\n  Security as SecurityIcon,\r\n  Settings as SettingsIcon,\r\n  Analytics as AnalyticsIcon,\r\n  CheckCircle as CheckIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Add as AddIcon,\r\n  Visibility as ViewIcon,\r\n  VpnKey as KeyIcon,\r\n  Shield as ShieldIcon,\r\n  Assignment as AssignmentIcon,\r\n  Notifications as NotificationIcon,\r\n  Refresh as RefreshIcon,\r\n  Timeline as TimelineIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        }
      ],
      "/frontend/src/components/CalendarView.js": [
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": "\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  Chip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Alert,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  IconButton,\r\n  Tooltip,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  Badge,\r\n  Avatar,\r\n  Divider\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Event as CalendarIcon,\r\n  Today as TodayIcon,\r\n  Schedule as ScheduleIcon,\r\n  Warning as WarningIcon,\r\n  Assignment as RATIcon,\r\n  Gavel as DPAIcon,\r\n  Shield as EIPDIcon,\r\n  Security as AuditIcon,\r\n  Notifications as ReminderIcon,\r\n  ChevronLeft as PrevIcon,\r\n  ChevronRight as NextIcon,\r\n  Add as AddIcon,\r\n  FilterList as FilterIcon,\r\n  ViewModule as MonthIcon,\r\n  ViewWeek as WeekIcon,\r\n  ViewDay as DayIcon,\r\n  Business as ProviderIcon,\r\n  Group as TeamIcon,\r\n  Assessment as TaskIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " ratService ",
          "source": "../services/ratService",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        }
      ],
      "/frontend/src/components/ComplianceDashboard.js": [
        {
          "imported": "\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  Chip,\n  Alert,\n  Button,\n  CircularProgress,\n  LinearProgress,\n  IconButton,\n  Collapse,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Badge,\n  Tooltip\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\n  Assessment as AssessmentIcon,\n  Warning as WarningIcon,\n  CheckCircle as CheckIcon,\n  Error as ErrorIcon,\n  TrendingUp as TrendingUpIcon,\n  Security as SecurityIcon,\n  Assignment as AssignmentIcon,\n  Business as BusinessIcon,\n  ExpandMore as ExpandMoreIcon,\n  ExpandLess as ExpandLessIcon,\n  Refresh as RefreshIcon,\n  Info as InfoIcon\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " useComplianceDashboard ",
          "source": "../hooks/useComplianceIntegration.js",
          "type": "named"
        }
      ],
      "/frontend/src/components/ComplianceMetrics.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        },
        {
          "imported": "\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CircularProgress,\r\n  LinearProgress,\r\n  Alert,\r\n  Chip,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  TrendingUp as TrendUpIcon,\r\n  TrendingDown as TrendDownIcon,\r\n  CheckCircle as CompliantIcon,\r\n  Warning as WarningIcon,\r\n  Error as ErrorIcon,\r\n  Schedule as PendingIcon,\r\n  Assessment as MetricsIcon,\r\n  Security as SecurityIcon,\r\n  Business as BusinessIcon,\r\n  People as PeopleIcon,\r\n  Description as DocumentIcon,\r\n  Timeline as TimelineIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " ratService ",
          "source": "../services/ratService",
          "type": "named"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        }
      ],
      "/frontend/src/components/DPAGenerator.js": [
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": "\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  TextField,\r\n  FormControl,\r\n  FormLabel,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Radio,\r\n  Checkbox,\r\n  FormGroup,\r\n  Button,\r\n  Alert,\r\n  Chip,\r\n  Divider,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  CircularProgress,\r\n  Stepper,\r\n  Step,\r\n  StepLabel\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Description as DocumentIcon,\r\n  Security as SecurityIcon,\r\n  Business as BusinessIcon,\r\n  CheckCircle as CheckIcon,\r\n  Warning as WarningIcon,\r\n  GetApp as DownloadIcon,\r\n  Send as SendIcon,\r\n  Preview as PreviewIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/components/DiagnosticCenter.js": [
        {
          "imported": "frontendValidator",
          "source": "../utils/frontendValidator",
          "type": "default"
        },
        {
          "imported": "\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  Chip,\r\n  Alert,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  LinearProgress,\r\n  IconButton,\r\n  Tooltip,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Badge,\r\n  Divider\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  BugReport as DiagnosticIcon,\r\n  PlayArrow as RunTestIcon,\r\n  Stop as StopIcon,\r\n  Refresh as RefreshIcon,\r\n  CheckCircle as SuccessIcon,\r\n  Warning as WarningIcon,\r\n  Error as ErrorIcon,\r\n  Speed as PerformanceIcon,\r\n  Visibility as ViewIcon,\r\n  ExpandMore as ExpandIcon,\r\n  Timeline as AnalyticsIcon,\r\n  Security as ValidationIcon,\r\n  Code as CodeIcon,\r\n  Html as HtmlIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/components/EIPDTemplates.js": [
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": "\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Button,\r\n  Chip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Alert,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Divider,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n  Tooltip,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Badge\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Shield as EIPDIcon,\r\n  Add as AddIcon,\r\n  Visibility as ViewIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  FileCopy as CopyIcon,\r\n  GetApp as UseTemplateIcon,\r\n  Warning as RiskIcon,\r\n  CheckCircle as ValidIcon,\r\n  Business as IndustryIcon,\r\n  Security as SecurityIcon,\r\n  Assessment as AssessmentIcon,\r\n  Psychology as ProcessIcon,\r\n  ExpandMore as ExpandIcon,\r\n  Star as RecommendedIcon,\r\n  Schedule as TimeIcon,\r\n  Group as CollaborateIcon,\r\n  Description as DocumentIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " ratService ",
          "source": "../services/ratService",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        }
      ],
      "/frontend/src/components/EmpresaDataManager.js": [
        {
          "imported": "\n  Box,\n  Paper,\n  Typography,\n  TextField,\n  Button,\n  Grid,\n  Card,\n  CardContent,\n  Alert,\n  Divider,\n  Chip,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\n  Business as BusinessIcon,\n  Person as PersonIcon,\n  Computer as ComputerIcon,\n  Schedule as ScheduleIcon,\n  Gavel as GavelIcon,\n  Save as SaveIcon,\n  CheckCircle as CheckIcon,\n",
          "source": "@mui/icons-material",
          "type": "named"
        }
      ],
      "/frontend/src/components/FundamentosTecnicos.js": [
        {
          "imported": "PageLayout",
          "source": "./PageLayout",
          "type": "default"
        },
        {
          "imported": "\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Chip,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Alert,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  ExpandMore as ExpandIcon,\r\n  Gavel as LegalIcon,\r\n  Science as TechnicalIcon,\r\n  School as AcademicIcon,\r\n  Business as IndustryIcon,\r\n  Download as DownloadIcon,\r\n  Info as InfoIcon,\r\n  CheckCircle as ValidatedIcon,\r\n  Public as InternationalIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " \r\n  fuentesNormativas, \r\n  clasificacionIndustrial, \r\n  metodologiaClasificacion,\r\n  obtenerInformacionSectorial,\r\n  generarReporteFundamentos \r\n",
          "source": "../services/industryStandardsService",
          "type": "named"
        }
      ],
      "/frontend/src/components/GestionProveedores.js": [
        {
          "imported": "proveedoresService",
          "source": "../services/proveedoresService",
          "type": "default"
        },
        {
          "imported": " useSearchParams ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": "\n  Box,\n  Container,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Button,\n  TextField,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Chip,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Divider,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControlLabel,\n  Switch,\n  Tabs,\n  Tab,\n  Badge,\n  LinearProgress,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\n  Add,\n  Edit,\n  Delete,\n  Visibility,\n  Download,\n  Upload,\n  Business,\n  Assignment,\n  Warning,\n  CheckCircle,\n  Schedule,\n  Security,\n  Gavel,\n  CloudUpload,\n  Assessment,\n  ExpandMore,\n  ContentCopy,\n  Email,\n  Phone,\n  Language,\n  LocationOn,\n  VerifiedUser,\n  TableChart\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " useAuth ",
          "source": "../contexts/AuthContext",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/components/ImmutableAuditLog.js": [
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": "\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Chip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Alert,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Divider,\r\n  Tooltip,\r\n  Badge,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  LinearProgress,\r\n  Tabs,\r\n  Tab,\r\n  Avatar\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Security as AuditIcon,\r\n  Fingerprint as HashIcon,\r\n  Lock as ImmutableIcon,\r\n  Visibility as ViewIcon,\r\n  Download as ExportIcon,\r\n  Search as SearchIcon,\r\n  Timeline as TimelineIcon,\r\n  Person as UserIcon,\r\n  Assignment as ActionIcon,\r\n  Business as TenantIcon,\r\n  AccessTime as TimestampIcon,\r\n  VerifiedUser as VerifiedIcon,\r\n  Warning as IntegrityIcon,\r\n  Shield as SecureIcon,\r\n  DataObject as DataIcon,\r\n  FilterList as FilterIcon,\r\n  ExpandMore as ExpandIcon,\r\n  GetApp as DownloadIcon,\r\n  Refresh as RefreshIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " ratService ",
          "source": "../services/ratService",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        }
      ],
      "/frontend/src/components/Layout.js": [
        {
          "imported": " useNavigate, useLocation ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": " useAuth ",
          "source": "../contexts/AuthContext",
          "type": "named"
        },
        {
          "imported": "\n  Box,\n  Drawer,\n  AppBar,\n  Toolbar,\n  List,\n  Typography,\n  Divider,\n  IconButton,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n  Avatar,\n  Chip,\n  useTheme,\n  useMediaQuery,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Button,\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\n  Menu as MenuIcon,\n  School as SchoolIcon,\n  Psychology as PsychologyIcon,\n  Science as ScienceIcon,\n  Timeline as TimelineIcon,\n  EmojiEvents as TrophyIcon,\n  ChevronLeft as ChevronLeftIcon,\n  Inventory,\n  Book,\n  Science,\n  Logout as LogoutIcon,\n  Assessment,\n  Security,\n  Business,\n  RocketLaunch,\n  Link as LinkIcon,\n",
          "source": "@mui/icons-material",
          "type": "named"
        }
      ],
      "/frontend/src/components/LayoutSimple.js": [
        {
          "imported": " useNavigate, useLocation ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": " useAuth ",
          "source": "../contexts/AuthContext",
          "type": "named"
        },
        {
          "imported": "\n  Box,\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n  IconButton,\n  Menu,\n  MenuItem,\n  Avatar,\n  Divider,\n  Fab,\n  Tooltip,\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\n  Menu as MenuIcon,\n  Logout as LogoutIcon,\n  Gavel as GavelIcon,\n  Dashboard as DashboardIcon,\n  Assessment as AssessmentIcon,\n  Home as HomeIcon,\n  School as SchoolIcon,\n  AdminPanelSettings as AdminIcon,\n  Business as BusinessIcon,\n  ArrowBack as BackIcon,\n  ArrowForward as ForwardIcon,\n",
          "source": "@mui/icons-material",
          "type": "named"
        }
      ],
      "/frontend/src/components/ModuloEIPD.js": [
        {
          "imported": " useSearchParams ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": "\n  Box,\n  Container,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  Button,\n  TextField,\n  FormControlLabel,\n  Switch,\n  Chip,\n  Alert,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Paper,\n  Divider,\n  LinearProgress,\n  Rating,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Checkbox,\n  FormGroup,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\n  Security,\n  Warning,\n  CheckCircle,\n  Error,\n  Assessment,\n  Gavel,\n  Psychology,\n  AutoMode,\n  Shield,\n  DataObject,\n  Timeline,\n  FileDownload,\n  ExpandMore,\n  Lightbulb,\n  Report,\n  Business\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " useAuth ",
          "source": "../contexts/AuthContext",
          "type": "named"
        }
      ],
      "/frontend/src/components/NotificationCenter.js": [
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": "\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  IconButton,\r\n  Chip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Alert,\r\n  Badge,\r\n  Tooltip,\r\n  Divider,\r\n  Avatar,\r\n  Switch,\r\n  FormControlLabel,\r\n  Tabs,\r\n  Tab,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Notifications as NotificationIcon,\r\n  NotificationsActive as ActiveNotificationIcon,\r\n  Warning as WarningIcon,\r\n  Error as ErrorIcon,\r\n  Info as InfoIcon,\r\n  CheckCircle as SuccessIcon,\r\n  Schedule as ScheduleIcon,\r\n  Assignment as TaskIcon,\r\n  Security as SecurityIcon,\r\n  Gavel as ComplianceIcon,\r\n  Business as ProviderIcon,\r\n  AdminPanelSettings as AdminIcon,\r\n  Person as UserIcon,\r\n  Settings as SettingsIcon,\r\n  Clear as ClearIcon,\r\n  MarkAsUnread as UnreadIcon,\r\n  Delete as DeleteIcon,\r\n  FilterList as FilterIcon,\r\n  ExpandMore as ExpandIcon,\r\n  Send as SendIcon,\r\n  Group as TeamIcon,\r\n  AccessTime as TimeIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " ratService ",
          "source": "../services/ratService",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        }
      ],
      "/frontend/src/components/PageLayout.js": [
        {
          "imported": "React",
          "source": "react",
          "type": "default"
        },
        {
          "imported": " Box, Container, Typography, Paper ",
          "source": "@mui/material",
          "type": "named"
        }
      ],
      "/frontend/src/components/PresentacionModuloCero.js": [
        {
          "imported": "\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Dialog,\n  DialogContent,\n  IconButton,\n  Fab\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\n  PlayArrow as PlayIcon,\n  Close as CloseIcon,\n  Fullscreen as FullscreenIcon\n",
          "source": "@mui/icons-material",
          "type": "named"
        }
      ],
      "/frontend/src/components/PreventiveAIController.js": [
        {
          "imported": "preventiveAI",
          "source": "../utils/preventiveAI",
          "type": "default"
        },
        {
          "imported": "logicAuditor",
          "source": "../utils/logicAuditor",
          "type": "default"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        },
        {
          "imported": " useAuth ",
          "source": "../contexts/AuthContext",
          "type": "named"
        }
      ],
      "/frontend/src/components/ProcesoCompleto.js": [
        {
          "imported": "\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  Alert,\n  LinearProgress,\n  Chip,\n  Grid,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\n  CheckCircle as CheckIcon,\n  Lock as LockIcon,\n  Assignment as RATIcon,\n  Security as EIPDIcon,\n  Business as DPAIcon,\n  Assessment as DPIAIcon,\n  CloudDone as CompleteIcon,\n  Archive as ArchiveIcon,\n  Verified as VerifiedIcon,\n  Campaign as NotificationIcon,\n  Timeline as TimelineIcon\n",
          "source": "@mui/icons-material",
          "type": "named"
        }
      ],
      "/frontend/src/components/ProviderManager.js": [
        {
          "imported": "\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  Alert,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Divider,\r\n  Switch,\r\n  FormControlLabel,\r\n  Tabs,\r\n  Tab,\r\n  Badge,\r\n  LinearProgress,\r\n  Stepper,\r\n  Step,\r\n  StepLabel\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Visibility as ViewIcon,\r\n  CloudUpload as UploadIcon,\r\n  Description as ContractIcon,\r\n  Security as SecurityIcon,\r\n  Business as BusinessIcon,\r\n  Warning as WarningIcon,\r\n  CheckCircle as CheckIcon,\r\n  Cancel as CancelIcon,\r\n  Download as DownloadIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  Assignment as AssignmentIcon,\r\n  Gavel as GavelIcon,\r\n  Shield as ShieldIcon,\r\n  Public as PublicIcon,\r\n  Lock as LockIcon,\r\n  Timeline as TimelineIcon,\r\n  Notifications as NotificationIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        }
      ],
      "/frontend/src/components/RATEditPage.js": [
        {
          "imported": "preventiveAI",
          "source": "../utils/preventiveAI",
          "type": "default"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        },
        {
          "imported": " useAuth ",
          "source": "../hooks/useAuth",
          "type": "named"
        },
        {
          "imported": "\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  StepContent,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormControlLabel,\r\n  Switch,\r\n  Checkbox,\r\n  Chip,\r\n  Alert,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  IconButton,\r\n  Tooltip,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  LinearProgress,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon,\r\n  Edit as EditIcon,\r\n  CheckCircle as CheckIcon,\r\n  Warning as WarningIcon,\r\n  Add as AddIcon,\r\n  Delete as DeleteIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  Security as SecurityIcon,\r\n  Gavel as GavelIcon,\r\n  Business as BusinessIcon,\r\n  Schedule as ScheduleIcon,\r\n  Public as PublicIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " useParams, useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        }
      ],
      "/frontend/src/components/RATFormWithCompliance.js": [
        {
          "imported": "ratIntelligenceEngine",
          "source": "../services/ratIntelligenceEngine",
          "type": "default"
        },
        {
          "imported": "\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  TextField,\n  Button,\n  Alert,\n  Grid,\n  Chip,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControlLabel,\n  Checkbox,\n  Divider,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\n  Warning as WarningIcon,\n  Assignment as RATIcon,\n  Security as EIPDIcon,\n  Business as DPAIcon,\n  Assessment as DPIAIcon,\n  CheckCircle as CheckIcon,\n  Error as ErrorIcon\n",
          "source": "@mui/icons-material",
          "type": "named"
        }
      ],
      "/frontend/src/components/RATListPage.js": [
        {
          "imported": "\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TablePagination,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Alert,\r\n  LinearProgress,\r\n  Menu,\r\n  MenuItem,\r\n  ListItemIcon,\r\n  ListItemText\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Visibility as ViewIcon,\r\n  Delete as DeleteIcon,\r\n  MoreVert as MoreIcon,\r\n  GetApp as ExportIcon,\r\n  FilterList as FilterIcon,\r\n  Search as SearchIcon,\r\n  Security as SecurityIcon,\r\n  Warning as WarningIcon,\r\n  CheckCircle as CheckIcon,\r\n  Schedule as ScheduleIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        }
      ],
      "/frontend/src/components/RATSearchFilter.js": [
        {
          "imported": "\r\n  Box,\r\n  Paper,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  Button,\r\n  Grid,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Switch,\r\n  FormControlLabel,\r\n  Slider,\r\n  Typography,\r\n  IconButton,\r\n  Tooltip\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Search as SearchIcon,\r\n  FilterList as FilterIcon,\r\n  Clear as ClearIcon,\r\n  Save as SaveIcon,\r\n  Star as StarIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  Download as DownloadIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        }
      ],
      "/frontend/src/components/RATSystemProfessional.js": [
        {
          "imported": "preventiveAI",
          "source": "../utils/preventiveAI",
          "type": "default"
        },
        {
          "imported": "supabaseErrorLogger",
          "source": "../utils/supabaseErrorLogger",
          "type": "default"
        },
        {
          "imported": "ratService",
          "source": "../services/ratService",
          "type": "default"
        },
        {
          "imported": "ratIntelligenceEngine",
          "source": "../services/ratIntelligenceEngine",
          "type": "default"
        },
        {
          "imported": "riskCalculationEngine",
          "source": "../services/riskCalculationEngine",
          "type": "default"
        },
        {
          "imported": "testBalancingEngine",
          "source": "../services/testBalancingEngine",
          "type": "default"
        },
        {
          "imported": "categoryAnalysisEngine",
          "source": "../services/categoryAnalysisEngine",
          "type": "default"
        },
        {
          "imported": "specificCasesEngine",
          "source": "../services/specificCasesEngine",
          "type": "default"
        },
        {
          "imported": "EmpresaDataManager",
          "source": "./EmpresaDataManager",
          "type": "default"
        },
        {
          "imported": "PageLayout",
          "source": "./PageLayout",
          "type": "default"
        },
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": " \n  guardarDatosEmpresa, \n  cargarDatosEmpresa, \n  autoCompletarFormulario,\n  existenDatosEmpresa \n",
          "source": "../utils/supabaseEmpresaPersistence",
          "type": "named"
        },
        {
          "imported": " RAT_ESTADOS ",
          "source": "../constants/estados",
          "type": "named"
        },
        {
          "imported": "\n  Box,\n  Container,\n  Typography,\n  Button,\n  Paper,\n  TextField,\n  Radio,\n  RadioGroup,\n  FormControlLabel,\n  FormControl,\n  FormLabel,\n  Checkbox,\n  FormGroup,\n  LinearProgress,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Card,\n  CardContent,\n  Alert,\n  Stepper,\n  Step,\n  StepLabel,\n  Divider,\n  List,\n  ListItem,\n  ListItemText,\n  Chip,\n  IconButton,\n  CardHeader,\n  Collapse,\n  Avatar,\n  Tooltip\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\n  Visibility as VisibilityIcon,\n  Edit as EditIcon,\n  ContentCopy as ContentCopyIcon,\n  Delete as DeleteIcon,\n  Person as PersonIcon,\n  Security as SecurityIcon,\n  AccountBalance as FinanceIcon,\n  Work as WorkIcon,\n  School as EducationIcon,\n  Phone as CommunicationIcon,\n  Language as WebIcon,\n  ExpandMore as ExpandMoreIcon,\n  Business as BusinessIcon,\n  HealthAndSafety as HealthIcon,\n  Warning as WarningIcon,\n  CheckCircle as CheckIcon,\n  Assignment as RATIcon\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " ThemeProvider, createTheme ",
          "source": "@mui/material/styles",
          "type": "named"
        },
        {
          "imported": " fuentesNormativas, obtenerInformacionSectorial ",
          "source": "../services/industryStandardsService",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        },
        {
          "imported": " useAuth ",
          "source": "../contexts/AuthContext",
          "type": "named"
        }
      ],
      "/frontend/src/components/ReportGenerator.js": [
        {
          "imported": "PageLayout",
          "source": "./PageLayout",
          "type": "default"
        },
        {
          "imported": "\n  Box,\n  Paper,\n  Typography,\n  Button,\n  Grid,\n  Card,\n  CardContent,\n  IconButton,\n  Chip,\n  Alert,\n  LinearProgress,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  Checkbox,\n  TextField,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Divider\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\n  PictureAsPdf as PDFIcon,\n  TableChart as ExcelIcon,\n  Download as DownloadIcon,\n  Assessment as ReportIcon,\n  DateRange as DateIcon,\n  FilterList as FilterIcon,\n  Send as SendIcon,\n  CheckCircle as CheckIcon,\n  Warning as WarningIcon,\n  Schedule as ScheduleIcon\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        },
        {
          "imported": " useAuth ",
          "source": "../contexts/AuthContext",
          "type": "named"
        }
      ],
      "/frontend/src/components/VideoAnimado.js": [
        {
          "imported": "\r\n  Box,\r\n  Typography,\r\n  IconButton,\r\n  LinearProgress,\r\n  Paper,\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  PlayArrow,\r\n  Pause,\r\n  VolumeUp,\r\n  VolumeMute,\r\n  Fullscreen,\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        }
      ],
      "/frontend/src/components/__tests__/AdminDashboard.test.js": [
        {
          "imported": "React",
          "source": "react",
          "type": "default"
        },
        {
          "imported": "AdminDashboard",
          "source": "../AdminDashboard",
          "type": "default"
        },
        {
          "imported": " render, screen ",
          "source": "@testing-library/react",
          "type": "named"
        },
        {
          "imported": " BrowserRouter ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": " ThemeProvider, createTheme ",
          "source": "@mui/material/styles",
          "type": "named"
        }
      ],
      "/frontend/src/components/admin/AdminPanel.js": [
        {
          "imported": "AdminDashboard",
          "source": "./AdminDashboard",
          "type": "default"
        },
        {
          "imported": "TenantManagement",
          "source": "./TenantManagement",
          "type": "default"
        },
        {
          "imported": "UserManagement",
          "source": "./UserManagement",
          "type": "default"
        },
        {
          "imported": "SystemAudit",
          "source": "./SystemAudit",
          "type": "default"
        },
        {
          "imported": "SystemReports",
          "source": "./SystemReports",
          "type": "default"
        },
        {
          "imported": "\r\n  Box,\r\n  Tabs,\r\n  Tab,\r\n  Typography,\r\n  Paper,\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Badge,\r\n  Chip,\r\n  Alert,\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Dashboard as DashboardIcon,\r\n  Business as BusinessIcon,\r\n  People as PeopleIcon,\r\n  Security as SecurityIcon,\r\n  Assessment as AssessmentIcon,\r\n  History as HistoryIcon,\r\n  Notifications as NotificationsIcon,\r\n  Settings as SettingsIcon,\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        }
      ],
      "/frontend/src/components/admin/IAAgentStatusPage.js": [
        {
          "imported": "iaAgentReporter",
          "source": "../../utils/iaAgentReporter",
          "type": "default"
        },
        {
          "imported": "\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Chip,\r\n  Alert,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  LinearProgress,\r\n  Button,\r\n  Badge\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  SmartToy as AIIcon,\r\n  CheckCircle as SuccessIcon,\r\n  Warning as WarningIcon,\r\n  Error as ErrorIcon,\r\n  Refresh as RefreshIcon,\r\n  Timeline as ActivityIcon,\r\n  Security as ComplianceIcon,\r\n  Storage as DatabaseIcon,\r\n  Speed as PerformanceIcon,\r\n  AdminPanelSettings as AdminIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " useAuth ",
          "source": "../../contexts/AuthContext",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/components/admin/UsageDashboard.js": [
        {
          "imported": "\r\n  Box,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  LinearProgress,\r\n  Chip,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Alert,\r\n  Divider\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Assessment,\r\n  TrendingUp,\r\n  Group,\r\n  Storage,\r\n  Security,\r\n  Business\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/components/admin/UserManagement.js": [
        {
          "imported": "\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Button,\r\n  Chip,\r\n  Alert,\r\n  CircularProgress,\r\n  Grid\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  PersonAdd as AddUserIcon,\r\n  Refresh as RefreshIcon,\r\n  CheckCircle as ActiveIcon,\r\n  Cancel as InactiveIcon,\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/components/auth/Login.js": [
        {
          "imported": "\r\n  Box,\r\n  Paper,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  Container,\r\n  Alert,\r\n  CircularProgress,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Divider,\r\n  useTheme\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": " LockOutlined, Business, Security, VerifiedUser ",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " useAuth ",
          "source": "../../contexts/AuthContext",
          "type": "named"
        }
      ],
      "/frontend/src/config/industries.config.js": [],
      "/frontend/src/config/supabaseClient.js": [
        {
          "imported": " createClient ",
          "source": "@supabase/supabase-js",
          "type": "named"
        }
      ],
      "/frontend/src/config.js": [],
      "/frontend/src/constants/estados.js": [],
      "/frontend/src/contexts/AuthContext.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/contexts/TenantContext.js": [
        {
          "imported": "ratService",
          "source": "../services/ratService",
          "type": "default"
        },
        {
          "imported": " useAuth ",
          "source": "./AuthContext",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/debug_rat_id.js": [],
      "/frontend/src/hooks/useDataSync.js": [
        {
          "imported": "dataSyncService",
          "source": "../services/dataSync",
          "type": "default"
        },
        {
          "imported": " useState, useEffect, useCallback ",
          "source": "react",
          "type": "named"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        }
      ],
      "/frontend/src/index.js": [
        {
          "imported": "React",
          "source": "react",
          "type": "default"
        },
        {
          "imported": "ReactDOM",
          "source": "react-dom/client",
          "type": "default"
        },
        {
          "imported": "App",
          "source": "./App",
          "type": "default"
        }
      ],
      "/frontend/src/pages/AdminDashboard.js": [
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": "\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Chip,\r\n  Alert,\r\n  Tabs,\r\n  Tab,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Divider,\r\n  Badge,\r\n  Tooltip,\r\n  Switch,\r\n  FormControlLabel\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  AdminPanelSettings as AdminIcon,\r\n  Business as HoldingIcon,\r\n  AccountTree as HierarchyIcon,\r\n  People as UsersIcon,\r\n  Security as PermissionsIcon,\r\n  Analytics as ReportsIcon,\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Visibility as ViewIcon,\r\n  Settings as SettingsIcon,\r\n  GroupWork as GroupIcon,\r\n  SupervisorAccount as SupervisorIcon,\r\n  Policy as PolicyIcon,\r\n  Assessment as ComplianceIcon,\r\n  Notifications as AlertIcon,\r\n  PublicOff as InactiveIcon,\r\n  CheckCircle as ActiveIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " ratService ",
          "source": "../services/ratService",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/pages/AdminPanel.js": [
        {
          "imported": "IAAgentStatusPage",
          "source": "../components/admin/IAAgentStatusPage",
          "type": "default"
        },
        {
          "imported": "\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Grid,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  Avatar,\r\n  Alert,\r\n  Tabs,\r\n  Tab,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  ListItemSecondaryAction,\r\n  Switch,\r\n  Divider,\r\n  Badge,\r\n  LinearProgress,\r\n  Tooltip,\r\n  Stack,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  InputAdornment,\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  AdminPanelSettings,\r\n  Business,\r\n  People,\r\n  Add,\r\n  Edit,\r\n  Delete,\r\n  Block,\r\n  CheckCircle,\r\n  Warning,\r\n  Error as ErrorIcon,\r\n  Search,\r\n  FilterList,\r\n  Download,\r\n  Upload,\r\n  Settings,\r\n  Security,\r\n  Assignment,\r\n  Assessment,\r\n  TrendingUp,\r\n  Groups,\r\n  Domain,\r\n  PersonAdd,\r\n  Lock,\r\n  LockOpen,\r\n  Email,\r\n  Phone,\r\n  LocationOn,\r\n  CalendarToday,\r\n  VerifiedUser,\r\n  Shield,\r\n  Key,\r\n  Visibility,\r\n  VisibilityOff,\r\n  Refresh,\r\n  Save,\r\n  Cancel,\r\n  Info,\r\n  AttachMoney,\r\n  WorkspacePremium,\r\n  School,\r\n  EmojiEvents,\r\n  Timeline,\r\n  NotificationsActive,\r\n  Backup,\r\n  Restore,\r\n  CloudUpload,\r\n  CloudDownload,\r\n  History,\r\n  PolicyIcon,\r\n  SmartToy,\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " \r\n  adminService, \r\n  organizacionService, \r\n  usuarioService,\r\n  reporteService \r\n",
          "source": "../services/api",
          "type": "named"
        }
      ],
      "/frontend/src/pages/DPIAAlgoritmos.js": [
        {
          "imported": " useSearchParams ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": "\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  TextField,\n  Button,\n  Alert,\n  Stepper,\n  Step,\n  StepLabel,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Grid,\n  LinearProgress,\n  Chip,\n  Paper,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\n  Assessment as DPIAIcon,\n  CheckCircle as CheckIcon,\n  Warning as WarningIcon,\n  AutoAwesome as AIIcon,\n  Security as SecurityIcon,\n  Save as SaveIcon,\n  Send as SendIcon\n",
          "source": "@mui/icons-material",
          "type": "named"
        }
      ],
      "/frontend/src/pages/DPOApprovalQueue.js": [
        {
          "imported": "ratIntelligenceEngine",
          "source": "../services/ratIntelligenceEngine",
          "type": "default"
        },
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": "\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Chip,\r\n  Button,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Alert,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Tooltip,\r\n  Badge,\r\n  LinearProgress,\r\n  Divider\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  CheckCircle as ApproveIcon,\r\n  CheckCircle as CheckIcon,\r\n  Cancel as RejectIcon,\r\n  Visibility as ViewIcon,\r\n  Edit as EditIcon,\r\n  Warning as WarningIcon,\r\n  Schedule as PendingIcon,\r\n  Assessment as RATIcon,\r\n  Person as PersonIcon,\r\n  Business as BusinessIcon,\r\n  Security as SecurityIcon,\r\n  Notifications as NotificationIcon,\r\n  FilterList as FilterIcon,\r\n  Sort as SortIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " ratService ",
          "source": "../services/ratService",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        }
      ],
      "/frontend/src/pages/Dashboard.js": [
        {
          "imported": "React",
          "source": "react",
          "type": "default"
        },
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": "\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Avatar,\n  Alert,\n  Paper,\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\n  PlayCircleOutline,\n  School,\n  ArrowForward,\n  InfoOutlined,\n  RocketLaunch as RocketLaunchIcon,\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " useAuth ",
          "source": "../contexts/AuthContext",
          "type": "named"
        }
      ],
      "/frontend/src/pages/DashboardDPO.js": [
        {
          "imported": "PageLayout",
          "source": "../components/PageLayout",
          "type": "default"
        },
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        },
        {
          "imported": " useDataSync ",
          "source": "../hooks/useDataSync",
          "type": "named"
        },
        {
          "imported": " Box, Container, Typography, Paper, Grid, Card, CardContent, Chip, Alert, Button ",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\n  Dashboard as DashboardIcon,\n  Warning as WarningIcon,\n  CheckCircle as CheckIcon,\n  AssignmentLate as TaskIcon,\n  Shield as ShieldIcon,\n  Notifications as NotificationIcon,\n  List as QueueIcon,\n  Analytics as MetricsIcon\n",
          "source": "@mui/icons-material",
          "type": "named"
        }
      ],
      "/frontend/src/pages/EIPDCreator.js": [
        {
          "imported": "ratIntelligenceEngine",
          "source": "../services/ratIntelligenceEngine",
          "type": "default"
        },
        {
          "imported": " useNavigate, useParams ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": "\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Button,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  TextField,\r\n  FormControl,\r\n  FormLabel,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Radio,\r\n  Checkbox,\r\n  FormGroup,\r\n  Select,\r\n  MenuItem,\r\n  Alert,\r\n  Chip,\r\n  Divider,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  CircularProgress\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Security as SecurityIcon,\r\n  Warning as WarningIcon,\r\n  CheckCircle as CheckIcon,\r\n  Assessment as AssessmentIcon,\r\n  Description as DocumentIcon,\r\n  Gavel as LegalIcon,\r\n  Psychology as BrainIcon,\r\n  Group as GroupIcon,\r\n  Business as BusinessIcon,\r\n  Schedule as TimeIcon,\r\n  Error as ErrorIcon,\r\n  Info as InfoIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " ratService ",
          "source": "../services/ratService",
          "type": "named"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        }
      ],
      "/frontend/src/pages/EIPDListPage.js": [
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": " EIPD_ESTADOS ",
          "source": "../constants/estados",
          "type": "named"
        },
        {
          "imported": "\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Chip,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Alert\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Edit as EditIcon,\r\n  Visibility as ViewIcon,\r\n  Assessment as RiskIcon,\r\n  Security as SecurityIcon,\r\n  Warning as WarningIcon,\r\n  CheckCircle as CompleteIcon,\r\n  Add as AddIcon,\r\n  Download as DownloadIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        }
      ],
      "/frontend/src/pages/GestionAsociaciones.js": [
        {
          "imported": "React",
          "source": "react",
          "type": "default"
        },
        {
          "imported": " useSearchParams ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": " Box, Typography, Paper, Button, Chip ",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": " ArrowBack as BackIcon ",
          "source": "@mui/icons-material",
          "type": "named"
        }
      ],
      "/frontend/src/pages/GlosarioLPDP.js": [
        {
          "imported": "PageLayout",
          "source": "../components/PageLayout",
          "type": "default"
        },
        {
          "imported": "\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Grid,\r\n  TextField,\r\n  InputAdornment,\r\n  Alert,\r\n  Chip,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Paper,\r\n  Divider,\r\n  IconButton,\r\n  Collapse,\r\n  Button,\r\n  Badge,\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Search,\r\n  Book,\r\n  Gavel,\r\n  Warning,\r\n  Info,\r\n  ExpandMore,\r\n  ExpandLess,\r\n  Star,\r\n  NewReleases,\r\n  LocalLibrary,\r\n  Security,\r\n  Policy,\r\n  Business,\r\n  Group,\r\n  LocationOn,\r\n  AttachMoney,\r\n  ChildCare,\r\n  Fingerprint,\r\n  Lock,\r\n  Public,\r\n  Timer,\r\n  Assignment,\r\n  AccountBalance,\r\n  ContentCopy,\r\n  Engineering,\r\n  Assessment,\r\n  Visibility,\r\n  Edit,\r\n  Person,\r\n  VerifiedUser,\r\n  MyLocation,\r\n  Remove,\r\n  CheckCircle,\r\n  CloudDownload,\r\n  Block,\r\n  SmartToy,\r\n  Shield,\r\n  Error,\r\n  VisibilityOff,\r\n  Balance,\r\n  Architecture,\r\n  Description,\r\n  TableChart,\r\n  Delete,\r\n  GetApp,\r\n  AccountTree,\r\n  Settings,\r\n  Build,\r\n  People,\r\n  WorkspacePremium,\r\n  Psychology,\r\n  Science,\r\n  Shuffle,\r\n  SettingsSuggest,\r\n  Storage,\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        }
      ],
      "/frontend/src/pages/ModuloCero_SAFE.js": [
        {
          "imported": "React",
          "source": "react",
          "type": "default"
        },
        {
          "imported": " Box, Typography, Button ",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        }
      ],
      "/frontend/src/pages/PaletaColores.js": [
        {
          "imported": "React",
          "source": "react",
          "type": "default"
        },
        {
          "imported": "\n  Box,\n  Grid,\n  Paper,\n  Typography,\n  Container,\n  Card,\n  CardContent,\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\n  Assessment,\n  Dashboard,\n  Security,\n  Gavel,\n  Business,\n  AccountBalance,\n  Description,\n  Folder,\n  Assignment,\n  CheckCircle,\n  Warning,\n  Error,\n  Info,\n  Settings,\n  Person,\n  Group,\n  Timeline,\n  TrendingUp,\n  BarChart,\n  PieChart,\n  Storage,\n  CloudUpload,\n  CloudDownload,\n  Lock,\n  LockOpen,\n  VerifiedUser,\n  Policy,\n  Article,\n  DocumentScanner,\n  Task,\n  AssignmentTurnedIn,\n  Rule,\n  Checklist,\n  DataUsage,\n  Analytics,\n  Insights,\n  ManageAccounts,\n  AdminPanelSettings,\n  SupervisorAccount,\n  Badge,\n  Shield,\n  GppGood,\n  PrivacyTip,\n  Copyright,\n  Balance\n",
          "source": "@mui/icons-material",
          "type": "named"
        }
      ],
      "/frontend/src/pages/ProcesoCompleto.js": [
        {
          "imported": "React",
          "source": "react",
          "type": "default"
        },
        {
          "imported": "ProcesoCompletoComponent",
          "source": "../components/ProcesoCompleto",
          "type": "default"
        },
        {
          "imported": " Box, Typography, Paper ",
          "source": "@mui/material",
          "type": "named"
        }
      ],
      "/frontend/src/pages/ProviderManager.js": [
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": "\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Button,\r\n  TextField,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Chip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Tabs,\r\n  Tab,\r\n  Alert,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Divider,\r\n  Badge,\r\n  Tooltip,\r\n  LinearProgress,\r\n  InputAdornment\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Business as BusinessIcon,\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Visibility as ViewIcon,\r\n  Search as SearchIcon,\r\n  Security as SecurityIcon,\r\n  Description as ContractIcon,\r\n  Language as InternationalIcon,\r\n  Warning as WarningIcon,\r\n  CheckCircle as CompliantIcon,\r\n  Schedule as PendingIcon,\r\n  Gavel as LegalIcon,\r\n  Assessment as RiskIcon,\r\n  ContactMail as ContactIcon,\r\n  Public as CountryIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " ratService ",
          "source": "../services/ratService",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        }
      ],
      "/frontend/src/pages/RATEditPage.js": [
        {
          "imported": "ratIntelligenceEngine",
          "source": "../services/ratIntelligenceEngine",
          "type": "default"
        },
        {
          "imported": " useParams, useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": "\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Button,\r\n  Paper,\r\n  TextField,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormControl,\r\n  FormLabel,\r\n  Checkbox,\r\n  FormGroup,\r\n  LinearProgress,\r\n  Grid,\r\n  Alert,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Divider,\r\n  Chip,\r\n  IconButton,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Breadcrumbs,\r\n  Link,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  CircularProgress\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  ArrowBack as ArrowBackIcon,\r\n  Save as SaveIcon,\r\n  Check as CheckIcon,\r\n  Warning as WarningIcon,\r\n  Info as InfoIcon,\r\n  Edit as EditIcon,\r\n  History as HistoryIcon,\r\n  ContentCopy as CopyIcon,\r\n  Delete as DeleteIcon,\r\n  Publish as PublishIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " ratService ",
          "source": "../services/ratService",
          "type": "named"
        }
      ],
      "/frontend/src/pages/RATListPage.js": [
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": "\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TablePagination,\r\n  IconButton,\r\n  Chip,\r\n  TextField,\r\n  InputAdornment,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Button,\r\n  Tooltip,\r\n  Alert,\r\n  Card,\r\n  CardContent,\r\n  Grid\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Search as SearchIcon,\r\n  Edit as EditIcon,\r\n  Visibility as ViewIcon,\r\n  GetApp as ExportIcon,\r\n  Add as AddIcon,\r\n  FilterList as FilterIcon,\r\n  Assessment as RATIcon,\r\n  CheckCircle as CertifiedIcon,\r\n  Schedule as PendingIcon,\r\n  Error as ErrorIcon,\r\n  PictureAsPdf as PDFIcon,\r\n  TableChart as ExcelIcon,\r\n  Api as APIIcon,\r\n  Business as CostCenterIcon,\r\n  CloudDownload as DownloadIcon,\r\n  Share as ShareIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " ratService ",
          "source": "../services/ratService",
          "type": "named"
        },
        {
          "imported": " useTenant ",
          "source": "../contexts/TenantContext",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/pages/SistemaPrincipal.js": [
        {
          "imported": " useNavigate ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": "\r\n  Box,\r\n  Container,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  IconButton,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Alert,\r\n  Chip\r\n",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": "\r\n  Assessment as RATIcon,\r\n  Dashboard as DPOIcon,\r\n  Shield as DPIAIcon,\r\n  Business as ProveedoresIcon,\r\n  List as RATListIcon,\r\n  Notifications as ApprovalIcon,\r\n  Analytics as MetricsIcon,\r\n  AdminPanelSettings as AdminIcon,\r\n  Gavel as ContractIcon,\r\n  Notifications as NotificationIcon,\r\n  Description as ReportIcon,\r\n  Assessment as AssessmentIcon\r\n",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " INDUSTRIES_CONFIG ",
          "source": "../config/industries.config",
          "type": "named"
        }
      ],
      "/frontend/src/sdk/LPDPHubSDK.js": [],
      "/frontend/src/services/api.js": [
        {
          "imported": "smartSupabase",
          "source": "../utils/smartSupabaseClient",
          "type": "default"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/services/categoryAnalysisEngine.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/services/dataSync.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/services/industryStandardsService.js": [],
      "/frontend/src/services/partnerSyncEngine.js": [
        {
          "imported": "riskCalculationEngine",
          "source": "./riskCalculationEngine",
          "type": "default"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        },
        {
          "imported": " RAT_ESTADOS, ACTIVIDAD_DPO_ESTADOS ",
          "source": "../constants/estados",
          "type": "named"
        }
      ],
      "/frontend/src/services/proveedoresService.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/services/ratIntelligenceEngine.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/services/ratService.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        },
        {
          "imported": " RAT_ESTADOS ",
          "source": "../constants/estados",
          "type": "named"
        }
      ],
      "/frontend/src/services/riskCalculationEngine.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/services/specificCasesEngine.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/services/testBalancingEngine.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/tests/userSimulation.test.js": [],
      "/frontend/src/theme/colors.js": [],
      "/frontend/src/theme/darkTheme.js": [],
      "/frontend/src/utils/aiSupervisor.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/utils/completeSystemTester.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/utils/dataIntegrityValidator.js": [
        {
          "imported": "fileErrorLogger",
          "source": "./fileErrorLogger",
          "type": "default"
        }
      ],
      "/frontend/src/utils/databaseHealthMonitor.js": [
        {
          "imported": "fileErrorLogger",
          "source": "./fileErrorLogger",
          "type": "default"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/utils/dynamicLegalRules.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/utils/errorMonitoringOnly.js": [
        {
          "imported": "fileErrorLogger",
          "source": "./fileErrorLogger",
          "type": "default"
        }
      ],
      "/frontend/src/utils/errorPreventionMonitor.js": [],
      "/frontend/src/utils/fileErrorLogger.js": [],
      "/frontend/src/utils/frontendValidator.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/utils/humanInteractionSimulator.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/utils/iaAgentReporter.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/utils/index.js": [],
      "/frontend/src/utils/inputSanitizer.js": [],
      "/frontend/src/utils/instantSystemTest.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/utils/interactiveHelper.js": [
        {
          "imported": " Tooltip, Alert, Snackbar, Dialog, DialogTitle, DialogContent, IconButton ",
          "source": "@mui/material",
          "type": "named"
        },
        {
          "imported": " Help, LightbulbOutlined, WarningAmber, CheckCircle ",
          "source": "@mui/icons-material",
          "type": "named"
        },
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/utils/logicAuditor.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/utils/moduleValidator.js": [
        {
          "imported": "React",
          "source": "react",
          "type": "default"
        },
        {
          "imported": " render, screen, fireEvent, waitFor ",
          "source": "@testing-library/react",
          "type": "named"
        },
        {
          "imported": " BrowserRouter ",
          "source": "react-router-dom",
          "type": "named"
        },
        {
          "imported": " ThemeProvider, createTheme ",
          "source": "@mui/material/styles",
          "type": "named"
        }
      ],
      "/frontend/src/utils/preventiveAI_DISABLED.js": [],
      "/frontend/src/utils/ratEditModeFix.js": [],
      "/frontend/src/utils/rateLimiter.js": [],
      "/frontend/src/utils/secureLogger.js": [],
      "/frontend/src/utils/secureTokens.js": [],
      "/frontend/src/utils/semanticValidator.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/utils/smartDeduplication.js": [],
      "/frontend/src/utils/smartSupabaseClient.js": [
        {
          "imported": "rlsGuard",
          "source": "./supabaseRLSGuard",
          "type": "default"
        },
        {
          "imported": " supabase as originalSupabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/utils/supabaseAuditor.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/utils/supabaseEmpresaPersistence.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/utils/supabaseErrorLogger.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ],
      "/frontend/src/utils/supabaseRLSGuard.js": [
        {
          "imported": " supabase ",
          "source": "../config/supabaseClient",
          "type": "named"
        }
      ]
    },
    "circular_dependencies": [],
    "dependency_depth": {},
    "external_dependencies": [
      "@mui/material/CssBaseline",
      "react-router-dom",
      "@mui/material/styles",
      "@mui/material",
      "@mui/icons-material",
      "react",
      "@testing-library/react",
      "@supabase/supabase-js",
      "react-dom/client"
    ],
    "internal_dependencies": {
      "/frontend/src/App.js": [
        "./theme/darkTheme",
        "./components/LayoutSimple",
        "./components/auth/Login",
        "./pages/AdminPanel",
        "./components/admin/UserManagement",
        "./components/admin/IAAgentStatusPage",
        "./pages/GlosarioLPDP",
        "./components/ModuloEIPD",
        "./components/PreventiveAIController",
        "./components/GestionProveedores",
        "./components/RATFormWithCompliance",
        "./pages/DashboardDPO",
        "./pages/ProcesoCompleto",
        "./pages/GestionAsociaciones",
        "./pages/DPIAAlgoritmos",
        "./components/RATSystemProfessional",
        "./pages/RATListPage",
        "./pages/RATEditPage",
        "./pages/DPOApprovalQueue",
        "./components/ComplianceMetrics",
        "./pages/EIPDCreator",
        "./pages/EIPDListPage",
        "./pages/ProviderManager",
        "./components/AdminDashboard",
        "./components/RATSearchFilter",
        "./components/NotificationCenter",
        "./components/DPAGenerator",
        "./components/APIPartnersIntegration",
        "./components/ReportGenerator",
        "./components/EIPDTemplates",
        "./components/CalendarView",
        "./components/ImmutableAuditLog",
        "./components/DiagnosticCenter",
        "./pages/PaletaColores",
        "./pages/SistemaPrincipal",
        "./contexts/AuthContext",
        "./contexts/TenantContext"
      ],
      "/frontend/src/components/APIPartnersIntegration.js": [
        "./PageLayout",
        "../config/supabaseClient",
        "../contexts/TenantContext",
        "../contexts/AuthContext"
      ],
      "/frontend/src/components/AdminDashboard.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/components/CalendarView.js": [
        "../services/ratService",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "/frontend/src/components/ComplianceDashboard.js": [
        "../hooks/useComplianceIntegration.js"
      ],
      "/frontend/src/components/ComplianceMetrics.js": [
        "../config/supabaseClient",
        "../services/ratService",
        "../contexts/TenantContext"
      ],
      "/frontend/src/components/DPAGenerator.js": [
        "../contexts/TenantContext",
        "../config/supabaseClient"
      ],
      "/frontend/src/components/DiagnosticCenter.js": [
        "../utils/frontendValidator",
        "../config/supabaseClient"
      ],
      "/frontend/src/components/EIPDTemplates.js": [
        "../services/ratService",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "/frontend/src/components/FundamentosTecnicos.js": [
        "./PageLayout",
        "../services/industryStandardsService"
      ],
      "/frontend/src/components/GestionProveedores.js": [
        "../services/proveedoresService",
        "../contexts/AuthContext",
        "../config/supabaseClient"
      ],
      "/frontend/src/components/ImmutableAuditLog.js": [
        "../services/ratService",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "/frontend/src/components/Layout.js": [
        "../contexts/AuthContext"
      ],
      "/frontend/src/components/LayoutSimple.js": [
        "../contexts/AuthContext"
      ],
      "/frontend/src/components/ModuloEIPD.js": [
        "../contexts/AuthContext"
      ],
      "/frontend/src/components/NotificationCenter.js": [
        "../services/ratService",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "/frontend/src/components/PreventiveAIController.js": [
        "../utils/preventiveAI",
        "../utils/logicAuditor",
        "../contexts/TenantContext",
        "../contexts/AuthContext"
      ],
      "/frontend/src/components/RATEditPage.js": [
        "../utils/preventiveAI",
        "../config/supabaseClient",
        "../hooks/useAuth"
      ],
      "/frontend/src/components/RATFormWithCompliance.js": [
        "../services/ratIntelligenceEngine"
      ],
      "/frontend/src/components/RATSystemProfessional.js": [
        "../utils/preventiveAI",
        "../utils/supabaseErrorLogger",
        "../services/ratService",
        "../services/ratIntelligenceEngine",
        "../services/riskCalculationEngine",
        "../services/testBalancingEngine",
        "../services/categoryAnalysisEngine",
        "../services/specificCasesEngine",
        "./EmpresaDataManager",
        "./PageLayout",
        "../utils/supabaseEmpresaPersistence",
        "../constants/estados",
        "../services/industryStandardsService",
        "../config/supabaseClient",
        "../contexts/TenantContext",
        "../contexts/AuthContext"
      ],
      "/frontend/src/components/ReportGenerator.js": [
        "./PageLayout",
        "../config/supabaseClient",
        "../contexts/TenantContext",
        "../contexts/AuthContext"
      ],
      "/frontend/src/components/__tests__/AdminDashboard.test.js": [
        "../AdminDashboard"
      ],
      "/frontend/src/components/admin/AdminPanel.js": [
        "./AdminDashboard",
        "./TenantManagement",
        "./UserManagement",
        "./SystemAudit",
        "./SystemReports"
      ],
      "/frontend/src/components/admin/IAAgentStatusPage.js": [
        "../../utils/iaAgentReporter",
        "../../contexts/AuthContext",
        "../../config/supabaseClient"
      ],
      "/frontend/src/components/admin/UsageDashboard.js": [
        "../../config/supabaseClient"
      ],
      "/frontend/src/components/admin/UserManagement.js": [
        "../../config/supabaseClient"
      ],
      "/frontend/src/components/auth/Login.js": [
        "../../contexts/AuthContext"
      ],
      "/frontend/src/contexts/AuthContext.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/contexts/TenantContext.js": [
        "../services/ratService",
        "./AuthContext",
        "../config/supabaseClient"
      ],
      "/frontend/src/hooks/useDataSync.js": [
        "../services/dataSync",
        "../contexts/TenantContext"
      ],
      "/frontend/src/index.js": [
        "./App"
      ],
      "/frontend/src/pages/AdminDashboard.js": [
        "../services/ratService",
        "../config/supabaseClient"
      ],
      "/frontend/src/pages/AdminPanel.js": [
        "../components/admin/IAAgentStatusPage",
        "../services/api"
      ],
      "/frontend/src/pages/DPOApprovalQueue.js": [
        "../services/ratIntelligenceEngine",
        "../services/ratService",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "/frontend/src/pages/Dashboard.js": [
        "../contexts/AuthContext"
      ],
      "/frontend/src/pages/DashboardDPO.js": [
        "../components/PageLayout",
        "../config/supabaseClient",
        "../contexts/TenantContext",
        "../hooks/useDataSync"
      ],
      "/frontend/src/pages/EIPDCreator.js": [
        "../services/ratIntelligenceEngine",
        "../services/ratService",
        "../contexts/TenantContext"
      ],
      "/frontend/src/pages/EIPDListPage.js": [
        "../constants/estados",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "/frontend/src/pages/GlosarioLPDP.js": [
        "../components/PageLayout"
      ],
      "/frontend/src/pages/ProcesoCompleto.js": [
        "../components/ProcesoCompleto"
      ],
      "/frontend/src/pages/ProviderManager.js": [
        "../services/ratService",
        "../config/supabaseClient",
        "../contexts/TenantContext"
      ],
      "/frontend/src/pages/RATEditPage.js": [
        "../services/ratIntelligenceEngine",
        "../services/ratService"
      ],
      "/frontend/src/pages/RATListPage.js": [
        "../services/ratService",
        "../contexts/TenantContext",
        "../config/supabaseClient"
      ],
      "/frontend/src/pages/SistemaPrincipal.js": [
        "../config/industries.config"
      ],
      "/frontend/src/services/api.js": [
        "../utils/smartSupabaseClient",
        "../config/supabaseClient"
      ],
      "/frontend/src/services/categoryAnalysisEngine.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/services/dataSync.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/services/partnerSyncEngine.js": [
        "./riskCalculationEngine",
        "../config/supabaseClient",
        "../constants/estados"
      ],
      "/frontend/src/services/proveedoresService.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/services/ratIntelligenceEngine.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/services/ratService.js": [
        "../config/supabaseClient",
        "../constants/estados"
      ],
      "/frontend/src/services/riskCalculationEngine.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/services/specificCasesEngine.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/services/testBalancingEngine.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/utils/aiSupervisor.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/utils/completeSystemTester.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/utils/dataIntegrityValidator.js": [
        "./fileErrorLogger"
      ],
      "/frontend/src/utils/databaseHealthMonitor.js": [
        "./fileErrorLogger",
        "../config/supabaseClient"
      ],
      "/frontend/src/utils/dynamicLegalRules.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/utils/errorMonitoringOnly.js": [
        "./fileErrorLogger"
      ],
      "/frontend/src/utils/frontendValidator.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/utils/humanInteractionSimulator.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/utils/iaAgentReporter.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/utils/instantSystemTest.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/utils/interactiveHelper.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/utils/logicAuditor.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/utils/semanticValidator.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/utils/smartSupabaseClient.js": [
        "./supabaseRLSGuard",
        "../config/supabaseClient"
      ],
      "/frontend/src/utils/supabaseAuditor.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/utils/supabaseEmpresaPersistence.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/utils/supabaseErrorLogger.js": [
        "../config/supabaseClient"
      ],
      "/frontend/src/utils/supabaseRLSGuard.js": [
        "../config/supabaseClient"
      ]
    }
  },
  "summary": {
    "analysis_type": "EXHAUSTIVE_100%_OFFLINE",
    "coverage": {
      "modules_analyzed": 105,
      "supabase_operations_found": 18,
      "tables_mapped": 1197,
      "functions_cataloged": 2587,
      "dependencies_mapped": 105
    },
    "execution_metrics": {
      "total_time_ms": 3041,
      "total_time_readable": "3s",
      "files_processed": 105,
      "average_processing_time": 29
    },
    "completeness": {
      "code_analysis": "100%",
      "function_inventory": "100%",
      "supabase_mapping": "100%",
      "dependency_graph": "100%",
      "quality_analysis": "100%"
    },
    "next_phase": "REAL_SUPABASE_CONNECTIVITY_TESTING"
  },
  "code_quality": {
    "metrics": {
      "total_files": 105,
      "total_lines": 58276,
      "total_functions": 2587,
      "average_file_size": 555,
      "code_duplication_score": 0
    },
    "issues": {
      "potential_bugs": [],
      "performance_issues": [],
      "security_concerns": [],
      "maintainability_issues": []
    },
    "recommendations": [
      "Consider splitting large files"
    ]
  },
  "completed_at": "2025-09-04T15:09:38.923Z"
}